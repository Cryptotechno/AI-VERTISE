{"version":3,"file":"charts-BOZ26ETd.js","sources":["../../node_modules/@kurkle/color/dist/color.esm.js","../../node_modules/chart.js/dist/chunks/helpers.segment.js","../../node_modules/chart.js/dist/chart.js","../../node_modules/react-chartjs-2/dist/index.js"],"sourcesContent":["/*!\n * @kurkle/color v0.3.4\n * https://github.com/kurkle/color#readme\n * (c) 2024 Jukka Kurkela\n * Released under the MIT License\n */\nfunction round(v) {\n  return v + 0.5 | 0;\n}\nconst lim = (v, l, h) => Math.max(Math.min(v, h), l);\nfunction p2b(v) {\n  return lim(round(v * 2.55), 0, 255);\n}\nfunction b2p(v) {\n  return lim(round(v / 2.55), 0, 100);\n}\nfunction n2b(v) {\n  return lim(round(v * 255), 0, 255);\n}\nfunction b2n(v) {\n  return lim(round(v / 2.55) / 100, 0, 1);\n}\nfunction n2p(v) {\n  return lim(round(v * 100), 0, 100);\n}\n\nconst map$1 = {0: 0, 1: 1, 2: 2, 3: 3, 4: 4, 5: 5, 6: 6, 7: 7, 8: 8, 9: 9, A: 10, B: 11, C: 12, D: 13, E: 14, F: 15, a: 10, b: 11, c: 12, d: 13, e: 14, f: 15};\nconst hex = [...'0123456789ABCDEF'];\nconst h1 = b => hex[b & 0xF];\nconst h2 = b => hex[(b & 0xF0) >> 4] + hex[b & 0xF];\nconst eq = b => ((b & 0xF0) >> 4) === (b & 0xF);\nconst isShort = v => eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);\nfunction hexParse(str) {\n  var len = str.length;\n  var ret;\n  if (str[0] === '#') {\n    if (len === 4 || len === 5) {\n      ret = {\n        r: 255 & map$1[str[1]] * 17,\n        g: 255 & map$1[str[2]] * 17,\n        b: 255 & map$1[str[3]] * 17,\n        a: len === 5 ? map$1[str[4]] * 17 : 255\n      };\n    } else if (len === 7 || len === 9) {\n      ret = {\n        r: map$1[str[1]] << 4 | map$1[str[2]],\n        g: map$1[str[3]] << 4 | map$1[str[4]],\n        b: map$1[str[5]] << 4 | map$1[str[6]],\n        a: len === 9 ? (map$1[str[7]] << 4 | map$1[str[8]]) : 255\n      };\n    }\n  }\n  return ret;\n}\nconst alpha = (a, f) => a < 255 ? f(a) : '';\nfunction hexString(v) {\n  var f = isShort(v) ? h1 : h2;\n  return v\n    ? '#' + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f)\n    : undefined;\n}\n\nconst HUE_RE = /^(hsla?|hwb|hsv)\\(\\s*([-+.e\\d]+)(?:deg)?[\\s,]+([-+.e\\d]+)%[\\s,]+([-+.e\\d]+)%(?:[\\s,]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction hsl2rgbn(h, s, l) {\n  const a = s * Math.min(l, 1 - l);\n  const f = (n, k = (n + h / 30) % 12) => l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);\n  return [f(0), f(8), f(4)];\n}\nfunction hsv2rgbn(h, s, v) {\n  const f = (n, k = (n + h / 60) % 6) => v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);\n  return [f(5), f(3), f(1)];\n}\nfunction hwb2rgbn(h, w, b) {\n  const rgb = hsl2rgbn(h, 1, 0.5);\n  let i;\n  if (w + b > 1) {\n    i = 1 / (w + b);\n    w *= i;\n    b *= i;\n  }\n  for (i = 0; i < 3; i++) {\n    rgb[i] *= 1 - w - b;\n    rgb[i] += w;\n  }\n  return rgb;\n}\nfunction hueValue(r, g, b, d, max) {\n  if (r === max) {\n    return ((g - b) / d) + (g < b ? 6 : 0);\n  }\n  if (g === max) {\n    return (b - r) / d + 2;\n  }\n  return (r - g) / d + 4;\n}\nfunction rgb2hsl(v) {\n  const range = 255;\n  const r = v.r / range;\n  const g = v.g / range;\n  const b = v.b / range;\n  const max = Math.max(r, g, b);\n  const min = Math.min(r, g, b);\n  const l = (max + min) / 2;\n  let h, s, d;\n  if (max !== min) {\n    d = max - min;\n    s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n    h = hueValue(r, g, b, d, max);\n    h = h * 60 + 0.5;\n  }\n  return [h | 0, s || 0, l];\n}\nfunction calln(f, a, b, c) {\n  return (\n    Array.isArray(a)\n      ? f(a[0], a[1], a[2])\n      : f(a, b, c)\n  ).map(n2b);\n}\nfunction hsl2rgb(h, s, l) {\n  return calln(hsl2rgbn, h, s, l);\n}\nfunction hwb2rgb(h, w, b) {\n  return calln(hwb2rgbn, h, w, b);\n}\nfunction hsv2rgb(h, s, v) {\n  return calln(hsv2rgbn, h, s, v);\n}\nfunction hue(h) {\n  return (h % 360 + 360) % 360;\n}\nfunction hueParse(str) {\n  const m = HUE_RE.exec(str);\n  let a = 255;\n  let v;\n  if (!m) {\n    return;\n  }\n  if (m[5] !== v) {\n    a = m[6] ? p2b(+m[5]) : n2b(+m[5]);\n  }\n  const h = hue(+m[2]);\n  const p1 = +m[3] / 100;\n  const p2 = +m[4] / 100;\n  if (m[1] === 'hwb') {\n    v = hwb2rgb(h, p1, p2);\n  } else if (m[1] === 'hsv') {\n    v = hsv2rgb(h, p1, p2);\n  } else {\n    v = hsl2rgb(h, p1, p2);\n  }\n  return {\n    r: v[0],\n    g: v[1],\n    b: v[2],\n    a: a\n  };\n}\nfunction rotate(v, deg) {\n  var h = rgb2hsl(v);\n  h[0] = hue(h[0] + deg);\n  h = hsl2rgb(h);\n  v.r = h[0];\n  v.g = h[1];\n  v.b = h[2];\n}\nfunction hslString(v) {\n  if (!v) {\n    return;\n  }\n  const a = rgb2hsl(v);\n  const h = a[0];\n  const s = n2p(a[1]);\n  const l = n2p(a[2]);\n  return v.a < 255\n    ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})`\n    : `hsl(${h}, ${s}%, ${l}%)`;\n}\n\nconst map = {\n\tx: 'dark',\n\tZ: 'light',\n\tY: 're',\n\tX: 'blu',\n\tW: 'gr',\n\tV: 'medium',\n\tU: 'slate',\n\tA: 'ee',\n\tT: 'ol',\n\tS: 'or',\n\tB: 'ra',\n\tC: 'lateg',\n\tD: 'ights',\n\tR: 'in',\n\tQ: 'turquois',\n\tE: 'hi',\n\tP: 'ro',\n\tO: 'al',\n\tN: 'le',\n\tM: 'de',\n\tL: 'yello',\n\tF: 'en',\n\tK: 'ch',\n\tG: 'arks',\n\tH: 'ea',\n\tI: 'ightg',\n\tJ: 'wh'\n};\nconst names$1 = {\n\tOiceXe: 'f0f8ff',\n\tantiquewEte: 'faebd7',\n\taqua: 'ffff',\n\taquamarRe: '7fffd4',\n\tazuY: 'f0ffff',\n\tbeige: 'f5f5dc',\n\tbisque: 'ffe4c4',\n\tblack: '0',\n\tblanKedOmond: 'ffebcd',\n\tXe: 'ff',\n\tXeviTet: '8a2be2',\n\tbPwn: 'a52a2a',\n\tburlywood: 'deb887',\n\tcaMtXe: '5f9ea0',\n\tKartYuse: '7fff00',\n\tKocTate: 'd2691e',\n\tcSO: 'ff7f50',\n\tcSnflowerXe: '6495ed',\n\tcSnsilk: 'fff8dc',\n\tcrimson: 'dc143c',\n\tcyan: 'ffff',\n\txXe: '8b',\n\txcyan: '8b8b',\n\txgTMnPd: 'b8860b',\n\txWay: 'a9a9a9',\n\txgYF: '6400',\n\txgYy: 'a9a9a9',\n\txkhaki: 'bdb76b',\n\txmagFta: '8b008b',\n\txTivegYF: '556b2f',\n\txSange: 'ff8c00',\n\txScEd: '9932cc',\n\txYd: '8b0000',\n\txsOmon: 'e9967a',\n\txsHgYF: '8fbc8f',\n\txUXe: '483d8b',\n\txUWay: '2f4f4f',\n\txUgYy: '2f4f4f',\n\txQe: 'ced1',\n\txviTet: '9400d3',\n\tdAppRk: 'ff1493',\n\tdApskyXe: 'bfff',\n\tdimWay: '696969',\n\tdimgYy: '696969',\n\tdodgerXe: '1e90ff',\n\tfiYbrick: 'b22222',\n\tflSOwEte: 'fffaf0',\n\tfoYstWAn: '228b22',\n\tfuKsia: 'ff00ff',\n\tgaRsbSo: 'dcdcdc',\n\tghostwEte: 'f8f8ff',\n\tgTd: 'ffd700',\n\tgTMnPd: 'daa520',\n\tWay: '808080',\n\tgYF: '8000',\n\tgYFLw: 'adff2f',\n\tgYy: '808080',\n\thoneyMw: 'f0fff0',\n\thotpRk: 'ff69b4',\n\tRdianYd: 'cd5c5c',\n\tRdigo: '4b0082',\n\tivSy: 'fffff0',\n\tkhaki: 'f0e68c',\n\tlavFMr: 'e6e6fa',\n\tlavFMrXsh: 'fff0f5',\n\tlawngYF: '7cfc00',\n\tNmoncEffon: 'fffacd',\n\tZXe: 'add8e6',\n\tZcSO: 'f08080',\n\tZcyan: 'e0ffff',\n\tZgTMnPdLw: 'fafad2',\n\tZWay: 'd3d3d3',\n\tZgYF: '90ee90',\n\tZgYy: 'd3d3d3',\n\tZpRk: 'ffb6c1',\n\tZsOmon: 'ffa07a',\n\tZsHgYF: '20b2aa',\n\tZskyXe: '87cefa',\n\tZUWay: '778899',\n\tZUgYy: '778899',\n\tZstAlXe: 'b0c4de',\n\tZLw: 'ffffe0',\n\tlime: 'ff00',\n\tlimegYF: '32cd32',\n\tlRF: 'faf0e6',\n\tmagFta: 'ff00ff',\n\tmaPon: '800000',\n\tVaquamarRe: '66cdaa',\n\tVXe: 'cd',\n\tVScEd: 'ba55d3',\n\tVpurpN: '9370db',\n\tVsHgYF: '3cb371',\n\tVUXe: '7b68ee',\n\tVsprRggYF: 'fa9a',\n\tVQe: '48d1cc',\n\tVviTetYd: 'c71585',\n\tmidnightXe: '191970',\n\tmRtcYam: 'f5fffa',\n\tmistyPse: 'ffe4e1',\n\tmoccasR: 'ffe4b5',\n\tnavajowEte: 'ffdead',\n\tnavy: '80',\n\tTdlace: 'fdf5e6',\n\tTive: '808000',\n\tTivedBb: '6b8e23',\n\tSange: 'ffa500',\n\tSangeYd: 'ff4500',\n\tScEd: 'da70d6',\n\tpOegTMnPd: 'eee8aa',\n\tpOegYF: '98fb98',\n\tpOeQe: 'afeeee',\n\tpOeviTetYd: 'db7093',\n\tpapayawEp: 'ffefd5',\n\tpHKpuff: 'ffdab9',\n\tperu: 'cd853f',\n\tpRk: 'ffc0cb',\n\tplum: 'dda0dd',\n\tpowMrXe: 'b0e0e6',\n\tpurpN: '800080',\n\tYbeccapurpN: '663399',\n\tYd: 'ff0000',\n\tPsybrown: 'bc8f8f',\n\tPyOXe: '4169e1',\n\tsaddNbPwn: '8b4513',\n\tsOmon: 'fa8072',\n\tsandybPwn: 'f4a460',\n\tsHgYF: '2e8b57',\n\tsHshell: 'fff5ee',\n\tsiFna: 'a0522d',\n\tsilver: 'c0c0c0',\n\tskyXe: '87ceeb',\n\tUXe: '6a5acd',\n\tUWay: '708090',\n\tUgYy: '708090',\n\tsnow: 'fffafa',\n\tsprRggYF: 'ff7f',\n\tstAlXe: '4682b4',\n\ttan: 'd2b48c',\n\tteO: '8080',\n\ttEstN: 'd8bfd8',\n\ttomato: 'ff6347',\n\tQe: '40e0d0',\n\tviTet: 'ee82ee',\n\tJHt: 'f5deb3',\n\twEte: 'ffffff',\n\twEtesmoke: 'f5f5f5',\n\tLw: 'ffff00',\n\tLwgYF: '9acd32'\n};\nfunction unpack() {\n  const unpacked = {};\n  const keys = Object.keys(names$1);\n  const tkeys = Object.keys(map);\n  let i, j, k, ok, nk;\n  for (i = 0; i < keys.length; i++) {\n    ok = nk = keys[i];\n    for (j = 0; j < tkeys.length; j++) {\n      k = tkeys[j];\n      nk = nk.replace(k, map[k]);\n    }\n    k = parseInt(names$1[ok], 16);\n    unpacked[nk] = [k >> 16 & 0xFF, k >> 8 & 0xFF, k & 0xFF];\n  }\n  return unpacked;\n}\n\nlet names;\nfunction nameParse(str) {\n  if (!names) {\n    names = unpack();\n    names.transparent = [0, 0, 0, 0];\n  }\n  const a = names[str.toLowerCase()];\n  return a && {\n    r: a[0],\n    g: a[1],\n    b: a[2],\n    a: a.length === 4 ? a[3] : 255\n  };\n}\n\nconst RGB_RE = /^rgba?\\(\\s*([-+.\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?[\\s,]+([-+.e\\d]+)(%)?(?:[\\s,/]+([-+.e\\d]+)(%)?)?\\s*\\)$/;\nfunction rgbParse(str) {\n  const m = RGB_RE.exec(str);\n  let a = 255;\n  let r, g, b;\n  if (!m) {\n    return;\n  }\n  if (m[7] !== r) {\n    const v = +m[7];\n    a = m[8] ? p2b(v) : lim(v * 255, 0, 255);\n  }\n  r = +m[1];\n  g = +m[3];\n  b = +m[5];\n  r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));\n  g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));\n  b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));\n  return {\n    r: r,\n    g: g,\n    b: b,\n    a: a\n  };\n}\nfunction rgbString(v) {\n  return v && (\n    v.a < 255\n      ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})`\n      : `rgb(${v.r}, ${v.g}, ${v.b})`\n  );\n}\n\nconst to = v => v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;\nconst from = v => v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);\nfunction interpolate(rgb1, rgb2, t) {\n  const r = from(b2n(rgb1.r));\n  const g = from(b2n(rgb1.g));\n  const b = from(b2n(rgb1.b));\n  return {\n    r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),\n    g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),\n    b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),\n    a: rgb1.a + t * (rgb2.a - rgb1.a)\n  };\n}\n\nfunction modHSL(v, i, ratio) {\n  if (v) {\n    let tmp = rgb2hsl(v);\n    tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));\n    tmp = hsl2rgb(tmp);\n    v.r = tmp[0];\n    v.g = tmp[1];\n    v.b = tmp[2];\n  }\n}\nfunction clone(v, proto) {\n  return v ? Object.assign(proto || {}, v) : v;\n}\nfunction fromObject(input) {\n  var v = {r: 0, g: 0, b: 0, a: 255};\n  if (Array.isArray(input)) {\n    if (input.length >= 3) {\n      v = {r: input[0], g: input[1], b: input[2], a: 255};\n      if (input.length > 3) {\n        v.a = n2b(input[3]);\n      }\n    }\n  } else {\n    v = clone(input, {r: 0, g: 0, b: 0, a: 1});\n    v.a = n2b(v.a);\n  }\n  return v;\n}\nfunction functionParse(str) {\n  if (str.charAt(0) === 'r') {\n    return rgbParse(str);\n  }\n  return hueParse(str);\n}\nclass Color {\n  constructor(input) {\n    if (input instanceof Color) {\n      return input;\n    }\n    const type = typeof input;\n    let v;\n    if (type === 'object') {\n      v = fromObject(input);\n    } else if (type === 'string') {\n      v = hexParse(input) || nameParse(input) || functionParse(input);\n    }\n    this._rgb = v;\n    this._valid = !!v;\n  }\n  get valid() {\n    return this._valid;\n  }\n  get rgb() {\n    var v = clone(this._rgb);\n    if (v) {\n      v.a = b2n(v.a);\n    }\n    return v;\n  }\n  set rgb(obj) {\n    this._rgb = fromObject(obj);\n  }\n  rgbString() {\n    return this._valid ? rgbString(this._rgb) : undefined;\n  }\n  hexString() {\n    return this._valid ? hexString(this._rgb) : undefined;\n  }\n  hslString() {\n    return this._valid ? hslString(this._rgb) : undefined;\n  }\n  mix(color, weight) {\n    if (color) {\n      const c1 = this.rgb;\n      const c2 = color.rgb;\n      let w2;\n      const p = weight === w2 ? 0.5 : weight;\n      const w = 2 * p - 1;\n      const a = c1.a - c2.a;\n      const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;\n      w2 = 1 - w1;\n      c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;\n      c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;\n      c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;\n      c1.a = p * c1.a + (1 - p) * c2.a;\n      this.rgb = c1;\n    }\n    return this;\n  }\n  interpolate(color, t) {\n    if (color) {\n      this._rgb = interpolate(this._rgb, color._rgb, t);\n    }\n    return this;\n  }\n  clone() {\n    return new Color(this.rgb);\n  }\n  alpha(a) {\n    this._rgb.a = n2b(a);\n    return this;\n  }\n  clearer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 - ratio;\n    return this;\n  }\n  greyscale() {\n    const rgb = this._rgb;\n    const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);\n    rgb.r = rgb.g = rgb.b = val;\n    return this;\n  }\n  opaquer(ratio) {\n    const rgb = this._rgb;\n    rgb.a *= 1 + ratio;\n    return this;\n  }\n  negate() {\n    const v = this._rgb;\n    v.r = 255 - v.r;\n    v.g = 255 - v.g;\n    v.b = 255 - v.b;\n    return this;\n  }\n  lighten(ratio) {\n    modHSL(this._rgb, 2, ratio);\n    return this;\n  }\n  darken(ratio) {\n    modHSL(this._rgb, 2, -ratio);\n    return this;\n  }\n  saturate(ratio) {\n    modHSL(this._rgb, 1, ratio);\n    return this;\n  }\n  desaturate(ratio) {\n    modHSL(this._rgb, 1, -ratio);\n    return this;\n  }\n  rotate(deg) {\n    rotate(this._rgb, deg);\n    return this;\n  }\n}\n\nfunction index_esm(input) {\n  return new Color(input);\n}\n\nexport { Color, b2n, b2p, index_esm as default, hexParse, hexString, hsl2rgb, hslString, hsv2rgb, hueParse, hwb2rgb, lim, n2b, n2p, nameParse, p2b, rgb2hsl, rgbParse, rgbString, rotate, round };\n","/*!\n * Chart.js v4.4.8\n * https://www.chartjs.org\n * (c) 2025 Chart.js Contributors\n * Released under the MIT License\n */\nimport { Color } from '@kurkle/color';\n\n/**\n * @namespace Chart.helpers\n */ /**\n * An empty function that can be used, for example, for optional callback.\n */ function noop() {\n/* noop */ }\n/**\n * Returns a unique id, sequentially generated from a global variable.\n */ const uid = (()=>{\n    let id = 0;\n    return ()=>id++;\n})();\n/**\n * Returns true if `value` is neither null nor undefined, else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isNullOrUndef(value) {\n    return value === null || value === undefined;\n}\n/**\n * Returns true if `value` is an array (including typed arrays), else returns false.\n * @param value - The value to test.\n * @function\n */ function isArray(value) {\n    if (Array.isArray && Array.isArray(value)) {\n        return true;\n    }\n    const type = Object.prototype.toString.call(value);\n    if (type.slice(0, 7) === '[object' && type.slice(-6) === 'Array]') {\n        return true;\n    }\n    return false;\n}\n/**\n * Returns true if `value` is an object (excluding null), else returns false.\n * @param value - The value to test.\n * @since 2.7.0\n */ function isObject(value) {\n    return value !== null && Object.prototype.toString.call(value) === '[object Object]';\n}\n/**\n * Returns true if `value` is a finite number, else returns false\n * @param value  - The value to test.\n */ function isNumberFinite(value) {\n    return (typeof value === 'number' || value instanceof Number) && isFinite(+value);\n}\n/**\n * Returns `value` if finite, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is not finite.\n */ function finiteOrDefault(value, defaultValue) {\n    return isNumberFinite(value) ? value : defaultValue;\n}\n/**\n * Returns `value` if defined, else returns `defaultValue`.\n * @param value - The value to return if defined.\n * @param defaultValue - The value to return if `value` is undefined.\n */ function valueOrDefault(value, defaultValue) {\n    return typeof value === 'undefined' ? defaultValue : value;\n}\nconst toPercentage = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 : +value / dimension;\nconst toDimension = (value, dimension)=>typeof value === 'string' && value.endsWith('%') ? parseFloat(value) / 100 * dimension : +value;\n/**\n * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the\n * value returned by `fn`. If `fn` is not a function, this method returns undefined.\n * @param fn - The function to call.\n * @param args - The arguments with which `fn` should be called.\n * @param [thisArg] - The value of `this` provided for the call to `fn`.\n */ function callback(fn, args, thisArg) {\n    if (fn && typeof fn.call === 'function') {\n        return fn.apply(thisArg, args);\n    }\n}\nfunction each(loopable, fn, thisArg, reverse) {\n    let i, len, keys;\n    if (isArray(loopable)) {\n        len = loopable.length;\n        if (reverse) {\n            for(i = len - 1; i >= 0; i--){\n                fn.call(thisArg, loopable[i], i);\n            }\n        } else {\n            for(i = 0; i < len; i++){\n                fn.call(thisArg, loopable[i], i);\n            }\n        }\n    } else if (isObject(loopable)) {\n        keys = Object.keys(loopable);\n        len = keys.length;\n        for(i = 0; i < len; i++){\n            fn.call(thisArg, loopable[keys[i]], keys[i]);\n        }\n    }\n}\n/**\n * Returns true if the `a0` and `a1` arrays have the same content, else returns false.\n * @param a0 - The array to compare\n * @param a1 - The array to compare\n * @private\n */ function _elementsEqual(a0, a1) {\n    let i, ilen, v0, v1;\n    if (!a0 || !a1 || a0.length !== a1.length) {\n        return false;\n    }\n    for(i = 0, ilen = a0.length; i < ilen; ++i){\n        v0 = a0[i];\n        v1 = a1[i];\n        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) {\n            return false;\n        }\n    }\n    return true;\n}\n/**\n * Returns a deep copy of `source` without keeping references on objects and arrays.\n * @param source - The value to clone.\n */ function clone(source) {\n    if (isArray(source)) {\n        return source.map(clone);\n    }\n    if (isObject(source)) {\n        const target = Object.create(null);\n        const keys = Object.keys(source);\n        const klen = keys.length;\n        let k = 0;\n        for(; k < klen; ++k){\n            target[keys[k]] = clone(source[keys[k]]);\n        }\n        return target;\n    }\n    return source;\n}\nfunction isValidKey(key) {\n    return [\n        '__proto__',\n        'prototype',\n        'constructor'\n    ].indexOf(key) === -1;\n}\n/**\n * The default merger when Chart.helpers.merge is called without merger option.\n * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.\n * @private\n */ function _merger(key, target, source, options) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        // eslint-disable-next-line @typescript-eslint/no-use-before-define\n        merge(tval, sval, options);\n    } else {\n        target[key] = clone(sval);\n    }\n}\nfunction merge(target, source, options) {\n    const sources = isArray(source) ? source : [\n        source\n    ];\n    const ilen = sources.length;\n    if (!isObject(target)) {\n        return target;\n    }\n    options = options || {};\n    const merger = options.merger || _merger;\n    let current;\n    for(let i = 0; i < ilen; ++i){\n        current = sources[i];\n        if (!isObject(current)) {\n            continue;\n        }\n        const keys = Object.keys(current);\n        for(let k = 0, klen = keys.length; k < klen; ++k){\n            merger(keys[k], target, current, options);\n        }\n    }\n    return target;\n}\nfunction mergeIf(target, source) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    return merge(target, source, {\n        merger: _mergerIf\n    });\n}\n/**\n * Merges source[key] in target[key] only if target[key] is undefined.\n * @private\n */ function _mergerIf(key, target, source) {\n    if (!isValidKey(key)) {\n        return;\n    }\n    const tval = target[key];\n    const sval = source[key];\n    if (isObject(tval) && isObject(sval)) {\n        mergeIf(tval, sval);\n    } else if (!Object.prototype.hasOwnProperty.call(target, key)) {\n        target[key] = clone(sval);\n    }\n}\n/**\n * @private\n */ function _deprecated(scope, value, previous, current) {\n    if (value !== undefined) {\n        console.warn(scope + ': \"' + previous + '\" is deprecated. Please use \"' + current + '\" instead');\n    }\n}\n// resolveObjectKey resolver cache\nconst keyResolvers = {\n    // Chart.helpers.core resolveObjectKey should resolve empty key to root object\n    '': (v)=>v,\n    // default resolvers\n    x: (o)=>o.x,\n    y: (o)=>o.y\n};\n/**\n * @private\n */ function _splitKey(key) {\n    const parts = key.split('.');\n    const keys = [];\n    let tmp = '';\n    for (const part of parts){\n        tmp += part;\n        if (tmp.endsWith('\\\\')) {\n            tmp = tmp.slice(0, -1) + '.';\n        } else {\n            keys.push(tmp);\n            tmp = '';\n        }\n    }\n    return keys;\n}\nfunction _getKeyResolver(key) {\n    const keys = _splitKey(key);\n    return (obj)=>{\n        for (const k of keys){\n            if (k === '') {\n                break;\n            }\n            obj = obj && obj[k];\n        }\n        return obj;\n    };\n}\nfunction resolveObjectKey(obj, key) {\n    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));\n    return resolver(obj);\n}\n/**\n * @private\n */ function _capitalize(str) {\n    return str.charAt(0).toUpperCase() + str.slice(1);\n}\nconst defined = (value)=>typeof value !== 'undefined';\nconst isFunction = (value)=>typeof value === 'function';\n// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384\nconst setsEqual = (a, b)=>{\n    if (a.size !== b.size) {\n        return false;\n    }\n    for (const item of a){\n        if (!b.has(item)) {\n            return false;\n        }\n    }\n    return true;\n};\n/**\n * @param e - The event\n * @private\n */ function _isClickEvent(e) {\n    return e.type === 'mouseup' || e.type === 'click' || e.type === 'contextmenu';\n}\n\n/**\n * @alias Chart.helpers.math\n * @namespace\n */ const PI = Math.PI;\nconst TAU = 2 * PI;\nconst PITAU = TAU + PI;\nconst INFINITY = Number.POSITIVE_INFINITY;\nconst RAD_PER_DEG = PI / 180;\nconst HALF_PI = PI / 2;\nconst QUARTER_PI = PI / 4;\nconst TWO_THIRDS_PI = PI * 2 / 3;\nconst log10 = Math.log10;\nconst sign = Math.sign;\nfunction almostEquals(x, y, epsilon) {\n    return Math.abs(x - y) < epsilon;\n}\n/**\n * Implementation of the nice number algorithm used in determining where axis labels will go\n */ function niceNum(range) {\n    const roundedRange = Math.round(range);\n    range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;\n    const niceRange = Math.pow(10, Math.floor(log10(range)));\n    const fraction = range / niceRange;\n    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;\n    return niceFraction * niceRange;\n}\n/**\n * Returns an array of factors sorted from 1 to sqrt(value)\n * @private\n */ function _factorize(value) {\n    const result = [];\n    const sqrt = Math.sqrt(value);\n    let i;\n    for(i = 1; i < sqrt; i++){\n        if (value % i === 0) {\n            result.push(i);\n            result.push(value / i);\n        }\n    }\n    if (sqrt === (sqrt | 0)) {\n        result.push(sqrt);\n    }\n    result.sort((a, b)=>a - b).pop();\n    return result;\n}\n/**\n * Verifies that attempting to coerce n to string or number won't throw a TypeError.\n */ function isNonPrimitive(n) {\n    return typeof n === 'symbol' || typeof n === 'object' && n !== null && !(Symbol.toPrimitive in n || 'toString' in n || 'valueOf' in n);\n}\nfunction isNumber(n) {\n    return !isNonPrimitive(n) && !isNaN(parseFloat(n)) && isFinite(n);\n}\nfunction almostWhole(x, epsilon) {\n    const rounded = Math.round(x);\n    return rounded - epsilon <= x && rounded + epsilon >= x;\n}\n/**\n * @private\n */ function _setMinAndMaxByKey(array, target, property) {\n    let i, ilen, value;\n    for(i = 0, ilen = array.length; i < ilen; i++){\n        value = array[i][property];\n        if (!isNaN(value)) {\n            target.min = Math.min(target.min, value);\n            target.max = Math.max(target.max, value);\n        }\n    }\n}\nfunction toRadians(degrees) {\n    return degrees * (PI / 180);\n}\nfunction toDegrees(radians) {\n    return radians * (180 / PI);\n}\n/**\n * Returns the number of decimal places\n * i.e. the number of digits after the decimal point, of the value of this Number.\n * @param x - A number.\n * @returns The number of decimal places.\n * @private\n */ function _decimalPlaces(x) {\n    if (!isNumberFinite(x)) {\n        return;\n    }\n    let e = 1;\n    let p = 0;\n    while(Math.round(x * e) / e !== x){\n        e *= 10;\n        p++;\n    }\n    return p;\n}\n// Gets the angle from vertical upright to the point about a centre.\nfunction getAngleFromPoint(centrePoint, anglePoint) {\n    const distanceFromXCenter = anglePoint.x - centrePoint.x;\n    const distanceFromYCenter = anglePoint.y - centrePoint.y;\n    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);\n    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);\n    if (angle < -0.5 * PI) {\n        angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]\n    }\n    return {\n        angle,\n        distance: radialDistanceFromCenter\n    };\n}\nfunction distanceBetweenPoints(pt1, pt2) {\n    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));\n}\n/**\n * Shortest distance between angles, in either direction.\n * @private\n */ function _angleDiff(a, b) {\n    return (a - b + PITAU) % TAU - PI;\n}\n/**\n * Normalize angle to be between 0 and 2*PI\n * @private\n */ function _normalizeAngle(a) {\n    return (a % TAU + TAU) % TAU;\n}\n/**\n * @private\n */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {\n    const a = _normalizeAngle(angle);\n    const s = _normalizeAngle(start);\n    const e = _normalizeAngle(end);\n    const angleToStart = _normalizeAngle(s - a);\n    const angleToEnd = _normalizeAngle(e - a);\n    const startToAngle = _normalizeAngle(a - s);\n    const endToAngle = _normalizeAngle(a - e);\n    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;\n}\n/**\n * Limit `value` between `min` and `max`\n * @param value\n * @param min\n * @param max\n * @private\n */ function _limitValue(value, min, max) {\n    return Math.max(min, Math.min(max, value));\n}\n/**\n * @param {number} value\n * @private\n */ function _int16Range(value) {\n    return _limitValue(value, -32768, 32767);\n}\n/**\n * @param value\n * @param start\n * @param end\n * @param [epsilon]\n * @private\n */ function _isBetween(value, start, end, epsilon = 1e-6) {\n    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;\n}\n\nfunction _lookup(table, value, cmp) {\n    cmp = cmp || ((index)=>table[index] < value);\n    let hi = table.length - 1;\n    let lo = 0;\n    let mid;\n    while(hi - lo > 1){\n        mid = lo + hi >> 1;\n        if (cmp(mid)) {\n            lo = mid;\n        } else {\n            hi = mid;\n        }\n    }\n    return {\n        lo,\n        hi\n    };\n}\n/**\n * Binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @param last - lookup last index\n * @private\n */ const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>{\n        const ti = table[index][key];\n        return ti < value || ti === value && table[index + 1][key] === value;\n    } : (index)=>table[index][key] < value);\n/**\n * Reverse binary search\n * @param table - the table search. must be sorted!\n * @param key - property name for the value in each entry\n * @param value - value to find\n * @private\n */ const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);\n/**\n * Return subset of `values` between `min` and `max` inclusive.\n * Values are assumed to be in sorted order.\n * @param values - sorted array of values\n * @param min - min value\n * @param max - max value\n */ function _filterBetween(values, min, max) {\n    let start = 0;\n    let end = values.length;\n    while(start < end && values[start] < min){\n        start++;\n    }\n    while(end > start && values[end - 1] > max){\n        end--;\n    }\n    return start > 0 || end < values.length ? values.slice(start, end) : values;\n}\nconst arrayEvents = [\n    'push',\n    'pop',\n    'shift',\n    'splice',\n    'unshift'\n];\nfunction listenArrayEvents(array, listener) {\n    if (array._chartjs) {\n        array._chartjs.listeners.push(listener);\n        return;\n    }\n    Object.defineProperty(array, '_chartjs', {\n        configurable: true,\n        enumerable: false,\n        value: {\n            listeners: [\n                listener\n            ]\n        }\n    });\n    arrayEvents.forEach((key)=>{\n        const method = '_onData' + _capitalize(key);\n        const base = array[key];\n        Object.defineProperty(array, key, {\n            configurable: true,\n            enumerable: false,\n            value (...args) {\n                const res = base.apply(this, args);\n                array._chartjs.listeners.forEach((object)=>{\n                    if (typeof object[method] === 'function') {\n                        object[method](...args);\n                    }\n                });\n                return res;\n            }\n        });\n    });\n}\nfunction unlistenArrayEvents(array, listener) {\n    const stub = array._chartjs;\n    if (!stub) {\n        return;\n    }\n    const listeners = stub.listeners;\n    const index = listeners.indexOf(listener);\n    if (index !== -1) {\n        listeners.splice(index, 1);\n    }\n    if (listeners.length > 0) {\n        return;\n    }\n    arrayEvents.forEach((key)=>{\n        delete array[key];\n    });\n    delete array._chartjs;\n}\n/**\n * @param items\n */ function _arrayUnique(items) {\n    const set = new Set(items);\n    if (set.size === items.length) {\n        return items;\n    }\n    return Array.from(set);\n}\n\nfunction fontString(pixelSize, fontStyle, fontFamily) {\n    return fontStyle + ' ' + pixelSize + 'px ' + fontFamily;\n}\n/**\n* Request animation polyfill\n*/ const requestAnimFrame = function() {\n    if (typeof window === 'undefined') {\n        return function(callback) {\n            return callback();\n        };\n    }\n    return window.requestAnimationFrame;\n}();\n/**\n * Throttles calling `fn` once per animation frame\n * Latest arguments are used on the actual call\n */ function throttled(fn, thisArg) {\n    let argsToUse = [];\n    let ticking = false;\n    return function(...args) {\n        // Save the args for use later\n        argsToUse = args;\n        if (!ticking) {\n            ticking = true;\n            requestAnimFrame.call(window, ()=>{\n                ticking = false;\n                fn.apply(thisArg, argsToUse);\n            });\n        }\n    };\n}\n/**\n * Debounces calling `fn` for `delay` ms\n */ function debounce(fn, delay) {\n    let timeout;\n    return function(...args) {\n        if (delay) {\n            clearTimeout(timeout);\n            timeout = setTimeout(fn, delay, args);\n        } else {\n            fn.apply(this, args);\n        }\n        return delay;\n    };\n}\n/**\n * Converts 'start' to 'left', 'end' to 'right' and others to 'center'\n * @private\n */ const _toLeftRightCenter = (align)=>align === 'start' ? 'left' : align === 'end' ? 'right' : 'center';\n/**\n * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`\n * @private\n */ const _alignStartEnd = (align, start, end)=>align === 'start' ? start : align === 'end' ? end : (start + end) / 2;\n/**\n * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`\n * @private\n */ const _textX = (align, left, right, rtl)=>{\n    const check = rtl ? 'left' : 'right';\n    return align === check ? right : align === 'center' ? (left + right) / 2 : left;\n};\n/**\n * Return start and count of visible points.\n * @private\n */ function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {\n    const pointCount = points.length;\n    let start = 0;\n    let count = pointCount;\n    if (meta._sorted) {\n        const { iScale , vScale , _parsed  } = meta;\n        const spanGaps = meta.dataset ? meta.dataset.options ? meta.dataset.options.spanGaps : null : null;\n        const axis = iScale.axis;\n        const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n        if (minDefined) {\n            start = Math.min(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, axis, min).lo, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo);\n            if (spanGaps) {\n                const distanceToDefinedLo = _parsed.slice(0, start + 1).reverse().findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                start -= Math.max(0, distanceToDefinedLo);\n            }\n            start = _limitValue(start, 0, pointCount - 1);\n        }\n        if (maxDefined) {\n            let end = Math.max(// @ts-expect-error Need to type _parsed\n            _lookupByKey(_parsed, iScale.axis, max, true).hi + 1, // @ts-expect-error Need to fix types on _lookupByKey\n            animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1);\n            if (spanGaps) {\n                const distanceToDefinedHi = _parsed.slice(end - 1).findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                end += Math.max(0, distanceToDefinedHi);\n            }\n            count = _limitValue(end, start, pointCount) - start;\n        } else {\n            count = pointCount - start;\n        }\n    }\n    return {\n        start,\n        count\n    };\n}\n/**\n * Checks if the scale ranges have changed.\n * @param {object} meta - dataset meta.\n * @returns {boolean}\n * @private\n */ function _scaleRangesChanged(meta) {\n    const { xScale , yScale , _scaleRanges  } = meta;\n    const newRanges = {\n        xmin: xScale.min,\n        xmax: xScale.max,\n        ymin: yScale.min,\n        ymax: yScale.max\n    };\n    if (!_scaleRanges) {\n        meta._scaleRanges = newRanges;\n        return true;\n    }\n    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;\n    Object.assign(_scaleRanges, newRanges);\n    return changed;\n}\n\nconst atEdge = (t)=>t === 0 || t === 1;\nconst elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));\nconst elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;\n/**\n * Easing functions adapted from Robert Penner's easing equations.\n * @namespace Chart.helpers.easing.effects\n * @see http://www.robertpenner.com/easing/\n */ const effects = {\n    linear: (t)=>t,\n    easeInQuad: (t)=>t * t,\n    easeOutQuad: (t)=>-t * (t - 2),\n    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),\n    easeInCubic: (t)=>t * t * t,\n    easeOutCubic: (t)=>(t -= 1) * t * t + 1,\n    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),\n    easeInQuart: (t)=>t * t * t * t,\n    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),\n    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),\n    easeInQuint: (t)=>t * t * t * t * t,\n    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,\n    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),\n    easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,\n    easeOutSine: (t)=>Math.sin(t * HALF_PI),\n    easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),\n    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),\n    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,\n    easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),\n    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),\n    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),\n    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),\n    easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),\n    easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),\n    easeInOutElastic (t) {\n        const s = 0.1125;\n        const p = 0.45;\n        return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);\n    },\n    easeInBack (t) {\n        const s = 1.70158;\n        return t * t * ((s + 1) * t - s);\n    },\n    easeOutBack (t) {\n        const s = 1.70158;\n        return (t -= 1) * t * ((s + 1) * t + s) + 1;\n    },\n    easeInOutBack (t) {\n        let s = 1.70158;\n        if ((t /= 0.5) < 1) {\n            return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));\n        }\n        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);\n    },\n    easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),\n    easeOutBounce (t) {\n        const m = 7.5625;\n        const d = 2.75;\n        if (t < 1 / d) {\n            return m * t * t;\n        }\n        if (t < 2 / d) {\n            return m * (t -= 1.5 / d) * t + 0.75;\n        }\n        if (t < 2.5 / d) {\n            return m * (t -= 2.25 / d) * t + 0.9375;\n        }\n        return m * (t -= 2.625 / d) * t + 0.984375;\n    },\n    easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5\n};\n\nfunction isPatternOrGradient(value) {\n    if (value && typeof value === 'object') {\n        const type = value.toString();\n        return type === '[object CanvasPattern]' || type === '[object CanvasGradient]';\n    }\n    return false;\n}\nfunction color(value) {\n    return isPatternOrGradient(value) ? value : new Color(value);\n}\nfunction getHoverColor(value) {\n    return isPatternOrGradient(value) ? value : new Color(value).saturate(0.5).darken(0.1).hexString();\n}\n\nconst numbers = [\n    'x',\n    'y',\n    'borderWidth',\n    'radius',\n    'tension'\n];\nconst colors = [\n    'color',\n    'borderColor',\n    'backgroundColor'\n];\nfunction applyAnimationsDefaults(defaults) {\n    defaults.set('animation', {\n        delay: undefined,\n        duration: 1000,\n        easing: 'easeOutQuart',\n        fn: undefined,\n        from: undefined,\n        loop: undefined,\n        to: undefined,\n        type: undefined\n    });\n    defaults.describe('animation', {\n        _fallback: false,\n        _indexable: false,\n        _scriptable: (name)=>name !== 'onProgress' && name !== 'onComplete' && name !== 'fn'\n    });\n    defaults.set('animations', {\n        colors: {\n            type: 'color',\n            properties: colors\n        },\n        numbers: {\n            type: 'number',\n            properties: numbers\n        }\n    });\n    defaults.describe('animations', {\n        _fallback: 'animation'\n    });\n    defaults.set('transitions', {\n        active: {\n            animation: {\n                duration: 400\n            }\n        },\n        resize: {\n            animation: {\n                duration: 0\n            }\n        },\n        show: {\n            animations: {\n                colors: {\n                    from: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    duration: 0\n                }\n            }\n        },\n        hide: {\n            animations: {\n                colors: {\n                    to: 'transparent'\n                },\n                visible: {\n                    type: 'boolean',\n                    easing: 'linear',\n                    fn: (v)=>v | 0\n                }\n            }\n        }\n    });\n}\n\nfunction applyLayoutsDefaults(defaults) {\n    defaults.set('layout', {\n        autoPadding: true,\n        padding: {\n            top: 0,\n            right: 0,\n            bottom: 0,\n            left: 0\n        }\n    });\n}\n\nconst intlCache = new Map();\nfunction getNumberFormat(locale, options) {\n    options = options || {};\n    const cacheKey = locale + JSON.stringify(options);\n    let formatter = intlCache.get(cacheKey);\n    if (!formatter) {\n        formatter = new Intl.NumberFormat(locale, options);\n        intlCache.set(cacheKey, formatter);\n    }\n    return formatter;\n}\nfunction formatNumber(num, locale, options) {\n    return getNumberFormat(locale, options).format(num);\n}\n\nconst formatters = {\n values (value) {\n        return isArray(value) ?  value : '' + value;\n    },\n numeric (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const locale = this.chart.options.locale;\n        let notation;\n        let delta = tickValue;\n        if (ticks.length > 1) {\n            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));\n            if (maxTick < 1e-4 || maxTick > 1e+15) {\n                notation = 'scientific';\n            }\n            delta = calculateDelta(tickValue, ticks);\n        }\n        const logDelta = log10(Math.abs(delta));\n        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);\n        const options = {\n            notation,\n            minimumFractionDigits: numDecimal,\n            maximumFractionDigits: numDecimal\n        };\n        Object.assign(options, this.options.ticks.format);\n        return formatNumber(tickValue, locale, options);\n    },\n logarithmic (tickValue, index, ticks) {\n        if (tickValue === 0) {\n            return '0';\n        }\n        const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));\n        if ([\n            1,\n            2,\n            3,\n            5,\n            10,\n            15\n        ].includes(remain) || index > 0.8 * ticks.length) {\n            return formatters.numeric.call(this, tickValue, index, ticks);\n        }\n        return '';\n    }\n};\nfunction calculateDelta(tickValue, ticks) {\n    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;\n    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) {\n        delta = tickValue - Math.floor(tickValue);\n    }\n    return delta;\n}\n var Ticks = {\n    formatters\n};\n\nfunction applyScaleDefaults(defaults) {\n    defaults.set('scale', {\n        display: true,\n        offset: false,\n        reverse: false,\n        beginAtZero: false,\n bounds: 'ticks',\n        clip: true,\n grace: 0,\n        grid: {\n            display: true,\n            lineWidth: 1,\n            drawOnChartArea: true,\n            drawTicks: true,\n            tickLength: 8,\n            tickWidth: (_ctx, options)=>options.lineWidth,\n            tickColor: (_ctx, options)=>options.color,\n            offset: false\n        },\n        border: {\n            display: true,\n            dash: [],\n            dashOffset: 0.0,\n            width: 1\n        },\n        title: {\n            display: false,\n            text: '',\n            padding: {\n                top: 4,\n                bottom: 4\n            }\n        },\n        ticks: {\n            minRotation: 0,\n            maxRotation: 50,\n            mirror: false,\n            textStrokeWidth: 0,\n            textStrokeColor: '',\n            padding: 3,\n            display: true,\n            autoSkip: true,\n            autoSkipPadding: 3,\n            labelOffset: 0,\n            callback: Ticks.formatters.values,\n            minor: {},\n            major: {},\n            align: 'center',\n            crossAlign: 'near',\n            showLabelBackdrop: false,\n            backdropColor: 'rgba(255, 255, 255, 0.75)',\n            backdropPadding: 2\n        }\n    });\n    defaults.route('scale.ticks', 'color', '', 'color');\n    defaults.route('scale.grid', 'color', '', 'borderColor');\n    defaults.route('scale.border', 'color', '', 'borderColor');\n    defaults.route('scale.title', 'color', '', 'color');\n    defaults.describe('scale', {\n        _fallback: false,\n        _scriptable: (name)=>!name.startsWith('before') && !name.startsWith('after') && name !== 'callback' && name !== 'parser',\n        _indexable: (name)=>name !== 'borderDash' && name !== 'tickBorderDash' && name !== 'dash'\n    });\n    defaults.describe('scales', {\n        _fallback: 'scale'\n    });\n    defaults.describe('scale.ticks', {\n        _scriptable: (name)=>name !== 'backdropPadding' && name !== 'callback',\n        _indexable: (name)=>name !== 'backdropPadding'\n    });\n}\n\nconst overrides = Object.create(null);\nconst descriptors = Object.create(null);\n function getScope$1(node, key) {\n    if (!key) {\n        return node;\n    }\n    const keys = key.split('.');\n    for(let i = 0, n = keys.length; i < n; ++i){\n        const k = keys[i];\n        node = node[k] || (node[k] = Object.create(null));\n    }\n    return node;\n}\nfunction set(root, scope, values) {\n    if (typeof scope === 'string') {\n        return merge(getScope$1(root, scope), values);\n    }\n    return merge(getScope$1(root, ''), scope);\n}\n class Defaults {\n    constructor(_descriptors, _appliers){\n        this.animation = undefined;\n        this.backgroundColor = 'rgba(0,0,0,0.1)';\n        this.borderColor = 'rgba(0,0,0,0.1)';\n        this.color = '#666';\n        this.datasets = {};\n        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();\n        this.elements = {};\n        this.events = [\n            'mousemove',\n            'mouseout',\n            'click',\n            'touchstart',\n            'touchmove'\n        ];\n        this.font = {\n            family: \"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif\",\n            size: 12,\n            style: 'normal',\n            lineHeight: 1.2,\n            weight: null\n        };\n        this.hover = {};\n        this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);\n        this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);\n        this.hoverColor = (ctx, options)=>getHoverColor(options.color);\n        this.indexAxis = 'x';\n        this.interaction = {\n            mode: 'nearest',\n            intersect: true,\n            includeInvisible: false\n        };\n        this.maintainAspectRatio = true;\n        this.onHover = null;\n        this.onClick = null;\n        this.parsing = true;\n        this.plugins = {};\n        this.responsive = true;\n        this.scale = undefined;\n        this.scales = {};\n        this.showLine = true;\n        this.drawActiveElementsOnTop = true;\n        this.describe(_descriptors);\n        this.apply(_appliers);\n    }\n set(scope, values) {\n        return set(this, scope, values);\n    }\n get(scope) {\n        return getScope$1(this, scope);\n    }\n describe(scope, values) {\n        return set(descriptors, scope, values);\n    }\n    override(scope, values) {\n        return set(overrides, scope, values);\n    }\n route(scope, name, targetScope, targetName) {\n        const scopeObject = getScope$1(this, scope);\n        const targetScopeObject = getScope$1(this, targetScope);\n        const privateName = '_' + name;\n        Object.defineProperties(scopeObject, {\n            [privateName]: {\n                value: scopeObject[name],\n                writable: true\n            },\n            [name]: {\n                enumerable: true,\n                get () {\n                    const local = this[privateName];\n                    const target = targetScopeObject[targetName];\n                    if (isObject(local)) {\n                        return Object.assign({}, target, local);\n                    }\n                    return valueOrDefault(local, target);\n                },\n                set (value) {\n                    this[privateName] = value;\n                }\n            }\n        });\n    }\n    apply(appliers) {\n        appliers.forEach((apply)=>apply(this));\n    }\n}\nvar defaults = /* #__PURE__ */ new Defaults({\n    _scriptable: (name)=>!name.startsWith('on'),\n    _indexable: (name)=>name !== 'events',\n    hover: {\n        _fallback: 'interaction'\n    },\n    interaction: {\n        _scriptable: false,\n        _indexable: false\n    }\n}, [\n    applyAnimationsDefaults,\n    applyLayoutsDefaults,\n    applyScaleDefaults\n]);\n\n/**\n * Converts the given font object into a CSS font string.\n * @param font - A font object.\n * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font\n * @private\n */ function toFontString(font) {\n    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) {\n        return null;\n    }\n    return (font.style ? font.style + ' ' : '') + (font.weight ? font.weight + ' ' : '') + font.size + 'px ' + font.family;\n}\n/**\n * @private\n */ function _measureText(ctx, data, gc, longest, string) {\n    let textWidth = data[string];\n    if (!textWidth) {\n        textWidth = data[string] = ctx.measureText(string).width;\n        gc.push(string);\n    }\n    if (textWidth > longest) {\n        longest = textWidth;\n    }\n    return longest;\n}\n/**\n * @private\n */ // eslint-disable-next-line complexity\nfunction _longestText(ctx, font, arrayOfThings, cache) {\n    cache = cache || {};\n    let data = cache.data = cache.data || {};\n    let gc = cache.garbageCollect = cache.garbageCollect || [];\n    if (cache.font !== font) {\n        data = cache.data = {};\n        gc = cache.garbageCollect = [];\n        cache.font = font;\n    }\n    ctx.save();\n    ctx.font = font;\n    let longest = 0;\n    const ilen = arrayOfThings.length;\n    let i, j, jlen, thing, nestedThing;\n    for(i = 0; i < ilen; i++){\n        thing = arrayOfThings[i];\n        // Undefined strings and arrays should not be measured\n        if (thing !== undefined && thing !== null && !isArray(thing)) {\n            longest = _measureText(ctx, data, gc, longest, thing);\n        } else if (isArray(thing)) {\n            // if it is an array lets measure each element\n            // to do maybe simplify this function a bit so we can do this more recursively?\n            for(j = 0, jlen = thing.length; j < jlen; j++){\n                nestedThing = thing[j];\n                // Undefined strings and arrays should not be measured\n                if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) {\n                    longest = _measureText(ctx, data, gc, longest, nestedThing);\n                }\n            }\n        }\n    }\n    ctx.restore();\n    const gcLen = gc.length / 2;\n    if (gcLen > arrayOfThings.length) {\n        for(i = 0; i < gcLen; i++){\n            delete data[gc[i]];\n        }\n        gc.splice(0, gcLen);\n    }\n    return longest;\n}\n/**\n * Returns the aligned pixel value to avoid anti-aliasing blur\n * @param chart - The chart instance.\n * @param pixel - A pixel value.\n * @param width - The width of the element.\n * @returns The aligned pixel value.\n * @private\n */ function _alignPixel(chart, pixel, width) {\n    const devicePixelRatio = chart.currentDevicePixelRatio;\n    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;\n    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;\n}\n/**\n * Clears the entire canvas.\n */ function clearCanvas(canvas, ctx) {\n    if (!ctx && !canvas) {\n        return;\n    }\n    ctx = ctx || canvas.getContext('2d');\n    ctx.save();\n    // canvas.width and canvas.height do not consider the canvas transform,\n    // while clearRect does\n    ctx.resetTransform();\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    ctx.restore();\n}\nfunction drawPoint(ctx, options, x, y) {\n    // eslint-disable-next-line @typescript-eslint/no-use-before-define\n    drawPointLegend(ctx, options, x, y, null);\n}\n// eslint-disable-next-line complexity\nfunction drawPointLegend(ctx, options, x, y, w) {\n    let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;\n    const style = options.pointStyle;\n    const rotation = options.rotation;\n    const radius = options.radius;\n    let rad = (rotation || 0) * RAD_PER_DEG;\n    if (style && typeof style === 'object') {\n        type = style.toString();\n        if (type === '[object HTMLImageElement]' || type === '[object HTMLCanvasElement]') {\n            ctx.save();\n            ctx.translate(x, y);\n            ctx.rotate(rad);\n            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);\n            ctx.restore();\n            return;\n        }\n    }\n    if (isNaN(radius) || radius <= 0) {\n        return;\n    }\n    ctx.beginPath();\n    switch(style){\n        // Default includes circle\n        default:\n            if (w) {\n                ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);\n            } else {\n                ctx.arc(x, y, radius, 0, TAU);\n            }\n            ctx.closePath();\n            break;\n        case 'triangle':\n            width = w ? w / 2 : radius;\n            ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            rad += TWO_THIRDS_PI;\n            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);\n            ctx.closePath();\n            break;\n        case 'rectRounded':\n            // NOTE: the rounded rect implementation changed to use `arc` instead of\n            // `quadraticCurveTo` since it generates better results when rect is\n            // almost a circle. 0.516 (instead of 0.5) produces results with visually\n            // closer proportion to the previous impl and it is inscribed in the\n            // circle with `radius`. For more details, see the following PRs:\n            // https://github.com/chartjs/Chart.js/issues/5597\n            // https://github.com/chartjs/Chart.js/issues/5858\n            cornerRadius = radius * 0.516;\n            size = radius - cornerRadius;\n            xOffset = Math.cos(rad + QUARTER_PI) * size;\n            xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            yOffset = Math.sin(rad + QUARTER_PI) * size;\n            yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);\n            ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);\n            ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);\n            ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);\n            ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);\n            ctx.closePath();\n            break;\n        case 'rect':\n            if (!rotation) {\n                size = Math.SQRT1_2 * radius;\n                width = w ? w / 2 : size;\n                ctx.rect(x - width, y - size, 2 * width, 2 * size);\n                break;\n            }\n            rad += QUARTER_PI;\n        /* falls through */ case 'rectRot':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            ctx.closePath();\n            break;\n        case 'crossRot':\n            rad += QUARTER_PI;\n        /* falls through */ case 'cross':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'star':\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            rad += QUARTER_PI;\n            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);\n            xOffset = Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);\n            ctx.moveTo(x - xOffsetW, y - yOffset);\n            ctx.lineTo(x + xOffsetW, y + yOffset);\n            ctx.moveTo(x + yOffsetW, y - xOffset);\n            ctx.lineTo(x - yOffsetW, y + xOffset);\n            break;\n        case 'line':\n            xOffset = w ? w / 2 : Math.cos(rad) * radius;\n            yOffset = Math.sin(rad) * radius;\n            ctx.moveTo(x - xOffset, y - yOffset);\n            ctx.lineTo(x + xOffset, y + yOffset);\n            break;\n        case 'dash':\n            ctx.moveTo(x, y);\n            ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);\n            break;\n        case false:\n            ctx.closePath();\n            break;\n    }\n    ctx.fill();\n    if (options.borderWidth > 0) {\n        ctx.stroke();\n    }\n}\n/**\n * Returns true if the point is inside the rectangle\n * @param point - The point to test\n * @param area - The rectangle\n * @param margin - allowed margin\n * @private\n */ function _isPointInArea(point, area, margin) {\n    margin = margin || 0.5; // margin - default is to match rounded decimals\n    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;\n}\nfunction clipArea(ctx, area) {\n    ctx.save();\n    ctx.beginPath();\n    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);\n    ctx.clip();\n}\nfunction unclipArea(ctx) {\n    ctx.restore();\n}\n/**\n * @private\n */ function _steppedLineTo(ctx, previous, target, flip, mode) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    if (mode === 'middle') {\n        const midpoint = (previous.x + target.x) / 2.0;\n        ctx.lineTo(midpoint, previous.y);\n        ctx.lineTo(midpoint, target.y);\n    } else if (mode === 'after' !== !!flip) {\n        ctx.lineTo(previous.x, target.y);\n    } else {\n        ctx.lineTo(target.x, previous.y);\n    }\n    ctx.lineTo(target.x, target.y);\n}\n/**\n * @private\n */ function _bezierCurveTo(ctx, previous, target, flip) {\n    if (!previous) {\n        return ctx.lineTo(target.x, target.y);\n    }\n    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);\n}\nfunction setRenderOpts(ctx, opts) {\n    if (opts.translation) {\n        ctx.translate(opts.translation[0], opts.translation[1]);\n    }\n    if (!isNullOrUndef(opts.rotation)) {\n        ctx.rotate(opts.rotation);\n    }\n    if (opts.color) {\n        ctx.fillStyle = opts.color;\n    }\n    if (opts.textAlign) {\n        ctx.textAlign = opts.textAlign;\n    }\n    if (opts.textBaseline) {\n        ctx.textBaseline = opts.textBaseline;\n    }\n}\nfunction decorateText(ctx, x, y, line, opts) {\n    if (opts.strikethrough || opts.underline) {\n        /**\n     * Now that IE11 support has been dropped, we can use more\n     * of the TextMetrics object. The actual bounding boxes\n     * are unflagged in Chrome, Firefox, Edge, and Safari so they\n     * can be safely used.\n     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility\n     */ const metrics = ctx.measureText(line);\n        const left = x - metrics.actualBoundingBoxLeft;\n        const right = x + metrics.actualBoundingBoxRight;\n        const top = y - metrics.actualBoundingBoxAscent;\n        const bottom = y + metrics.actualBoundingBoxDescent;\n        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;\n        ctx.strokeStyle = ctx.fillStyle;\n        ctx.beginPath();\n        ctx.lineWidth = opts.decorationWidth || 2;\n        ctx.moveTo(left, yDecoration);\n        ctx.lineTo(right, yDecoration);\n        ctx.stroke();\n    }\n}\nfunction drawBackdrop(ctx, opts) {\n    const oldColor = ctx.fillStyle;\n    ctx.fillStyle = opts.color;\n    ctx.fillRect(opts.left, opts.top, opts.width, opts.height);\n    ctx.fillStyle = oldColor;\n}\n/**\n * Render text onto the canvas\n */ function renderText(ctx, text, x, y, font, opts = {}) {\n    const lines = isArray(text) ? text : [\n        text\n    ];\n    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== '';\n    let i, line;\n    ctx.save();\n    ctx.font = font.string;\n    setRenderOpts(ctx, opts);\n    for(i = 0; i < lines.length; ++i){\n        line = lines[i];\n        if (opts.backdrop) {\n            drawBackdrop(ctx, opts.backdrop);\n        }\n        if (stroke) {\n            if (opts.strokeColor) {\n                ctx.strokeStyle = opts.strokeColor;\n            }\n            if (!isNullOrUndef(opts.strokeWidth)) {\n                ctx.lineWidth = opts.strokeWidth;\n            }\n            ctx.strokeText(line, x, y, opts.maxWidth);\n        }\n        ctx.fillText(line, x, y, opts.maxWidth);\n        decorateText(ctx, x, y, line, opts);\n        y += Number(font.lineHeight);\n    }\n    ctx.restore();\n}\n/**\n * Add a path of a rectangle with rounded corners to the current sub-path\n * @param ctx - Context\n * @param rect - Bounding rect\n */ function addRoundedRectPath(ctx, rect) {\n    const { x , y , w , h , radius  } = rect;\n    // top left arc\n    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);\n    // line from top left to bottom left\n    ctx.lineTo(x, y + h - radius.bottomLeft);\n    // bottom left arc\n    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);\n    // line from bottom left to bottom right\n    ctx.lineTo(x + w - radius.bottomRight, y + h);\n    // bottom right arc\n    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);\n    // line from bottom right to top right\n    ctx.lineTo(x + w, y + radius.topRight);\n    // top right arc\n    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);\n    // line from top right to top left\n    ctx.lineTo(x + radius.topLeft, y);\n}\n\nconst LINE_HEIGHT = /^(normal|(\\d+(?:\\.\\d+)?)(px|em|%)?)$/;\nconst FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;\n/**\n * @alias Chart.helpers.options\n * @namespace\n */ /**\n * Converts the given line height `value` in pixels for a specific font `size`.\n * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').\n * @param size - The font size (in pixels) used to resolve relative `value`.\n * @returns The effective line height in pixels (size * 1.2 if value is invalid).\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height\n * @since 2.7.0\n */ function toLineHeight(value, size) {\n    const matches = ('' + value).match(LINE_HEIGHT);\n    if (!matches || matches[1] === 'normal') {\n        return size * 1.2;\n    }\n    value = +matches[2];\n    switch(matches[3]){\n        case 'px':\n            return value;\n        case '%':\n            value /= 100;\n            break;\n    }\n    return size * value;\n}\nconst numberOrZero = (v)=>+v || 0;\nfunction _readValueToProps(value, props) {\n    const ret = {};\n    const objProps = isObject(props);\n    const keys = objProps ? Object.keys(props) : props;\n    const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;\n    for (const prop of keys){\n        ret[prop] = numberOrZero(read(prop));\n    }\n    return ret;\n}\n/**\n * Converts the given value into a TRBL object.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left)\n * @since 3.0.0\n */ function toTRBL(value) {\n    return _readValueToProps(value, {\n        top: 'y',\n        right: 'x',\n        bottom: 'y',\n        left: 'x'\n    });\n}\n/**\n * Converts the given value into a TRBL corners object (similar with css border-radius).\n * @param value - If a number, set the value to all TRBL corner components,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)\n * @since 3.0.0\n */ function toTRBLCorners(value) {\n    return _readValueToProps(value, [\n        'topLeft',\n        'topRight',\n        'bottomLeft',\n        'bottomRight'\n    ]);\n}\n/**\n * Converts the given value into a padding object with pre-computed width/height.\n * @param value - If a number, set the value to all TRBL component,\n *  else, if an object, use defined properties and sets undefined ones to 0.\n *  x / y are shorthands for same value for left/right and top/bottom.\n * @returns The padding values (top, right, bottom, left, width, height)\n * @since 2.7.0\n */ function toPadding(value) {\n    const obj = toTRBL(value);\n    obj.width = obj.left + obj.right;\n    obj.height = obj.top + obj.bottom;\n    return obj;\n}\n/**\n * Parses font options and returns the font object.\n * @param options - A object that contains font options to be parsed.\n * @param fallback - A object that contains fallback font options.\n * @return The font object.\n * @private\n */ function toFont(options, fallback) {\n    options = options || {};\n    fallback = fallback || defaults.font;\n    let size = valueOrDefault(options.size, fallback.size);\n    if (typeof size === 'string') {\n        size = parseInt(size, 10);\n    }\n    let style = valueOrDefault(options.style, fallback.style);\n    if (style && !('' + style).match(FONT_STYLE)) {\n        console.warn('Invalid font style specified: \"' + style + '\"');\n        style = undefined;\n    }\n    const font = {\n        family: valueOrDefault(options.family, fallback.family),\n        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),\n        size,\n        style,\n        weight: valueOrDefault(options.weight, fallback.weight),\n        string: ''\n    };\n    font.string = toFontString(font);\n    return font;\n}\n/**\n * Evaluates the given `inputs` sequentially and returns the first defined value.\n * @param inputs - An array of values, falling back to the last value.\n * @param context - If defined and the current value is a function, the value\n * is called with `context` as first argument and the result becomes the new input.\n * @param index - If defined and the current value is an array, the value\n * at `index` become the new input.\n * @param info - object to return information about resolution in\n * @param info.cacheable - Will be set to `false` if option is not cacheable.\n * @since 2.7.0\n */ function resolve(inputs, context, index, info) {\n    let cacheable = true;\n    let i, ilen, value;\n    for(i = 0, ilen = inputs.length; i < ilen; ++i){\n        value = inputs[i];\n        if (value === undefined) {\n            continue;\n        }\n        if (context !== undefined && typeof value === 'function') {\n            value = value(context);\n            cacheable = false;\n        }\n        if (index !== undefined && isArray(value)) {\n            value = value[index % value.length];\n            cacheable = false;\n        }\n        if (value !== undefined) {\n            if (info && !cacheable) {\n                info.cacheable = false;\n            }\n            return value;\n        }\n    }\n}\n/**\n * @param minmax\n * @param grace\n * @param beginAtZero\n * @private\n */ function _addGrace(minmax, grace, beginAtZero) {\n    const { min , max  } = minmax;\n    const change = toDimension(grace, (max - min) / 2);\n    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;\n    return {\n        min: keepZero(min, -Math.abs(change)),\n        max: keepZero(max, change)\n    };\n}\nfunction createContext(parentContext, context) {\n    return Object.assign(Object.create(parentContext), context);\n}\n\n/**\n * Creates a Proxy for resolving raw values for options.\n * @param scopes - The option scopes to look for values, in resolution order\n * @param prefixes - The prefixes for values, in resolution order.\n * @param rootScopes - The root option scopes\n * @param fallback - Parent scopes fallback\n * @param getTarget - callback for getting the target for changed values\n * @returns Proxy\n * @private\n */ function _createResolver(scopes, prefixes = [\n    ''\n], rootScopes, fallback, getTarget = ()=>scopes[0]) {\n    const finalRootScopes = rootScopes || scopes;\n    if (typeof fallback === 'undefined') {\n        fallback = _resolve('_fallback', scopes);\n    }\n    const cache = {\n        [Symbol.toStringTag]: 'Object',\n        _cacheable: true,\n        _scopes: scopes,\n        _rootScopes: finalRootScopes,\n        _fallback: fallback,\n        _getTarget: getTarget,\n        override: (scope)=>_createResolver([\n                scope,\n                ...scopes\n            ], prefixes, finalRootScopes, fallback)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete target._keys; // remove cached keys\n            delete scopes[0][prop]; // remove from top level scope\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop) {\n            return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(scopes[0]);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return getKeysFromAllScopes(target).includes(prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys (target) {\n            return getKeysFromAllScopes(target);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            const storage = target._storage || (target._storage = getTarget());\n            target[prop] = storage[prop] = value; // set to top level scope + cache\n            delete target._keys; // remove cached keys\n            return true;\n        }\n    });\n}\n/**\n * Returns an Proxy for resolving option values with context.\n * @param proxy - The Proxy returned by `_createResolver`\n * @param context - Context object for scriptable/indexable options\n * @param subProxy - The proxy provided for scriptable options\n * @param descriptorDefaults - Defaults for descriptors\n * @private\n */ function _attachContext(proxy, context, subProxy, descriptorDefaults) {\n    const cache = {\n        _cacheable: false,\n        _proxy: proxy,\n        _context: context,\n        _subProxy: subProxy,\n        _stack: new Set(),\n        _descriptors: _descriptors(proxy, descriptorDefaults),\n        setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),\n        override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)\n    };\n    return new Proxy(cache, {\n        /**\n     * A trap for the delete operator.\n     */ deleteProperty (target, prop) {\n            delete target[prop]; // remove from cache\n            delete proxy[prop]; // remove from proxy\n            return true;\n        },\n        /**\n     * A trap for getting property values.\n     */ get (target, prop, receiver) {\n            return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));\n        },\n        /**\n     * A trap for Object.getOwnPropertyDescriptor.\n     * Also used by Object.hasOwnProperty.\n     */ getOwnPropertyDescriptor (target, prop) {\n            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {\n                enumerable: true,\n                configurable: true\n            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);\n        },\n        /**\n     * A trap for Object.getPrototypeOf.\n     */ getPrototypeOf () {\n            return Reflect.getPrototypeOf(proxy);\n        },\n        /**\n     * A trap for the in operator.\n     */ has (target, prop) {\n            return Reflect.has(proxy, prop);\n        },\n        /**\n     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.\n     */ ownKeys () {\n            return Reflect.ownKeys(proxy);\n        },\n        /**\n     * A trap for setting property values.\n     */ set (target, prop, value) {\n            proxy[prop] = value; // set to proxy\n            delete target[prop]; // remove from cache\n            return true;\n        }\n    });\n}\n/**\n * @private\n */ function _descriptors(proxy, defaults = {\n    scriptable: true,\n    indexable: true\n}) {\n    const { _scriptable =defaults.scriptable , _indexable =defaults.indexable , _allKeys =defaults.allKeys  } = proxy;\n    return {\n        allKeys: _allKeys,\n        scriptable: _scriptable,\n        indexable: _indexable,\n        isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,\n        isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable\n    };\n}\nconst readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;\nconst needsSubResolver = (prop, value)=>isObject(value) && prop !== 'adapters' && (Object.getPrototypeOf(value) === null || value.constructor === Object);\nfunction _cached(target, prop, resolve) {\n    if (Object.prototype.hasOwnProperty.call(target, prop) || prop === 'constructor') {\n        return target[prop];\n    }\n    const value = resolve();\n    // cache the resolved value\n    target[prop] = value;\n    return value;\n}\nfunction _resolveWithContext(target, prop, receiver) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    let value = _proxy[prop]; // resolve from proxy\n    // resolve with context\n    if (isFunction(value) && descriptors.isScriptable(prop)) {\n        value = _resolveScriptable(prop, value, target, receiver);\n    }\n    if (isArray(value) && value.length) {\n        value = _resolveArray(prop, value, target, descriptors.isIndexable);\n    }\n    if (needsSubResolver(prop, value)) {\n        // if the resolved value is an object, create a sub resolver for it\n        value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);\n    }\n    return value;\n}\nfunction _resolveScriptable(prop, getValue, target, receiver) {\n    const { _proxy , _context , _subProxy , _stack  } = target;\n    if (_stack.has(prop)) {\n        throw new Error('Recursion detected: ' + Array.from(_stack).join('->') + '->' + prop);\n    }\n    _stack.add(prop);\n    let value = getValue(_context, _subProxy || receiver);\n    _stack.delete(prop);\n    if (needsSubResolver(prop, value)) {\n        // When scriptable option returns an object, create a resolver on that.\n        value = createSubResolver(_proxy._scopes, _proxy, prop, value);\n    }\n    return value;\n}\nfunction _resolveArray(prop, value, target, isIndexable) {\n    const { _proxy , _context , _subProxy , _descriptors: descriptors  } = target;\n    if (typeof _context.index !== 'undefined' && isIndexable(prop)) {\n        return value[_context.index % value.length];\n    } else if (isObject(value[0])) {\n        // Array of objects, return array or resolvers\n        const arr = value;\n        const scopes = _proxy._scopes.filter((s)=>s !== arr);\n        value = [];\n        for (const item of arr){\n            const resolver = createSubResolver(scopes, _proxy, prop, item);\n            value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));\n        }\n    }\n    return value;\n}\nfunction resolveFallback(fallback, prop, value) {\n    return isFunction(fallback) ? fallback(prop, value) : fallback;\n}\nconst getScope = (key, parent)=>key === true ? parent : typeof key === 'string' ? resolveObjectKey(parent, key) : undefined;\nfunction addScopes(set, parentScopes, key, parentFallback, value) {\n    for (const parent of parentScopes){\n        const scope = getScope(key, parent);\n        if (scope) {\n            set.add(scope);\n            const fallback = resolveFallback(scope._fallback, key, value);\n            if (typeof fallback !== 'undefined' && fallback !== key && fallback !== parentFallback) {\n                // When we reach the descriptor that defines a new _fallback, return that.\n                // The fallback will resume to that new scope.\n                return fallback;\n            }\n        } else if (scope === false && typeof parentFallback !== 'undefined' && key !== parentFallback) {\n            // Fallback to `false` results to `false`, when falling back to different key.\n            // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`\n            return null;\n        }\n    }\n    return false;\n}\nfunction createSubResolver(parentScopes, resolver, prop, value) {\n    const rootScopes = resolver._rootScopes;\n    const fallback = resolveFallback(resolver._fallback, prop, value);\n    const allScopes = [\n        ...parentScopes,\n        ...rootScopes\n    ];\n    const set = new Set();\n    set.add(value);\n    let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);\n    if (key === null) {\n        return false;\n    }\n    if (typeof fallback !== 'undefined' && fallback !== prop) {\n        key = addScopesFromKey(set, allScopes, fallback, key, value);\n        if (key === null) {\n            return false;\n        }\n    }\n    return _createResolver(Array.from(set), [\n        ''\n    ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));\n}\nfunction addScopesFromKey(set, allScopes, key, fallback, item) {\n    while(key){\n        key = addScopes(set, allScopes, key, fallback, item);\n    }\n    return key;\n}\nfunction subGetTarget(resolver, prop, value) {\n    const parent = resolver._getTarget();\n    if (!(prop in parent)) {\n        parent[prop] = {};\n    }\n    const target = parent[prop];\n    if (isArray(target) && isObject(value)) {\n        // For array of objects, the object is used to store updated values\n        return value;\n    }\n    return target || {};\n}\nfunction _resolveWithPrefixes(prop, prefixes, scopes, proxy) {\n    let value;\n    for (const prefix of prefixes){\n        value = _resolve(readKey(prefix, prop), scopes);\n        if (typeof value !== 'undefined') {\n            return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;\n        }\n    }\n}\nfunction _resolve(key, scopes) {\n    for (const scope of scopes){\n        if (!scope) {\n            continue;\n        }\n        const value = scope[key];\n        if (typeof value !== 'undefined') {\n            return value;\n        }\n    }\n}\nfunction getKeysFromAllScopes(target) {\n    let keys = target._keys;\n    if (!keys) {\n        keys = target._keys = resolveKeysFromAllScopes(target._scopes);\n    }\n    return keys;\n}\nfunction resolveKeysFromAllScopes(scopes) {\n    const set = new Set();\n    for (const scope of scopes){\n        for (const key of Object.keys(scope).filter((k)=>!k.startsWith('_'))){\n            set.add(key);\n        }\n    }\n    return Array.from(set);\n}\nfunction _parseObjectDataRadialScale(meta, data, start, count) {\n    const { iScale  } = meta;\n    const { key ='r'  } = this._parsing;\n    const parsed = new Array(count);\n    let i, ilen, index, item;\n    for(i = 0, ilen = count; i < ilen; ++i){\n        index = i + start;\n        item = data[index];\n        parsed[i] = {\n            r: iScale.parse(resolveObjectKey(item, key), index)\n        };\n    }\n    return parsed;\n}\n\nconst EPSILON = Number.EPSILON || 1e-14;\nconst getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];\nconst getValueAxis = (indexAxis)=>indexAxis === 'x' ? 'y' : 'x';\nfunction splineCurve(firstPoint, middlePoint, afterPoint, t) {\n    // Props to Rob Spencer at scaled innovation for his post on splining between points\n    // http://scaledinnovation.com/analytics/splines/aboutSplines.html\n    // This function must also respect \"skipped\" points\n    const previous = firstPoint.skip ? middlePoint : firstPoint;\n    const current = middlePoint;\n    const next = afterPoint.skip ? middlePoint : afterPoint;\n    const d01 = distanceBetweenPoints(current, previous);\n    const d12 = distanceBetweenPoints(next, current);\n    let s01 = d01 / (d01 + d12);\n    let s12 = d12 / (d01 + d12);\n    // If all points are the same, s01 & s02 will be inf\n    s01 = isNaN(s01) ? 0 : s01;\n    s12 = isNaN(s12) ? 0 : s12;\n    const fa = t * s01; // scaling factor for triangle Ta\n    const fb = t * s12;\n    return {\n        previous: {\n            x: current.x - fa * (next.x - previous.x),\n            y: current.y - fa * (next.y - previous.y)\n        },\n        next: {\n            x: current.x + fb * (next.x - previous.x),\n            y: current.y + fb * (next.y - previous.y)\n        }\n    };\n}\n/**\n * Adjust tangents to ensure monotonic properties\n */ function monotoneAdjust(points, deltaK, mK) {\n    const pointsLen = points.length;\n    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen - 1; ++i){\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent || !pointAfter) {\n            continue;\n        }\n        if (almostEquals(deltaK[i], 0, EPSILON)) {\n            mK[i] = mK[i + 1] = 0;\n            continue;\n        }\n        alphaK = mK[i] / deltaK[i];\n        betaK = mK[i + 1] / deltaK[i];\n        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);\n        if (squaredMagnitude <= 9) {\n            continue;\n        }\n        tauK = 3 / Math.sqrt(squaredMagnitude);\n        mK[i] = alphaK * tauK * deltaK[i];\n        mK[i + 1] = betaK * tauK * deltaK[i];\n    }\n}\nfunction monotoneCompute(points, mK, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    let delta, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(let i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        const iPixel = pointCurrent[indexAxis];\n        const vPixel = pointCurrent[valueAxis];\n        if (pointBefore) {\n            delta = (iPixel - pointBefore[indexAxis]) / 3;\n            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;\n            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];\n        }\n        if (pointAfter) {\n            delta = (pointAfter[indexAxis] - iPixel) / 3;\n            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;\n            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];\n        }\n    }\n}\n/**\n * This function calculates Bézier control points in a similar way than |splineCurve|,\n * but preserves monotonicity of the provided data and ensures no local extremums are added\n * between the dataset discrete points due to the interpolation.\n * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation\n */ function splineCurveMonotone(points, indexAxis = 'x') {\n    const valueAxis = getValueAxis(indexAxis);\n    const pointsLen = points.length;\n    const deltaK = Array(pointsLen).fill(0);\n    const mK = Array(pointsLen);\n    // Calculate slopes (deltaK) and initialize tangents (mK)\n    let i, pointBefore, pointCurrent;\n    let pointAfter = getPoint(points, 0);\n    for(i = 0; i < pointsLen; ++i){\n        pointBefore = pointCurrent;\n        pointCurrent = pointAfter;\n        pointAfter = getPoint(points, i + 1);\n        if (!pointCurrent) {\n            continue;\n        }\n        if (pointAfter) {\n            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];\n            // In the case of two points that appear at the same x pixel, slopeDeltaX is 0\n            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;\n        }\n        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;\n    }\n    monotoneAdjust(points, deltaK, mK);\n    monotoneCompute(points, mK, indexAxis);\n}\nfunction capControlPoint(pt, min, max) {\n    return Math.max(Math.min(pt, max), min);\n}\nfunction capBezierPoints(points, area) {\n    let i, ilen, point, inArea, inAreaPrev;\n    let inAreaNext = _isPointInArea(points[0], area);\n    for(i = 0, ilen = points.length; i < ilen; ++i){\n        inAreaPrev = inArea;\n        inArea = inAreaNext;\n        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);\n        if (!inArea) {\n            continue;\n        }\n        point = points[i];\n        if (inAreaPrev) {\n            point.cp1x = capControlPoint(point.cp1x, area.left, area.right);\n            point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);\n        }\n        if (inAreaNext) {\n            point.cp2x = capControlPoint(point.cp2x, area.left, area.right);\n            point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);\n        }\n    }\n}\n/**\n * @private\n */ function _updateBezierControlPoints(points, options, area, loop, indexAxis) {\n    let i, ilen, point, controlPoints;\n    // Only consider points that are drawn in case the spanGaps option is used\n    if (options.spanGaps) {\n        points = points.filter((pt)=>!pt.skip);\n    }\n    if (options.cubicInterpolationMode === 'monotone') {\n        splineCurveMonotone(points, indexAxis);\n    } else {\n        let prev = loop ? points[points.length - 1] : points[0];\n        for(i = 0, ilen = points.length; i < ilen; ++i){\n            point = points[i];\n            controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);\n            point.cp1x = controlPoints.previous.x;\n            point.cp1y = controlPoints.previous.y;\n            point.cp2x = controlPoints.next.x;\n            point.cp2y = controlPoints.next.y;\n            prev = point;\n        }\n    }\n    if (options.capBezierPoints) {\n        capBezierPoints(points, area);\n    }\n}\n\n/**\n * @private\n */ function _isDomSupported() {\n    return typeof window !== 'undefined' && typeof document !== 'undefined';\n}\n/**\n * @private\n */ function _getParentNode(domNode) {\n    let parent = domNode.parentNode;\n    if (parent && parent.toString() === '[object ShadowRoot]') {\n        parent = parent.host;\n    }\n    return parent;\n}\n/**\n * convert max-width/max-height values that may be percentages into a number\n * @private\n */ function parseMaxStyle(styleValue, node, parentProperty) {\n    let valueInPixels;\n    if (typeof styleValue === 'string') {\n        valueInPixels = parseInt(styleValue, 10);\n        if (styleValue.indexOf('%') !== -1) {\n            // percentage * size in dimension\n            valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];\n        }\n    } else {\n        valueInPixels = styleValue;\n    }\n    return valueInPixels;\n}\nconst getComputedStyle = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);\nfunction getStyle(el, property) {\n    return getComputedStyle(el).getPropertyValue(property);\n}\nconst positions = [\n    'top',\n    'right',\n    'bottom',\n    'left'\n];\nfunction getPositionedStyle(styles, style, suffix) {\n    const result = {};\n    suffix = suffix ? '-' + suffix : '';\n    for(let i = 0; i < 4; i++){\n        const pos = positions[i];\n        result[pos] = parseFloat(styles[style + '-' + pos + suffix]) || 0;\n    }\n    result.width = result.left + result.right;\n    result.height = result.top + result.bottom;\n    return result;\n}\nconst useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);\n/**\n * @param e\n * @param canvas\n * @returns Canvas position\n */ function getCanvasPosition(e, canvas) {\n    const touches = e.touches;\n    const source = touches && touches.length ? touches[0] : e;\n    const { offsetX , offsetY  } = source;\n    let box = false;\n    let x, y;\n    if (useOffsetPos(offsetX, offsetY, e.target)) {\n        x = offsetX;\n        y = offsetY;\n    } else {\n        const rect = canvas.getBoundingClientRect();\n        x = source.clientX - rect.left;\n        y = source.clientY - rect.top;\n        box = true;\n    }\n    return {\n        x,\n        y,\n        box\n    };\n}\n/**\n * Gets an event's x, y coordinates, relative to the chart area\n * @param event\n * @param chart\n * @returns x and y coordinates of the event\n */ function getRelativePosition(event, chart) {\n    if ('native' in event) {\n        return event;\n    }\n    const { canvas , currentDevicePixelRatio  } = chart;\n    const style = getComputedStyle(canvas);\n    const borderBox = style.boxSizing === 'border-box';\n    const paddings = getPositionedStyle(style, 'padding');\n    const borders = getPositionedStyle(style, 'border', 'width');\n    const { x , y , box  } = getCanvasPosition(event, canvas);\n    const xOffset = paddings.left + (box && borders.left);\n    const yOffset = paddings.top + (box && borders.top);\n    let { width , height  } = chart;\n    if (borderBox) {\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    return {\n        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),\n        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)\n    };\n}\nfunction getContainerSize(canvas, width, height) {\n    let maxWidth, maxHeight;\n    if (width === undefined || height === undefined) {\n        const container = canvas && _getParentNode(canvas);\n        if (!container) {\n            width = canvas.clientWidth;\n            height = canvas.clientHeight;\n        } else {\n            const rect = container.getBoundingClientRect(); // this is the border box of the container\n            const containerStyle = getComputedStyle(container);\n            const containerBorder = getPositionedStyle(containerStyle, 'border', 'width');\n            const containerPadding = getPositionedStyle(containerStyle, 'padding');\n            width = rect.width - containerPadding.width - containerBorder.width;\n            height = rect.height - containerPadding.height - containerBorder.height;\n            maxWidth = parseMaxStyle(containerStyle.maxWidth, container, 'clientWidth');\n            maxHeight = parseMaxStyle(containerStyle.maxHeight, container, 'clientHeight');\n        }\n    }\n    return {\n        width,\n        height,\n        maxWidth: maxWidth || INFINITY,\n        maxHeight: maxHeight || INFINITY\n    };\n}\nconst round1 = (v)=>Math.round(v * 10) / 10;\n// eslint-disable-next-line complexity\nfunction getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {\n    const style = getComputedStyle(canvas);\n    const margins = getPositionedStyle(style, 'margin');\n    const maxWidth = parseMaxStyle(style.maxWidth, canvas, 'clientWidth') || INFINITY;\n    const maxHeight = parseMaxStyle(style.maxHeight, canvas, 'clientHeight') || INFINITY;\n    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);\n    let { width , height  } = containerSize;\n    if (style.boxSizing === 'content-box') {\n        const borders = getPositionedStyle(style, 'border', 'width');\n        const paddings = getPositionedStyle(style, 'padding');\n        width -= paddings.width + borders.width;\n        height -= paddings.height + borders.height;\n    }\n    width = Math.max(0, width - margins.width);\n    height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);\n    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));\n    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));\n    if (width && !height) {\n        // https://github.com/chartjs/Chart.js/issues/4659\n        // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)\n        height = round1(width / 2);\n    }\n    const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;\n    if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {\n        height = containerSize.height;\n        width = round1(Math.floor(height * aspectRatio));\n    }\n    return {\n        width,\n        height\n    };\n}\n/**\n * @param chart\n * @param forceRatio\n * @param forceStyle\n * @returns True if the canvas context size or transformation has changed.\n */ function retinaScale(chart, forceRatio, forceStyle) {\n    const pixelRatio = forceRatio || 1;\n    const deviceHeight = Math.floor(chart.height * pixelRatio);\n    const deviceWidth = Math.floor(chart.width * pixelRatio);\n    chart.height = Math.floor(chart.height);\n    chart.width = Math.floor(chart.width);\n    const canvas = chart.canvas;\n    // If no style has been set on the canvas, the render size is used as display size,\n    // making the chart visually bigger, so let's enforce it to the \"correct\" values.\n    // See https://github.com/chartjs/Chart.js/issues/3575\n    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {\n        canvas.style.height = `${chart.height}px`;\n        canvas.style.width = `${chart.width}px`;\n    }\n    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {\n        chart.currentDevicePixelRatio = pixelRatio;\n        canvas.height = deviceHeight;\n        canvas.width = deviceWidth;\n        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n        return true;\n    }\n    return false;\n}\n/**\n * Detects support for options object argument in addEventListener.\n * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support\n * @private\n */ const supportsEventListenerOptions = function() {\n    let passiveSupported = false;\n    try {\n        const options = {\n            get passive () {\n                passiveSupported = true;\n                return false;\n            }\n        };\n        if (_isDomSupported()) {\n            window.addEventListener('test', null, options);\n            window.removeEventListener('test', null, options);\n        }\n    } catch (e) {\n    // continue regardless of error\n    }\n    return passiveSupported;\n}();\n/**\n * The \"used\" size is the final value of a dimension property after all calculations have\n * been performed. This method uses the computed style of `element` but returns undefined\n * if the computed style is not expressed in pixels. That can happen in some cases where\n * `element` has a size relative to its parent and this last one is not yet displayed,\n * for example because of `display: none` on a parent node.\n * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value\n * @returns Size in pixels or undefined if unknown.\n */ function readUsedSize(element, property) {\n    const value = getStyle(element, property);\n    const matches = value && value.match(/^(\\d+)(\\.\\d+)?px$/);\n    return matches ? +matches[1] : undefined;\n}\n\n/**\n * @private\n */ function _pointInLine(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: p1.y + t * (p2.y - p1.y)\n    };\n}\n/**\n * @private\n */ function _steppedInterpolation(p1, p2, t, mode) {\n    return {\n        x: p1.x + t * (p2.x - p1.x),\n        y: mode === 'middle' ? t < 0.5 ? p1.y : p2.y : mode === 'after' ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y\n    };\n}\n/**\n * @private\n */ function _bezierInterpolation(p1, p2, t, mode) {\n    const cp1 = {\n        x: p1.cp2x,\n        y: p1.cp2y\n    };\n    const cp2 = {\n        x: p2.cp1x,\n        y: p2.cp1y\n    };\n    const a = _pointInLine(p1, cp1, t);\n    const b = _pointInLine(cp1, cp2, t);\n    const c = _pointInLine(cp2, p2, t);\n    const d = _pointInLine(a, b, t);\n    const e = _pointInLine(b, c, t);\n    return _pointInLine(d, e, t);\n}\n\nconst getRightToLeftAdapter = function(rectX, width) {\n    return {\n        x (x) {\n            return rectX + rectX + width - x;\n        },\n        setWidth (w) {\n            width = w;\n        },\n        textAlign (align) {\n            if (align === 'center') {\n                return align;\n            }\n            return align === 'right' ? 'left' : 'right';\n        },\n        xPlus (x, value) {\n            return x - value;\n        },\n        leftForLtr (x, itemWidth) {\n            return x - itemWidth;\n        }\n    };\n};\nconst getLeftToRightAdapter = function() {\n    return {\n        x (x) {\n            return x;\n        },\n        setWidth (w) {},\n        textAlign (align) {\n            return align;\n        },\n        xPlus (x, value) {\n            return x + value;\n        },\n        leftForLtr (x, _itemWidth) {\n            return x;\n        }\n    };\n};\nfunction getRtlAdapter(rtl, rectX, width) {\n    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();\n}\nfunction overrideTextDirection(ctx, direction) {\n    let style, original;\n    if (direction === 'ltr' || direction === 'rtl') {\n        style = ctx.canvas.style;\n        original = [\n            style.getPropertyValue('direction'),\n            style.getPropertyPriority('direction')\n        ];\n        style.setProperty('direction', direction, 'important');\n        ctx.prevTextDirection = original;\n    }\n}\nfunction restoreTextDirection(ctx, original) {\n    if (original !== undefined) {\n        delete ctx.prevTextDirection;\n        ctx.canvas.style.setProperty('direction', original[0], original[1]);\n    }\n}\n\nfunction propertyFn(property) {\n    if (property === 'angle') {\n        return {\n            between: _angleBetween,\n            compare: _angleDiff,\n            normalize: _normalizeAngle\n        };\n    }\n    return {\n        between: _isBetween,\n        compare: (a, b)=>a - b,\n        normalize: (x)=>x\n    };\n}\nfunction normalizeSegment({ start , end , count , loop , style  }) {\n    return {\n        start: start % count,\n        end: end % count,\n        loop: loop && (end - start + 1) % count === 0,\n        style\n    };\n}\nfunction getSegment(segment, points, bounds) {\n    const { property , start: startBound , end: endBound  } = bounds;\n    const { between , normalize  } = propertyFn(property);\n    const count = points.length;\n    let { start , end , loop  } = segment;\n    let i, ilen;\n    if (loop) {\n        start += count;\n        end += count;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            if (!between(normalize(points[start % count][property]), startBound, endBound)) {\n                break;\n            }\n            start--;\n            end--;\n        }\n        start %= count;\n        end %= count;\n    }\n    if (end < start) {\n        end += count;\n    }\n    return {\n        start,\n        end,\n        loop,\n        style: segment.style\n    };\n}\n function _boundSegment(segment, points, bounds) {\n    if (!bounds) {\n        return [\n            segment\n        ];\n    }\n    const { property , start: startBound , end: endBound  } = bounds;\n    const count = points.length;\n    const { compare , between , normalize  } = propertyFn(property);\n    const { start , end , loop , style  } = getSegment(segment, points, bounds);\n    const result = [];\n    let inside = false;\n    let subStart = null;\n    let value, point, prevValue;\n    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;\n    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);\n    const shouldStart = ()=>inside || startIsBefore();\n    const shouldStop = ()=>!inside || endIsBefore();\n    for(let i = start, prev = start; i <= end; ++i){\n        point = points[i % count];\n        if (point.skip) {\n            continue;\n        }\n        value = normalize(point[property]);\n        if (value === prevValue) {\n            continue;\n        }\n        inside = between(value, startBound, endBound);\n        if (subStart === null && shouldStart()) {\n            subStart = compare(value, startBound) === 0 ? i : prev;\n        }\n        if (subStart !== null && shouldStop()) {\n            result.push(normalizeSegment({\n                start: subStart,\n                end: i,\n                loop,\n                count,\n                style\n            }));\n            subStart = null;\n        }\n        prev = i;\n        prevValue = value;\n    }\n    if (subStart !== null) {\n        result.push(normalizeSegment({\n            start: subStart,\n            end,\n            loop,\n            count,\n            style\n        }));\n    }\n    return result;\n}\n function _boundSegments(line, bounds) {\n    const result = [];\n    const segments = line.segments;\n    for(let i = 0; i < segments.length; i++){\n        const sub = _boundSegment(segments[i], line.points, bounds);\n        if (sub.length) {\n            result.push(...sub);\n        }\n    }\n    return result;\n}\n function findStartAndEnd(points, count, loop, spanGaps) {\n    let start = 0;\n    let end = count - 1;\n    if (loop && !spanGaps) {\n        while(start < count && !points[start].skip){\n            start++;\n        }\n    }\n    while(start < count && points[start].skip){\n        start++;\n    }\n    start %= count;\n    if (loop) {\n        end += start;\n    }\n    while(end > start && points[end % count].skip){\n        end--;\n    }\n    end %= count;\n    return {\n        start,\n        end\n    };\n}\n function solidSegments(points, start, max, loop) {\n    const count = points.length;\n    const result = [];\n    let last = start;\n    let prev = points[start];\n    let end;\n    for(end = start + 1; end <= max; ++end){\n        const cur = points[end % count];\n        if (cur.skip || cur.stop) {\n            if (!prev.skip) {\n                loop = false;\n                result.push({\n                    start: start % count,\n                    end: (end - 1) % count,\n                    loop\n                });\n                start = last = cur.stop ? end : null;\n            }\n        } else {\n            last = end;\n            if (prev.skip) {\n                start = end;\n            }\n        }\n        prev = cur;\n    }\n    if (last !== null) {\n        result.push({\n            start: start % count,\n            end: last % count,\n            loop\n        });\n    }\n    return result;\n}\n function _computeSegments(line, segmentOptions) {\n    const points = line.points;\n    const spanGaps = line.options.spanGaps;\n    const count = points.length;\n    if (!count) {\n        return [];\n    }\n    const loop = !!line._loop;\n    const { start , end  } = findStartAndEnd(points, count, loop, spanGaps);\n    if (spanGaps === true) {\n        return splitByStyles(line, [\n            {\n                start,\n                end,\n                loop\n            }\n        ], points, segmentOptions);\n    }\n    const max = end < start ? end + count : end;\n    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;\n    return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);\n}\n function splitByStyles(line, segments, points, segmentOptions) {\n    if (!segmentOptions || !segmentOptions.setContext || !points) {\n        return segments;\n    }\n    return doSplitByStyles(line, segments, points, segmentOptions);\n}\n function doSplitByStyles(line, segments, points, segmentOptions) {\n    const chartContext = line._chart.getContext();\n    const baseStyle = readStyle(line.options);\n    const { _datasetIndex: datasetIndex , options: { spanGaps  }  } = line;\n    const count = points.length;\n    const result = [];\n    let prevStyle = baseStyle;\n    let start = segments[0].start;\n    let i = start;\n    function addStyle(s, e, l, st) {\n        const dir = spanGaps ? -1 : 1;\n        if (s === e) {\n            return;\n        }\n        s += count;\n        while(points[s % count].skip){\n            s -= dir;\n        }\n        while(points[e % count].skip){\n            e += dir;\n        }\n        if (s % count !== e % count) {\n            result.push({\n                start: s % count,\n                end: e % count,\n                loop: l,\n                style: st\n            });\n            prevStyle = st;\n            start = e % count;\n        }\n    }\n    for (const segment of segments){\n        start = spanGaps ? start : segment.start;\n        let prev = points[start % count];\n        let style;\n        for(i = start + 1; i <= segment.end; i++){\n            const pt = points[i % count];\n            style = readStyle(segmentOptions.setContext(createContext(chartContext, {\n                type: 'segment',\n                p0: prev,\n                p1: pt,\n                p0DataIndex: (i - 1) % count,\n                p1DataIndex: i % count,\n                datasetIndex\n            })));\n            if (styleChanged(style, prevStyle)) {\n                addStyle(start, i - 1, segment.loop, prevStyle);\n            }\n            prev = pt;\n            prevStyle = style;\n        }\n        if (start < i - 1) {\n            addStyle(start, i - 1, segment.loop, prevStyle);\n        }\n    }\n    return result;\n}\nfunction readStyle(options) {\n    return {\n        backgroundColor: options.backgroundColor,\n        borderCapStyle: options.borderCapStyle,\n        borderDash: options.borderDash,\n        borderDashOffset: options.borderDashOffset,\n        borderJoinStyle: options.borderJoinStyle,\n        borderWidth: options.borderWidth,\n        borderColor: options.borderColor\n    };\n}\nfunction styleChanged(style, prevStyle) {\n    if (!prevStyle) {\n        return false;\n    }\n    const cache = [];\n    const replacer = function(key, value) {\n        if (!isPatternOrGradient(value)) {\n            return value;\n        }\n        if (!cache.includes(value)) {\n            cache.push(value);\n        }\n        return cache.indexOf(value);\n    };\n    return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);\n}\n\nexport { unclipArea as $, _rlookupByKey as A, _lookupByKey as B, _isPointInArea as C, getAngleFromPoint as D, toPadding as E, each as F, getMaximumSize as G, HALF_PI as H, _getParentNode as I, readUsedSize as J, supportsEventListenerOptions as K, throttled as L, _isDomSupported as M, _factorize as N, finiteOrDefault as O, PI as P, callback as Q, _addGrace as R, _limitValue as S, TAU as T, toDegrees as U, _measureText as V, _int16Range as W, _alignPixel as X, clipArea as Y, renderText as Z, _arrayUnique as _, resolve as a, fontString as a$, toFont as a0, _toLeftRightCenter as a1, _alignStartEnd as a2, overrides as a3, merge as a4, _capitalize as a5, descriptors as a6, isFunction as a7, _attachContext as a8, _createResolver as a9, overrideTextDirection as aA, _textX as aB, restoreTextDirection as aC, drawPointLegend as aD, distanceBetweenPoints as aE, noop as aF, _setMinAndMaxByKey as aG, niceNum as aH, almostWhole as aI, almostEquals as aJ, _decimalPlaces as aK, Ticks as aL, log10 as aM, _longestText as aN, _filterBetween as aO, _lookup as aP, isPatternOrGradient as aQ, getHoverColor as aR, clone as aS, _merger as aT, _mergerIf as aU, _deprecated as aV, _splitKey as aW, toFontString as aX, splineCurve as aY, splineCurveMonotone as aZ, getStyle as a_, _descriptors as aa, mergeIf as ab, uid as ac, debounce as ad, retinaScale as ae, clearCanvas as af, setsEqual as ag, _elementsEqual as ah, _isClickEvent as ai, _isBetween as aj, _readValueToProps as ak, _updateBezierControlPoints as al, _computeSegments as am, _boundSegments as an, _steppedInterpolation as ao, _bezierInterpolation as ap, _pointInLine as aq, _steppedLineTo as ar, _bezierCurveTo as as, drawPoint as at, addRoundedRectPath as au, toTRBL as av, toTRBLCorners as aw, _boundSegment as ax, _normalizeAngle as ay, getRtlAdapter as az, isArray as b, toLineHeight as b0, PITAU as b1, INFINITY as b2, RAD_PER_DEG as b3, QUARTER_PI as b4, TWO_THIRDS_PI as b5, _angleDiff as b6, color as c, defaults as d, effects as e, resolveObjectKey as f, isNumberFinite as g, defined as h, isObject as i, createContext as j, isNullOrUndef as k, listenArrayEvents as l, toPercentage as m, toDimension as n, formatNumber as o, _angleBetween as p, _getStartAndCountOfVisiblePoints as q, requestAnimFrame as r, sign as s, toRadians as t, unlistenArrayEvents as u, valueOrDefault as v, _scaleRangesChanged as w, isNumber as x, _parseObjectDataRadialScale as y, getRelativePosition as z };\n//# sourceMappingURL=helpers.segment.js.map\n","/*!\n * Chart.js v4.4.8\n * https://www.chartjs.org\n * (c) 2025 Chart.js Contributors\n * Released under the MIT License\n */\nimport { r as requestAnimFrame, a as resolve, e as effects, c as color, i as isObject, d as defaults, b as isArray, v as valueOrDefault, u as unlistenArrayEvents, l as listenArrayEvents, f as resolveObjectKey, g as isNumberFinite, h as defined, s as sign, j as createContext, k as isNullOrUndef, _ as _arrayUnique, t as toRadians, m as toPercentage, n as toDimension, T as TAU, o as formatNumber, p as _angleBetween, H as HALF_PI, P as PI, q as _getStartAndCountOfVisiblePoints, w as _scaleRangesChanged, x as isNumber, y as _parseObjectDataRadialScale, z as getRelativePosition, A as _rlookupByKey, B as _lookupByKey, C as _isPointInArea, D as getAngleFromPoint, E as toPadding, F as each, G as getMaximumSize, I as _getParentNode, J as readUsedSize, K as supportsEventListenerOptions, L as throttled, M as _isDomSupported, N as _factorize, O as finiteOrDefault, Q as callback, R as _addGrace, S as _limitValue, U as toDegrees, V as _measureText, W as _int16Range, X as _alignPixel, Y as clipArea, Z as renderText, $ as unclipArea, a0 as toFont, a1 as _toLeftRightCenter, a2 as _alignStartEnd, a3 as overrides, a4 as merge, a5 as _capitalize, a6 as descriptors, a7 as isFunction, a8 as _attachContext, a9 as _createResolver, aa as _descriptors, ab as mergeIf, ac as uid, ad as debounce, ae as retinaScale, af as clearCanvas, ag as setsEqual, ah as _elementsEqual, ai as _isClickEvent, aj as _isBetween, ak as _readValueToProps, al as _updateBezierControlPoints, am as _computeSegments, an as _boundSegments, ao as _steppedInterpolation, ap as _bezierInterpolation, aq as _pointInLine, ar as _steppedLineTo, as as _bezierCurveTo, at as drawPoint, au as addRoundedRectPath, av as toTRBL, aw as toTRBLCorners, ax as _boundSegment, ay as _normalizeAngle, az as getRtlAdapter, aA as overrideTextDirection, aB as _textX, aC as restoreTextDirection, aD as drawPointLegend, aE as distanceBetweenPoints, aF as noop, aG as _setMinAndMaxByKey, aH as niceNum, aI as almostWhole, aJ as almostEquals, aK as _decimalPlaces, aL as Ticks, aM as log10, aN as _longestText, aO as _filterBetween, aP as _lookup } from './chunks/helpers.segment.js';\nimport '@kurkle/color';\n\nclass Animator {\n    constructor(){\n        this._request = null;\n        this._charts = new Map();\n        this._running = false;\n        this._lastDate = undefined;\n    }\n _notify(chart, anims, date, type) {\n        const callbacks = anims.listeners[type];\n        const numSteps = anims.duration;\n        callbacks.forEach((fn)=>fn({\n                chart,\n                initial: anims.initial,\n                numSteps,\n                currentStep: Math.min(date - anims.start, numSteps)\n            }));\n    }\n _refresh() {\n        if (this._request) {\n            return;\n        }\n        this._running = true;\n        this._request = requestAnimFrame.call(window, ()=>{\n            this._update();\n            this._request = null;\n            if (this._running) {\n                this._refresh();\n            }\n        });\n    }\n _update(date = Date.now()) {\n        let remaining = 0;\n        this._charts.forEach((anims, chart)=>{\n            if (!anims.running || !anims.items.length) {\n                return;\n            }\n            const items = anims.items;\n            let i = items.length - 1;\n            let draw = false;\n            let item;\n            for(; i >= 0; --i){\n                item = items[i];\n                if (item._active) {\n                    if (item._total > anims.duration) {\n                        anims.duration = item._total;\n                    }\n                    item.tick(date);\n                    draw = true;\n                } else {\n                    items[i] = items[items.length - 1];\n                    items.pop();\n                }\n            }\n            if (draw) {\n                chart.draw();\n                this._notify(chart, anims, date, 'progress');\n            }\n            if (!items.length) {\n                anims.running = false;\n                this._notify(chart, anims, date, 'complete');\n                anims.initial = false;\n            }\n            remaining += items.length;\n        });\n        this._lastDate = date;\n        if (remaining === 0) {\n            this._running = false;\n        }\n    }\n _getAnims(chart) {\n        const charts = this._charts;\n        let anims = charts.get(chart);\n        if (!anims) {\n            anims = {\n                running: false,\n                initial: true,\n                items: [],\n                listeners: {\n                    complete: [],\n                    progress: []\n                }\n            };\n            charts.set(chart, anims);\n        }\n        return anims;\n    }\n listen(chart, event, cb) {\n        this._getAnims(chart).listeners[event].push(cb);\n    }\n add(chart, items) {\n        if (!items || !items.length) {\n            return;\n        }\n        this._getAnims(chart).items.push(...items);\n    }\n has(chart) {\n        return this._getAnims(chart).items.length > 0;\n    }\n start(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims) {\n            return;\n        }\n        anims.running = true;\n        anims.start = Date.now();\n        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);\n        this._refresh();\n    }\n    running(chart) {\n        if (!this._running) {\n            return false;\n        }\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.running || !anims.items.length) {\n            return false;\n        }\n        return true;\n    }\n stop(chart) {\n        const anims = this._charts.get(chart);\n        if (!anims || !anims.items.length) {\n            return;\n        }\n        const items = anims.items;\n        let i = items.length - 1;\n        for(; i >= 0; --i){\n            items[i].cancel();\n        }\n        anims.items = [];\n        this._notify(chart, anims, Date.now(), 'complete');\n    }\n remove(chart) {\n        return this._charts.delete(chart);\n    }\n}\nvar animator = /* #__PURE__ */ new Animator();\n\nconst transparent = 'transparent';\nconst interpolators = {\n    boolean (from, to, factor) {\n        return factor > 0.5 ? to : from;\n    },\n color (from, to, factor) {\n        const c0 = color(from || transparent);\n        const c1 = c0.valid && color(to || transparent);\n        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;\n    },\n    number (from, to, factor) {\n        return from + (to - from) * factor;\n    }\n};\nclass Animation {\n    constructor(cfg, target, prop, to){\n        const currentValue = target[prop];\n        to = resolve([\n            cfg.to,\n            to,\n            currentValue,\n            cfg.from\n        ]);\n        const from = resolve([\n            cfg.from,\n            currentValue,\n            to\n        ]);\n        this._active = true;\n        this._fn = cfg.fn || interpolators[cfg.type || typeof from];\n        this._easing = effects[cfg.easing] || effects.linear;\n        this._start = Math.floor(Date.now() + (cfg.delay || 0));\n        this._duration = this._total = Math.floor(cfg.duration);\n        this._loop = !!cfg.loop;\n        this._target = target;\n        this._prop = prop;\n        this._from = from;\n        this._to = to;\n        this._promises = undefined;\n    }\n    active() {\n        return this._active;\n    }\n    update(cfg, to, date) {\n        if (this._active) {\n            this._notify(false);\n            const currentValue = this._target[this._prop];\n            const elapsed = date - this._start;\n            const remain = this._duration - elapsed;\n            this._start = date;\n            this._duration = Math.floor(Math.max(remain, cfg.duration));\n            this._total += elapsed;\n            this._loop = !!cfg.loop;\n            this._to = resolve([\n                cfg.to,\n                to,\n                currentValue,\n                cfg.from\n            ]);\n            this._from = resolve([\n                cfg.from,\n                currentValue,\n                to\n            ]);\n        }\n    }\n    cancel() {\n        if (this._active) {\n            this.tick(Date.now());\n            this._active = false;\n            this._notify(false);\n        }\n    }\n    tick(date) {\n        const elapsed = date - this._start;\n        const duration = this._duration;\n        const prop = this._prop;\n        const from = this._from;\n        const loop = this._loop;\n        const to = this._to;\n        let factor;\n        this._active = from !== to && (loop || elapsed < duration);\n        if (!this._active) {\n            this._target[prop] = to;\n            this._notify(true);\n            return;\n        }\n        if (elapsed < 0) {\n            this._target[prop] = from;\n            return;\n        }\n        factor = elapsed / duration % 2;\n        factor = loop && factor > 1 ? 2 - factor : factor;\n        factor = this._easing(Math.min(1, Math.max(0, factor)));\n        this._target[prop] = this._fn(from, to, factor);\n    }\n    wait() {\n        const promises = this._promises || (this._promises = []);\n        return new Promise((res, rej)=>{\n            promises.push({\n                res,\n                rej\n            });\n        });\n    }\n    _notify(resolved) {\n        const method = resolved ? 'res' : 'rej';\n        const promises = this._promises || [];\n        for(let i = 0; i < promises.length; i++){\n            promises[i][method]();\n        }\n    }\n}\n\nclass Animations {\n    constructor(chart, config){\n        this._chart = chart;\n        this._properties = new Map();\n        this.configure(config);\n    }\n    configure(config) {\n        if (!isObject(config)) {\n            return;\n        }\n        const animationOptions = Object.keys(defaults.animation);\n        const animatedProps = this._properties;\n        Object.getOwnPropertyNames(config).forEach((key)=>{\n            const cfg = config[key];\n            if (!isObject(cfg)) {\n                return;\n            }\n            const resolved = {};\n            for (const option of animationOptions){\n                resolved[option] = cfg[option];\n            }\n            (isArray(cfg.properties) && cfg.properties || [\n                key\n            ]).forEach((prop)=>{\n                if (prop === key || !animatedProps.has(prop)) {\n                    animatedProps.set(prop, resolved);\n                }\n            });\n        });\n    }\n _animateOptions(target, values) {\n        const newOptions = values.options;\n        const options = resolveTargetOptions(target, newOptions);\n        if (!options) {\n            return [];\n        }\n        const animations = this._createAnimations(options, newOptions);\n        if (newOptions.$shared) {\n            awaitAll(target.options.$animations, newOptions).then(()=>{\n                target.options = newOptions;\n            }, ()=>{\n            });\n        }\n        return animations;\n    }\n _createAnimations(target, values) {\n        const animatedProps = this._properties;\n        const animations = [];\n        const running = target.$animations || (target.$animations = {});\n        const props = Object.keys(values);\n        const date = Date.now();\n        let i;\n        for(i = props.length - 1; i >= 0; --i){\n            const prop = props[i];\n            if (prop.charAt(0) === '$') {\n                continue;\n            }\n            if (prop === 'options') {\n                animations.push(...this._animateOptions(target, values));\n                continue;\n            }\n            const value = values[prop];\n            let animation = running[prop];\n            const cfg = animatedProps.get(prop);\n            if (animation) {\n                if (cfg && animation.active()) {\n                    animation.update(cfg, value, date);\n                    continue;\n                } else {\n                    animation.cancel();\n                }\n            }\n            if (!cfg || !cfg.duration) {\n                target[prop] = value;\n                continue;\n            }\n            running[prop] = animation = new Animation(cfg, target, prop, value);\n            animations.push(animation);\n        }\n        return animations;\n    }\n update(target, values) {\n        if (this._properties.size === 0) {\n            Object.assign(target, values);\n            return;\n        }\n        const animations = this._createAnimations(target, values);\n        if (animations.length) {\n            animator.add(this._chart, animations);\n            return true;\n        }\n    }\n}\nfunction awaitAll(animations, properties) {\n    const running = [];\n    const keys = Object.keys(properties);\n    for(let i = 0; i < keys.length; i++){\n        const anim = animations[keys[i]];\n        if (anim && anim.active()) {\n            running.push(anim.wait());\n        }\n    }\n    return Promise.all(running);\n}\nfunction resolveTargetOptions(target, newOptions) {\n    if (!newOptions) {\n        return;\n    }\n    let options = target.options;\n    if (!options) {\n        target.options = newOptions;\n        return;\n    }\n    if (options.$shared) {\n        target.options = options = Object.assign({}, options, {\n            $shared: false,\n            $animations: {}\n        });\n    }\n    return options;\n}\n\nfunction scaleClip(scale, allowedOverflow) {\n    const opts = scale && scale.options || {};\n    const reverse = opts.reverse;\n    const min = opts.min === undefined ? allowedOverflow : 0;\n    const max = opts.max === undefined ? allowedOverflow : 0;\n    return {\n        start: reverse ? max : min,\n        end: reverse ? min : max\n    };\n}\nfunction defaultClip(xScale, yScale, allowedOverflow) {\n    if (allowedOverflow === false) {\n        return false;\n    }\n    const x = scaleClip(xScale, allowedOverflow);\n    const y = scaleClip(yScale, allowedOverflow);\n    return {\n        top: y.end,\n        right: x.end,\n        bottom: y.start,\n        left: x.start\n    };\n}\nfunction toClip(value) {\n    let t, r, b, l;\n    if (isObject(value)) {\n        t = value.top;\n        r = value.right;\n        b = value.bottom;\n        l = value.left;\n    } else {\n        t = r = b = l = value;\n    }\n    return {\n        top: t,\n        right: r,\n        bottom: b,\n        left: l,\n        disabled: value === false\n    };\n}\nfunction getSortedDatasetIndices(chart, filterVisible) {\n    const keys = [];\n    const metasets = chart._getSortedDatasetMetas(filterVisible);\n    let i, ilen;\n    for(i = 0, ilen = metasets.length; i < ilen; ++i){\n        keys.push(metasets[i].index);\n    }\n    return keys;\n}\nfunction applyStack(stack, value, dsIndex, options = {}) {\n    const keys = stack.keys;\n    const singleMode = options.mode === 'single';\n    let i, ilen, datasetIndex, otherValue;\n    if (value === null) {\n        return;\n    }\n    let found = false;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        datasetIndex = +keys[i];\n        if (datasetIndex === dsIndex) {\n            found = true;\n            if (options.all) {\n                continue;\n            }\n            break;\n        }\n        otherValue = stack.values[datasetIndex];\n        if (isNumberFinite(otherValue) && (singleMode || value === 0 || sign(value) === sign(otherValue))) {\n            value += otherValue;\n        }\n    }\n    if (!found && !options.all) {\n        return 0;\n    }\n    return value;\n}\nfunction convertObjectDataToArray(data, meta) {\n    const { iScale , vScale  } = meta;\n    const iAxisKey = iScale.axis === 'x' ? 'x' : 'y';\n    const vAxisKey = vScale.axis === 'x' ? 'x' : 'y';\n    const keys = Object.keys(data);\n    const adata = new Array(keys.length);\n    let i, ilen, key;\n    for(i = 0, ilen = keys.length; i < ilen; ++i){\n        key = keys[i];\n        adata[i] = {\n            [iAxisKey]: key,\n            [vAxisKey]: data[key]\n        };\n    }\n    return adata;\n}\nfunction isStacked(scale, meta) {\n    const stacked = scale && scale.options.stacked;\n    return stacked || stacked === undefined && meta.stack !== undefined;\n}\nfunction getStackKey(indexScale, valueScale, meta) {\n    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;\n}\nfunction getUserBounds(scale) {\n    const { min , max , minDefined , maxDefined  } = scale.getUserBounds();\n    return {\n        min: minDefined ? min : Number.NEGATIVE_INFINITY,\n        max: maxDefined ? max : Number.POSITIVE_INFINITY\n    };\n}\nfunction getOrCreateStack(stacks, stackKey, indexValue) {\n    const subStack = stacks[stackKey] || (stacks[stackKey] = {});\n    return subStack[indexValue] || (subStack[indexValue] = {});\n}\nfunction getLastIndexInStack(stack, vScale, positive, type) {\n    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){\n        const value = stack[meta.index];\n        if (positive && value > 0 || !positive && value < 0) {\n            return meta.index;\n        }\n    }\n    return null;\n}\nfunction updateStacks(controller, parsed) {\n    const { chart , _cachedMeta: meta  } = controller;\n    const stacks = chart._stacks || (chart._stacks = {});\n    const { iScale , vScale , index: datasetIndex  } = meta;\n    const iAxis = iScale.axis;\n    const vAxis = vScale.axis;\n    const key = getStackKey(iScale, vScale, meta);\n    const ilen = parsed.length;\n    let stack;\n    for(let i = 0; i < ilen; ++i){\n        const item = parsed[i];\n        const { [iAxis]: index , [vAxis]: value  } = item;\n        const itemStacks = item._stacks || (item._stacks = {});\n        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);\n        stack[datasetIndex] = value;\n        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);\n        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);\n        const visualValues = stack._visualValues || (stack._visualValues = {});\n        visualValues[datasetIndex] = value;\n    }\n}\nfunction getFirstScaleId(chart, axis) {\n    const scales = chart.scales;\n    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();\n}\nfunction createDatasetContext(parent, index) {\n    return createContext(parent, {\n        active: false,\n        dataset: undefined,\n        datasetIndex: index,\n        index,\n        mode: 'default',\n        type: 'dataset'\n    });\n}\nfunction createDataContext(parent, index, element) {\n    return createContext(parent, {\n        active: false,\n        dataIndex: index,\n        parsed: undefined,\n        raw: undefined,\n        element,\n        index,\n        mode: 'default',\n        type: 'data'\n    });\n}\nfunction clearStacks(meta, items) {\n    const datasetIndex = meta.controller.index;\n    const axis = meta.vScale && meta.vScale.axis;\n    if (!axis) {\n        return;\n    }\n    items = items || meta._parsed;\n    for (const parsed of items){\n        const stacks = parsed._stacks;\n        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) {\n            return;\n        }\n        delete stacks[axis][datasetIndex];\n        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) {\n            delete stacks[axis]._visualValues[datasetIndex];\n        }\n    }\n}\nconst isDirectUpdateMode = (mode)=>mode === 'reset' || mode === 'none';\nconst cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);\nconst createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {\n        keys: getSortedDatasetIndices(chart, true),\n        values: null\n    };\nclass DatasetController {\n static defaults = {};\n static datasetElementType = null;\n static dataElementType = null;\n constructor(chart, datasetIndex){\n        this.chart = chart;\n        this._ctx = chart.ctx;\n        this.index = datasetIndex;\n        this._cachedDataOpts = {};\n        this._cachedMeta = this.getMeta();\n        this._type = this._cachedMeta.type;\n        this.options = undefined;\n         this._parsing = false;\n        this._data = undefined;\n        this._objectData = undefined;\n        this._sharedOptions = undefined;\n        this._drawStart = undefined;\n        this._drawCount = undefined;\n        this.enableOptionSharing = false;\n        this.supportsDecimation = false;\n        this.$context = undefined;\n        this._syncList = [];\n        this.datasetElementType = new.target.datasetElementType;\n        this.dataElementType = new.target.dataElementType;\n        this.initialize();\n    }\n    initialize() {\n        const meta = this._cachedMeta;\n        this.configure();\n        this.linkScales();\n        meta._stacked = isStacked(meta.vScale, meta);\n        this.addElements();\n        if (this.options.fill && !this.chart.isPluginEnabled('filler')) {\n            console.warn(\"Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options\");\n        }\n    }\n    updateIndex(datasetIndex) {\n        if (this.index !== datasetIndex) {\n            clearStacks(this._cachedMeta);\n        }\n        this.index = datasetIndex;\n    }\n    linkScales() {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        const chooseId = (axis, x, y, r)=>axis === 'x' ? x : axis === 'r' ? r : y;\n        const xid = meta.xAxisID = valueOrDefault(dataset.xAxisID, getFirstScaleId(chart, 'x'));\n        const yid = meta.yAxisID = valueOrDefault(dataset.yAxisID, getFirstScaleId(chart, 'y'));\n        const rid = meta.rAxisID = valueOrDefault(dataset.rAxisID, getFirstScaleId(chart, 'r'));\n        const indexAxis = meta.indexAxis;\n        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);\n        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);\n        meta.xScale = this.getScaleForId(xid);\n        meta.yScale = this.getScaleForId(yid);\n        meta.rScale = this.getScaleForId(rid);\n        meta.iScale = this.getScaleForId(iid);\n        meta.vScale = this.getScaleForId(vid);\n    }\n    getDataset() {\n        return this.chart.data.datasets[this.index];\n    }\n    getMeta() {\n        return this.chart.getDatasetMeta(this.index);\n    }\n getScaleForId(scaleID) {\n        return this.chart.scales[scaleID];\n    }\n _getOtherScale(scale) {\n        const meta = this._cachedMeta;\n        return scale === meta.iScale ? meta.vScale : meta.iScale;\n    }\n    reset() {\n        this._update('reset');\n    }\n _destroy() {\n        const meta = this._cachedMeta;\n        if (this._data) {\n            unlistenArrayEvents(this._data, this);\n        }\n        if (meta._stacked) {\n            clearStacks(meta);\n        }\n    }\n _dataCheck() {\n        const dataset = this.getDataset();\n        const data = dataset.data || (dataset.data = []);\n        const _data = this._data;\n        if (isObject(data)) {\n            const meta = this._cachedMeta;\n            this._data = convertObjectDataToArray(data, meta);\n        } else if (_data !== data) {\n            if (_data) {\n                unlistenArrayEvents(_data, this);\n                const meta = this._cachedMeta;\n                clearStacks(meta);\n                meta._parsed = [];\n            }\n            if (data && Object.isExtensible(data)) {\n                listenArrayEvents(data, this);\n            }\n            this._syncList = [];\n            this._data = data;\n        }\n    }\n    addElements() {\n        const meta = this._cachedMeta;\n        this._dataCheck();\n        if (this.datasetElementType) {\n            meta.dataset = new this.datasetElementType();\n        }\n    }\n    buildOrUpdateElements(resetNewElements) {\n        const meta = this._cachedMeta;\n        const dataset = this.getDataset();\n        let stackChanged = false;\n        this._dataCheck();\n        const oldStacked = meta._stacked;\n        meta._stacked = isStacked(meta.vScale, meta);\n        if (meta.stack !== dataset.stack) {\n            stackChanged = true;\n            clearStacks(meta);\n            meta.stack = dataset.stack;\n        }\n        this._resyncElements(resetNewElements);\n        if (stackChanged || oldStacked !== meta._stacked) {\n            updateStacks(this, meta._parsed);\n            meta._stacked = isStacked(meta.vScale, meta);\n        }\n    }\n configure() {\n        const config = this.chart.config;\n        const scopeKeys = config.datasetScopeKeys(this._type);\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);\n        this.options = config.createResolver(scopes, this.getContext());\n        this._parsing = this.options.parsing;\n        this._cachedDataOpts = {};\n    }\n parse(start, count) {\n        const { _cachedMeta: meta , _data: data  } = this;\n        const { iScale , _stacked  } = meta;\n        const iAxis = iScale.axis;\n        let sorted = start === 0 && count === data.length ? true : meta._sorted;\n        let prev = start > 0 && meta._parsed[start - 1];\n        let i, cur, parsed;\n        if (this._parsing === false) {\n            meta._parsed = data;\n            meta._sorted = true;\n            parsed = data;\n        } else {\n            if (isArray(data[start])) {\n                parsed = this.parseArrayData(meta, data, start, count);\n            } else if (isObject(data[start])) {\n                parsed = this.parseObjectData(meta, data, start, count);\n            } else {\n                parsed = this.parsePrimitiveData(meta, data, start, count);\n            }\n            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];\n            for(i = 0; i < count; ++i){\n                meta._parsed[i + start] = cur = parsed[i];\n                if (sorted) {\n                    if (isNotInOrderComparedToPrev()) {\n                        sorted = false;\n                    }\n                    prev = cur;\n                }\n            }\n            meta._sorted = sorted;\n        }\n        if (_stacked) {\n            updateStacks(this, parsed);\n        }\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const labels = iScale.getLabels();\n        const singleScale = iScale === vScale;\n        const parsed = new Array(count);\n        let i, ilen, index;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            parsed[i] = {\n                [iAxis]: singleScale || iScale.parse(labels[index], index),\n                [vAxis]: vScale.parse(data[index], index)\n            };\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(item[0], index),\n                y: yScale.parse(item[1], index)\n            };\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const { xScale , yScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const parsed = new Array(count);\n        let i, ilen, index, item;\n        for(i = 0, ilen = count; i < ilen; ++i){\n            index = i + start;\n            item = data[index];\n            parsed[i] = {\n                x: xScale.parse(resolveObjectKey(item, xAxisKey), index),\n                y: yScale.parse(resolveObjectKey(item, yAxisKey), index)\n            };\n        }\n        return parsed;\n    }\n getParsed(index) {\n        return this._cachedMeta._parsed[index];\n    }\n getDataElement(index) {\n        return this._cachedMeta.data[index];\n    }\n applyStack(scale, parsed, mode) {\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const value = parsed[scale.axis];\n        const stack = {\n            keys: getSortedDatasetIndices(chart, true),\n            values: parsed._stacks[scale.axis]._visualValues\n        };\n        return applyStack(stack, value, meta.index, {\n            mode\n        });\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        const parsedValue = parsed[scale.axis];\n        let value = parsedValue === null ? NaN : parsedValue;\n        const values = stack && parsed._stacks[scale.axis];\n        if (stack && values) {\n            stack.values = values;\n            value = applyStack(stack, parsedValue, this._cachedMeta.index);\n        }\n        range.min = Math.min(range.min, value);\n        range.max = Math.max(range.max, value);\n    }\n getMinMax(scale, canStack) {\n        const meta = this._cachedMeta;\n        const _parsed = meta._parsed;\n        const sorted = meta._sorted && scale === meta.iScale;\n        const ilen = _parsed.length;\n        const otherScale = this._getOtherScale(scale);\n        const stack = createStack(canStack, meta, this.chart);\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        const { min: otherMin , max: otherMax  } = getUserBounds(otherScale);\n        let i, parsed;\n        function _skip() {\n            parsed = _parsed[i];\n            const otherValue = parsed[otherScale.axis];\n            return !isNumberFinite(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;\n        }\n        for(i = 0; i < ilen; ++i){\n            if (_skip()) {\n                continue;\n            }\n            this.updateRangeFromParsed(range, scale, parsed, stack);\n            if (sorted) {\n                break;\n            }\n        }\n        if (sorted) {\n            for(i = ilen - 1; i >= 0; --i){\n                if (_skip()) {\n                    continue;\n                }\n                this.updateRangeFromParsed(range, scale, parsed, stack);\n                break;\n            }\n        }\n        return range;\n    }\n    getAllParsedValues(scale) {\n        const parsed = this._cachedMeta._parsed;\n        const values = [];\n        let i, ilen, value;\n        for(i = 0, ilen = parsed.length; i < ilen; ++i){\n            value = parsed[i][scale.axis];\n            if (isNumberFinite(value)) {\n                values.push(value);\n            }\n        }\n        return values;\n    }\n getMaxOverflow() {\n        return false;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const vScale = meta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: iScale ? '' + iScale.getLabelForValue(parsed[iScale.axis]) : '',\n            value: vScale ? '' + vScale.getLabelForValue(parsed[vScale.axis]) : ''\n        };\n    }\n _update(mode) {\n        const meta = this._cachedMeta;\n        this.update(mode || 'default');\n        meta._clip = toClip(valueOrDefault(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));\n    }\n update(mode) {}\n    draw() {\n        const ctx = this._ctx;\n        const chart = this.chart;\n        const meta = this._cachedMeta;\n        const elements = meta.data || [];\n        const area = chart.chartArea;\n        const active = [];\n        const start = this._drawStart || 0;\n        const count = this._drawCount || elements.length - start;\n        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;\n        let i;\n        if (meta.dataset) {\n            meta.dataset.draw(ctx, area, start, count);\n        }\n        for(i = start; i < start + count; ++i){\n            const element = elements[i];\n            if (element.hidden) {\n                continue;\n            }\n            if (element.active && drawActiveElementsOnTop) {\n                active.push(element);\n            } else {\n                element.draw(ctx, area);\n            }\n        }\n        for(i = 0; i < active.length; ++i){\n            active[i].draw(ctx, area);\n        }\n    }\n getStyle(index, active) {\n        const mode = active ? 'active' : 'default';\n        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);\n    }\n getContext(index, active, mode) {\n        const dataset = this.getDataset();\n        let context;\n        if (index >= 0 && index < this._cachedMeta.data.length) {\n            const element = this._cachedMeta.data[index];\n            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));\n            context.parsed = this.getParsed(index);\n            context.raw = dataset.data[index];\n            context.index = context.dataIndex = index;\n        } else {\n            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));\n            context.dataset = dataset;\n            context.index = context.datasetIndex = this.index;\n        }\n        context.active = !!active;\n        context.mode = mode;\n        return context;\n    }\n resolveDatasetElementOptions(mode) {\n        return this._resolveElementOptions(this.datasetElementType.id, mode);\n    }\n resolveDataElementOptions(index, mode) {\n        return this._resolveElementOptions(this.dataElementType.id, mode, index);\n    }\n _resolveElementOptions(elementType, mode = 'default', index) {\n        const active = mode === 'active';\n        const cache = this._cachedDataOpts;\n        const cacheKey = elementType + '-' + mode;\n        const cached = cache[cacheKey];\n        const sharing = this.enableOptionSharing && defined(index);\n        if (cached) {\n            return cloneIfNotShared(cached, sharing);\n        }\n        const config = this.chart.config;\n        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);\n        const prefixes = active ? [\n            `${elementType}Hover`,\n            'hover',\n            elementType,\n            ''\n        ] : [\n            elementType,\n            ''\n        ];\n        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n        const names = Object.keys(defaults.elements[elementType]);\n        const context = ()=>this.getContext(index, active, mode);\n        const values = config.resolveNamedOptions(scopes, names, context, prefixes);\n        if (values.$shared) {\n            values.$shared = sharing;\n            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));\n        }\n        return values;\n    }\n _resolveAnimations(index, transition, active) {\n        const chart = this.chart;\n        const cache = this._cachedDataOpts;\n        const cacheKey = `animation-${transition}`;\n        const cached = cache[cacheKey];\n        if (cached) {\n            return cached;\n        }\n        let options;\n        if (chart.options.animation !== false) {\n            const config = this.chart.config;\n            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);\n            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);\n            options = config.createResolver(scopes, this.getContext(index, active, transition));\n        }\n        const animations = new Animations(chart, options && options.animations);\n        if (options && options._cacheable) {\n            cache[cacheKey] = Object.freeze(animations);\n        }\n        return animations;\n    }\n getSharedOptions(options) {\n        if (!options.$shared) {\n            return;\n        }\n        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));\n    }\n includeOptions(mode, sharedOptions) {\n        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;\n    }\n _getSharedOptions(start, mode) {\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const previouslySharedOptions = this._sharedOptions;\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n        return {\n            sharedOptions,\n            includeOptions\n        };\n    }\n updateElement(element, index, properties, mode) {\n        if (isDirectUpdateMode(mode)) {\n            Object.assign(element, properties);\n        } else {\n            this._resolveAnimations(index, mode).update(element, properties);\n        }\n    }\n updateSharedOptions(sharedOptions, mode, newOptions) {\n        if (sharedOptions && !isDirectUpdateMode(mode)) {\n            this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);\n        }\n    }\n _setStyle(element, index, mode, active) {\n        element.active = active;\n        const options = this.getStyle(index, active);\n        this._resolveAnimations(index, mode, active).update(element, {\n            options: !active && this.getSharedOptions(options) || options\n        });\n    }\n    removeHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', false);\n    }\n    setHoverStyle(element, datasetIndex, index) {\n        this._setStyle(element, index, 'active', true);\n    }\n _removeDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', false);\n        }\n    }\n _setDatasetHoverStyle() {\n        const element = this._cachedMeta.dataset;\n        if (element) {\n            this._setStyle(element, undefined, 'active', true);\n        }\n    }\n _resyncElements(resetNewElements) {\n        const data = this._data;\n        const elements = this._cachedMeta.data;\n        for (const [method, arg1, arg2] of this._syncList){\n            this[method](arg1, arg2);\n        }\n        this._syncList = [];\n        const numMeta = elements.length;\n        const numData = data.length;\n        const count = Math.min(numData, numMeta);\n        if (count) {\n            this.parse(0, count);\n        }\n        if (numData > numMeta) {\n            this._insertElements(numMeta, numData - numMeta, resetNewElements);\n        } else if (numData < numMeta) {\n            this._removeElements(numData, numMeta - numData);\n        }\n    }\n _insertElements(start, count, resetNewElements = true) {\n        const meta = this._cachedMeta;\n        const data = meta.data;\n        const end = start + count;\n        let i;\n        const move = (arr)=>{\n            arr.length += count;\n            for(i = arr.length - 1; i >= end; i--){\n                arr[i] = arr[i - count];\n            }\n        };\n        move(data);\n        for(i = start; i < end; ++i){\n            data[i] = new this.dataElementType();\n        }\n        if (this._parsing) {\n            move(meta._parsed);\n        }\n        this.parse(start, count);\n        if (resetNewElements) {\n            this.updateElements(data, start, count, 'reset');\n        }\n    }\n    updateElements(element, start, count, mode) {}\n _removeElements(start, count) {\n        const meta = this._cachedMeta;\n        if (this._parsing) {\n            const removed = meta._parsed.splice(start, count);\n            if (meta._stacked) {\n                clearStacks(meta, removed);\n            }\n        }\n        meta.data.splice(start, count);\n    }\n _sync(args) {\n        if (this._parsing) {\n            this._syncList.push(args);\n        } else {\n            const [method, arg1, arg2] = args;\n            this[method](arg1, arg2);\n        }\n        this.chart._dataChanges.push([\n            this.index,\n            ...args\n        ]);\n    }\n    _onDataPush() {\n        const count = arguments.length;\n        this._sync([\n            '_insertElements',\n            this.getDataset().data.length - count,\n            count\n        ]);\n    }\n    _onDataPop() {\n        this._sync([\n            '_removeElements',\n            this._cachedMeta.data.length - 1,\n            1\n        ]);\n    }\n    _onDataShift() {\n        this._sync([\n            '_removeElements',\n            0,\n            1\n        ]);\n    }\n    _onDataSplice(start, count) {\n        if (count) {\n            this._sync([\n                '_removeElements',\n                start,\n                count\n            ]);\n        }\n        const newCount = arguments.length - 2;\n        if (newCount) {\n            this._sync([\n                '_insertElements',\n                start,\n                newCount\n            ]);\n        }\n    }\n    _onDataUnshift() {\n        this._sync([\n            '_insertElements',\n            0,\n            arguments.length\n        ]);\n    }\n}\n\nfunction getAllScaleValues(scale, type) {\n    if (!scale._cache.$bar) {\n        const visibleMetas = scale.getMatchingVisibleMetas(type);\n        let values = [];\n        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++){\n            values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));\n        }\n        scale._cache.$bar = _arrayUnique(values.sort((a, b)=>a - b));\n    }\n    return scale._cache.$bar;\n}\n function computeMinSampleSize(meta) {\n    const scale = meta.iScale;\n    const values = getAllScaleValues(scale, meta.type);\n    let min = scale._length;\n    let i, ilen, curr, prev;\n    const updateMinAndPrev = ()=>{\n        if (curr === 32767 || curr === -32768) {\n            return;\n        }\n        if (defined(prev)) {\n            min = Math.min(min, Math.abs(curr - prev) || min);\n        }\n        prev = curr;\n    };\n    for(i = 0, ilen = values.length; i < ilen; ++i){\n        curr = scale.getPixelForValue(values[i]);\n        updateMinAndPrev();\n    }\n    prev = undefined;\n    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){\n        curr = scale.getPixelForTick(i);\n        updateMinAndPrev();\n    }\n    return min;\n}\n function computeFitCategoryTraits(index, ruler, options, stackCount) {\n    const thickness = options.barThickness;\n    let size, ratio;\n    if (isNullOrUndef(thickness)) {\n        size = ruler.min * options.categoryPercentage;\n        ratio = options.barPercentage;\n    } else {\n        size = thickness * stackCount;\n        ratio = 1;\n    }\n    return {\n        chunk: size / stackCount,\n        ratio,\n        start: ruler.pixels[index] - size / 2\n    };\n}\n function computeFlexCategoryTraits(index, ruler, options, stackCount) {\n    const pixels = ruler.pixels;\n    const curr = pixels[index];\n    let prev = index > 0 ? pixels[index - 1] : null;\n    let next = index < pixels.length - 1 ? pixels[index + 1] : null;\n    const percent = options.categoryPercentage;\n    if (prev === null) {\n        prev = curr - (next === null ? ruler.end - ruler.start : next - curr);\n    }\n    if (next === null) {\n        next = curr + curr - prev;\n    }\n    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;\n    const size = Math.abs(next - prev) / 2 * percent;\n    return {\n        chunk: size / stackCount,\n        ratio: options.barPercentage,\n        start\n    };\n}\nfunction parseFloatBar(entry, item, vScale, i) {\n    const startValue = vScale.parse(entry[0], i);\n    const endValue = vScale.parse(entry[1], i);\n    const min = Math.min(startValue, endValue);\n    const max = Math.max(startValue, endValue);\n    let barStart = min;\n    let barEnd = max;\n    if (Math.abs(min) > Math.abs(max)) {\n        barStart = max;\n        barEnd = min;\n    }\n    item[vScale.axis] = barEnd;\n    item._custom = {\n        barStart,\n        barEnd,\n        start: startValue,\n        end: endValue,\n        min,\n        max\n    };\n}\nfunction parseValue(entry, item, vScale, i) {\n    if (isArray(entry)) {\n        parseFloatBar(entry, item, vScale, i);\n    } else {\n        item[vScale.axis] = vScale.parse(entry, i);\n    }\n    return item;\n}\nfunction parseArrayOrPrimitive(meta, data, start, count) {\n    const iScale = meta.iScale;\n    const vScale = meta.vScale;\n    const labels = iScale.getLabels();\n    const singleScale = iScale === vScale;\n    const parsed = [];\n    let i, ilen, item, entry;\n    for(i = start, ilen = start + count; i < ilen; ++i){\n        entry = data[i];\n        item = {};\n        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);\n        parsed.push(parseValue(entry, item, vScale, i));\n    }\n    return parsed;\n}\nfunction isFloatBar(custom) {\n    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;\n}\nfunction barSign(size, vScale, actualBase) {\n    if (size !== 0) {\n        return sign(size);\n    }\n    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);\n}\nfunction borderProps(properties) {\n    let reverse, start, end, top, bottom;\n    if (properties.horizontal) {\n        reverse = properties.base > properties.x;\n        start = 'left';\n        end = 'right';\n    } else {\n        reverse = properties.base < properties.y;\n        start = 'bottom';\n        end = 'top';\n    }\n    if (reverse) {\n        top = 'end';\n        bottom = 'start';\n    } else {\n        top = 'start';\n        bottom = 'end';\n    }\n    return {\n        start,\n        end,\n        reverse,\n        top,\n        bottom\n    };\n}\nfunction setBorderSkipped(properties, options, stack, index) {\n    let edge = options.borderSkipped;\n    const res = {};\n    if (!edge) {\n        properties.borderSkipped = res;\n        return;\n    }\n    if (edge === true) {\n        properties.borderSkipped = {\n            top: true,\n            right: true,\n            bottom: true,\n            left: true\n        };\n        return;\n    }\n    const { start , end , reverse , top , bottom  } = borderProps(properties);\n    if (edge === 'middle' && stack) {\n        properties.enableBorderRadius = true;\n        if ((stack._top || 0) === index) {\n            edge = top;\n        } else if ((stack._bottom || 0) === index) {\n            edge = bottom;\n        } else {\n            res[parseEdge(bottom, start, end, reverse)] = true;\n            edge = top;\n        }\n    }\n    res[parseEdge(edge, start, end, reverse)] = true;\n    properties.borderSkipped = res;\n}\nfunction parseEdge(edge, a, b, reverse) {\n    if (reverse) {\n        edge = swap(edge, a, b);\n        edge = startEnd(edge, b, a);\n    } else {\n        edge = startEnd(edge, a, b);\n    }\n    return edge;\n}\nfunction swap(orig, v1, v2) {\n    return orig === v1 ? v2 : orig === v2 ? v1 : orig;\n}\nfunction startEnd(v, start, end) {\n    return v === 'start' ? start : v === 'end' ? end : v;\n}\nfunction setInflateAmount(properties, { inflateAmount  }, ratio) {\n    properties.inflateAmount = inflateAmount === 'auto' ? ratio === 1 ? 0.33 : 0 : inflateAmount;\n}\nclass BarController extends DatasetController {\n    static id = 'bar';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'bar',\n        categoryPercentage: 0.8,\n        barPercentage: 0.9,\n        grouped: true,\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'base',\n                    'width',\n                    'height'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category',\n                offset: true,\n                grid: {\n                    offset: true\n                }\n            },\n            _value_: {\n                type: 'linear',\n                beginAtZero: true\n            }\n        }\n    };\n parsePrimitiveData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseArrayData(meta, data, start, count) {\n        return parseArrayOrPrimitive(meta, data, start, count);\n    }\n parseObjectData(meta, data, start, count) {\n        const { iScale , vScale  } = meta;\n        const { xAxisKey ='x' , yAxisKey ='y'  } = this._parsing;\n        const iAxisKey = iScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const vAxisKey = vScale.axis === 'x' ? xAxisKey : yAxisKey;\n        const parsed = [];\n        let i, ilen, item, obj;\n        for(i = start, ilen = start + count; i < ilen; ++i){\n            obj = data[i];\n            item = {};\n            item[iScale.axis] = iScale.parse(resolveObjectKey(obj, iAxisKey), i);\n            parsed.push(parseValue(resolveObjectKey(obj, vAxisKey), item, vScale, i));\n        }\n        return parsed;\n    }\n updateRangeFromParsed(range, scale, parsed, stack) {\n        super.updateRangeFromParsed(range, scale, parsed, stack);\n        const custom = parsed._custom;\n        if (custom && scale === this._cachedMeta.vScale) {\n            range.min = Math.min(range.min, custom.min);\n            range.max = Math.max(range.max, custom.max);\n        }\n    }\n getMaxOverflow() {\n        return 0;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const { iScale , vScale  } = meta;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const value = isFloatBar(custom) ? '[' + custom.start + ', ' + custom.end + ']' : '' + vScale.getLabelForValue(parsed[vScale.axis]);\n        return {\n            label: '' + iScale.getLabelForValue(parsed[iScale.axis]),\n            value\n        };\n    }\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n        const meta = this._cachedMeta;\n        meta.stack = this.getDataset().stack;\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        this.updateElements(meta.data, 0, meta.data.length, mode);\n    }\n    updateElements(bars, start, count, mode) {\n        const reset = mode === 'reset';\n        const { index , _cachedMeta: { vScale  }  } = this;\n        const base = vScale.getBasePixel();\n        const horizontal = vScale.isHorizontal();\n        const ruler = this._getRuler();\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        for(let i = start; i < start + count; i++){\n            const parsed = this.getParsed(i);\n            const vpixels = reset || isNullOrUndef(parsed[vScale.axis]) ? {\n                base,\n                head: base\n            } : this._calculateBarValuePixels(i);\n            const ipixels = this._calculateBarIndexPixels(i, ruler);\n            const stack = (parsed._stacks || {})[vScale.axis];\n            const properties = {\n                horizontal,\n                base: vpixels.base,\n                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,\n                x: horizontal ? vpixels.head : ipixels.center,\n                y: horizontal ? ipixels.center : vpixels.head,\n                height: horizontal ? ipixels.size : Math.abs(vpixels.size),\n                width: horizontal ? Math.abs(vpixels.size) : ipixels.size\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? 'active' : mode);\n            }\n            const options = properties.options || bars[i].options;\n            setBorderSkipped(properties, options, stack, index);\n            setInflateAmount(properties, options, ruler.ratio);\n            this.updateElement(bars[i], i, properties, mode);\n        }\n    }\n _getStacks(last, dataIndex) {\n        const { iScale  } = this._cachedMeta;\n        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);\n        const stacked = iScale.options.stacked;\n        const stacks = [];\n        const currentParsed = this._cachedMeta.controller.getParsed(dataIndex);\n        const iScaleValue = currentParsed && currentParsed[iScale.axis];\n        const skipNull = (meta)=>{\n            const parsed = meta._parsed.find((item)=>item[iScale.axis] === iScaleValue);\n            const val = parsed && parsed[meta.vScale.axis];\n            if (isNullOrUndef(val) || isNaN(val)) {\n                return true;\n            }\n        };\n        for (const meta of metasets){\n            if (dataIndex !== undefined && skipNull(meta)) {\n                continue;\n            }\n            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) {\n                stacks.push(meta.stack);\n            }\n            if (meta.index === last) {\n                break;\n            }\n        }\n        if (!stacks.length) {\n            stacks.push(undefined);\n        }\n        return stacks;\n    }\n _getStackCount(index) {\n        return this._getStacks(undefined, index).length;\n    }\n _getStackIndex(datasetIndex, name, dataIndex) {\n        const stacks = this._getStacks(datasetIndex, dataIndex);\n        const index = name !== undefined ? stacks.indexOf(name) : -1;\n        return index === -1 ? stacks.length - 1 : index;\n    }\n _getRuler() {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const iScale = meta.iScale;\n        const pixels = [];\n        let i, ilen;\n        for(i = 0, ilen = meta.data.length; i < ilen; ++i){\n            pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));\n        }\n        const barThickness = opts.barThickness;\n        const min = barThickness || computeMinSampleSize(meta);\n        return {\n            min,\n            pixels,\n            start: iScale._startPixel,\n            end: iScale._endPixel,\n            stackCount: this._getStackCount(),\n            scale: iScale,\n            grouped: opts.grouped,\n            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage\n        };\n    }\n _calculateBarValuePixels(index) {\n        const { _cachedMeta: { vScale , _stacked , index: datasetIndex  } , options: { base: baseValue , minBarLength  }  } = this;\n        const actualBase = baseValue || 0;\n        const parsed = this.getParsed(index);\n        const custom = parsed._custom;\n        const floating = isFloatBar(custom);\n        let value = parsed[vScale.axis];\n        let start = 0;\n        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;\n        let head, size;\n        if (length !== value) {\n            start = length - value;\n            length = value;\n        }\n        if (floating) {\n            value = custom.barStart;\n            length = custom.barEnd - custom.barStart;\n            if (value !== 0 && sign(value) !== sign(custom.barEnd)) {\n                start = 0;\n            }\n            start += value;\n        }\n        const startValue = !isNullOrUndef(baseValue) && !floating ? baseValue : start;\n        let base = vScale.getPixelForValue(startValue);\n        if (this.chart.getDataVisibility(index)) {\n            head = vScale.getPixelForValue(start + length);\n        } else {\n            head = base;\n        }\n        size = head - base;\n        if (Math.abs(size) < minBarLength) {\n            size = barSign(size, vScale, actualBase) * minBarLength;\n            if (value === actualBase) {\n                base -= size / 2;\n            }\n            const startPixel = vScale.getPixelForDecimal(0);\n            const endPixel = vScale.getPixelForDecimal(1);\n            const min = Math.min(startPixel, endPixel);\n            const max = Math.max(startPixel, endPixel);\n            base = Math.max(Math.min(base, max), min);\n            head = base + size;\n            if (_stacked && !floating) {\n                parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);\n            }\n        }\n        if (base === vScale.getPixelForValue(actualBase)) {\n            const halfGrid = sign(size) * vScale.getLineWidthForValue(actualBase) / 2;\n            base += halfGrid;\n            size -= halfGrid;\n        }\n        return {\n            size,\n            base,\n            head,\n            center: head + size / 2\n        };\n    }\n _calculateBarIndexPixels(index, ruler) {\n        const scale = ruler.scale;\n        const options = this.options;\n        const skipNull = options.skipNull;\n        const maxBarThickness = valueOrDefault(options.maxBarThickness, Infinity);\n        let center, size;\n        if (ruler.grouped) {\n            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;\n            const range = options.barThickness === 'flex' ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);\n            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);\n            center = range.start + range.chunk * stackIndex + range.chunk / 2;\n            size = Math.min(maxBarThickness, range.chunk * range.ratio);\n        } else {\n            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);\n            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);\n        }\n        return {\n            base: center - size / 2,\n            head: center + size / 2,\n            center,\n            size\n        };\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        const vScale = meta.vScale;\n        const rects = meta.data;\n        const ilen = rects.length;\n        let i = 0;\n        for(; i < ilen; ++i){\n            if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) {\n                rects[i].draw(this._ctx);\n            }\n        }\n    }\n}\n\nclass BubbleController extends DatasetController {\n    static id = 'bubble';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'borderWidth',\n                    'radius'\n                ]\n            }\n        }\n    };\n static overrides = {\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        super.initialize();\n    }\n parsePrimitiveData(meta, data, start, count) {\n        const parsed = super.parsePrimitiveData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;\n        }\n        return parsed;\n    }\n parseArrayData(meta, data, start, count) {\n        const parsed = super.parseArrayData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item[2], this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n parseObjectData(meta, data, start, count) {\n        const parsed = super.parseObjectData(meta, data, start, count);\n        for(let i = 0; i < parsed.length; i++){\n            const item = data[start + i];\n            parsed[i]._custom = valueOrDefault(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);\n        }\n        return parsed;\n    }\n getMaxOverflow() {\n        const data = this._cachedMeta.data;\n        let max = 0;\n        for(let i = data.length - 1; i >= 0; --i){\n            max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n        }\n        return max > 0 && max;\n    }\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        const r = parsed._custom;\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + (r ? ', ' + r : '') + ')'\n        };\n    }\n    update(mode) {\n        const points = this._cachedMeta.data;\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const parsed = !reset && this.getParsed(i);\n            const properties = {};\n            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);\n            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel);\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n                if (reset) {\n                    properties.options.radius = 0;\n                }\n            }\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n resolveDataElementOptions(index, mode) {\n        const parsed = this.getParsed(index);\n        let values = super.resolveDataElementOptions(index, mode);\n        if (values.$shared) {\n            values = Object.assign({}, values, {\n                $shared: false\n            });\n        }\n        const radius = values.radius;\n        if (mode !== 'active') {\n            values.radius = 0;\n        }\n        values.radius += valueOrDefault(parsed && parsed._custom, radius);\n        return values;\n    }\n}\n\nfunction getRatioAndOffset(rotation, circumference, cutout) {\n    let ratioX = 1;\n    let ratioY = 1;\n    let offsetX = 0;\n    let offsetY = 0;\n    if (circumference < TAU) {\n        const startAngle = rotation;\n        const endAngle = startAngle + circumference;\n        const startX = Math.cos(startAngle);\n        const startY = Math.sin(startAngle);\n        const endX = Math.cos(endAngle);\n        const endY = Math.sin(endAngle);\n        const calcMax = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);\n        const calcMin = (angle, a, b)=>_angleBetween(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);\n        const maxX = calcMax(0, startX, endX);\n        const maxY = calcMax(HALF_PI, startY, endY);\n        const minX = calcMin(PI, startX, endX);\n        const minY = calcMin(PI + HALF_PI, startY, endY);\n        ratioX = (maxX - minX) / 2;\n        ratioY = (maxY - minY) / 2;\n        offsetX = -(maxX + minX) / 2;\n        offsetY = -(maxY + minY) / 2;\n    }\n    return {\n        ratioX,\n        ratioY,\n        offsetX,\n        offsetY\n    };\n}\nclass DoughnutController extends DatasetController {\n    static id = 'doughnut';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: false\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'circumference',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius',\n                    'startAngle',\n                    'x',\n                    'y',\n                    'offset',\n                    'borderWidth',\n                    'spacing'\n                ]\n            }\n        },\n        cutout: '50%',\n        rotation: 0,\n        circumference: 360,\n        radius: '100%',\n        spacing: 0,\n        indexAxis: 'r'\n    };\n    static descriptors = {\n        _scriptable: (name)=>name !== 'spacing',\n        _indexable: (name)=>name !== 'spacing' && !name.startsWith('borderDash') && !name.startsWith('hoverBorderDash')\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.enableOptionSharing = true;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.offsetX = undefined;\n        this.offsetY = undefined;\n    }\n    linkScales() {}\n parse(start, count) {\n        const data = this.getDataset().data;\n        const meta = this._cachedMeta;\n        if (this._parsing === false) {\n            meta._parsed = data;\n        } else {\n            let getter = (i)=>+data[i];\n            if (isObject(data[start])) {\n                const { key ='value'  } = this._parsing;\n                getter = (i)=>+resolveObjectKey(data[i], key);\n            }\n            let i, ilen;\n            for(i = start, ilen = start + count; i < ilen; ++i){\n                meta._parsed[i] = getter(i);\n            }\n        }\n    }\n _getRotation() {\n        return toRadians(this.options.rotation - 90);\n    }\n _getCircumference() {\n        return toRadians(this.options.circumference);\n    }\n _getRotationExtents() {\n        let min = TAU;\n        let max = -TAU;\n        for(let i = 0; i < this.chart.data.datasets.length; ++i){\n            if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {\n                const controller = this.chart.getDatasetMeta(i).controller;\n                const rotation = controller._getRotation();\n                const circumference = controller._getCircumference();\n                min = Math.min(min, rotation);\n                max = Math.max(max, rotation + circumference);\n            }\n        }\n        return {\n            rotation: min,\n            circumference: max - min\n        };\n    }\n update(mode) {\n        const chart = this.chart;\n        const { chartArea  } = chart;\n        const meta = this._cachedMeta;\n        const arcs = meta.data;\n        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;\n        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);\n        const cutout = Math.min(toPercentage(this.options.cutout, maxSize), 1);\n        const chartWeight = this._getRingWeight(this.index);\n        const { circumference , rotation  } = this._getRotationExtents();\n        const { ratioX , ratioY , offsetX , offsetY  } = getRatioAndOffset(rotation, circumference, cutout);\n        const maxWidth = (chartArea.width - spacing) / ratioX;\n        const maxHeight = (chartArea.height - spacing) / ratioY;\n        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);\n        const outerRadius = toDimension(this.options.radius, maxRadius);\n        const innerRadius = Math.max(outerRadius * cutout, 0);\n        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();\n        this.offsetX = offsetX * outerRadius;\n        this.offsetY = offsetY * outerRadius;\n        meta.total = this.calculateTotal();\n        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);\n        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n _circumference(i, reset) {\n        const opts = this.options;\n        const meta = this._cachedMeta;\n        const circumference = this._getCircumference();\n        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) {\n            return 0;\n        }\n        return this.calculateCircumference(meta._parsed[i] * circumference / TAU);\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const centerX = (chartArea.left + chartArea.right) / 2;\n        const centerY = (chartArea.top + chartArea.bottom) / 2;\n        const animateScale = reset && animationOpts.animateScale;\n        const innerRadius = animateScale ? 0 : this.innerRadius;\n        const outerRadius = animateScale ? 0 : this.outerRadius;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        let startAngle = this._getRotation();\n        let i;\n        for(i = 0; i < start; ++i){\n            startAngle += this._circumference(i, reset);\n        }\n        for(i = start; i < start + count; ++i){\n            const circumference = this._circumference(i, reset);\n            const arc = arcs[i];\n            const properties = {\n                x: centerX + this.offsetX,\n                y: centerY + this.offsetY,\n                startAngle,\n                endAngle: startAngle + circumference,\n                circumference,\n                outerRadius,\n                innerRadius\n            };\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? 'active' : mode);\n            }\n            startAngle += circumference;\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    calculateTotal() {\n        const meta = this._cachedMeta;\n        const metaData = meta.data;\n        let total = 0;\n        let i;\n        for(i = 0; i < metaData.length; i++){\n            const value = meta._parsed[i];\n            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) {\n                total += Math.abs(value);\n            }\n        }\n        return total;\n    }\n    calculateCircumference(value) {\n        const total = this._cachedMeta.total;\n        if (total > 0 && !isNaN(value)) {\n            return TAU * (Math.abs(value) / total);\n        }\n        return 0;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index], chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    getMaxBorderWidth(arcs) {\n        let max = 0;\n        const chart = this.chart;\n        let i, ilen, meta, controller, options;\n        if (!arcs) {\n            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i){\n                if (chart.isDatasetVisible(i)) {\n                    meta = chart.getDatasetMeta(i);\n                    arcs = meta.data;\n                    controller = meta.controller;\n                    break;\n                }\n            }\n        }\n        if (!arcs) {\n            return 0;\n        }\n        for(i = 0, ilen = arcs.length; i < ilen; ++i){\n            options = controller.resolveDataElementOptions(i);\n            if (options.borderAlign !== 'inner') {\n                max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);\n            }\n        }\n        return max;\n    }\n    getMaxOffset(arcs) {\n        let max = 0;\n        for(let i = 0, ilen = arcs.length; i < ilen; ++i){\n            const options = this.resolveDataElementOptions(i);\n            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);\n        }\n        return max;\n    }\n _getRingWeightOffset(datasetIndex) {\n        let ringWeightOffset = 0;\n        for(let i = 0; i < datasetIndex; ++i){\n            if (this.chart.isDatasetVisible(i)) {\n                ringWeightOffset += this._getRingWeight(i);\n            }\n        }\n        return ringWeightOffset;\n    }\n _getRingWeight(datasetIndex) {\n        return Math.max(valueOrDefault(this.chart.data.datasets[datasetIndex].weight, 1), 0);\n    }\n _getVisibleDatasetWeightTotal() {\n        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;\n    }\n}\n\nclass LineController extends DatasetController {\n    static id = 'line';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        showLine: true,\n        spanGaps: false\n    };\n static overrides = {\n        scales: {\n            _index_: {\n                type: 'category'\n            },\n            _value_: {\n                type: 'linear'\n            }\n        }\n    };\n    initialize() {\n        this.enableOptionSharing = true;\n        this.supportsDecimation = true;\n        super.initialize();\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { dataset: line , data: points = [] , _dataset  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        line._chart = this.chart;\n        line._datasetIndex = this.index;\n        line._decimated = !!_dataset._decimated;\n        line.points = points;\n        const options = this.resolveDatasetElementOptions(mode);\n        if (!this.options.showLine) {\n            options.borderWidth = 0;\n        }\n        options.segment = this.options.segment;\n        this.updateElement(line, undefined, {\n            animated: !animationsDisabled,\n            options\n        }, mode);\n        this.updateElements(points, start, count, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const { sharedOptions , includeOptions  } = this._getSharedOptions(start, mode);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        const end = start + count;\n        const pointsCount = points.length;\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = 0; i < pointsCount; ++i){\n            const point = points[i];\n            const properties = directUpdate ? point : {};\n            if (i < start || i >= end) {\n                properties.skip = true;\n                continue;\n            }\n            const parsed = this.getParsed(i);\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        const data = meta.data || [];\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n    draw() {\n        const meta = this._cachedMeta;\n        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);\n        super.draw();\n    }\n}\n\nclass PolarAreaController extends DatasetController {\n    static id = 'polarArea';\n static defaults = {\n        dataElementType: 'arc',\n        animation: {\n            animateRotate: true,\n            animateScale: true\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'startAngle',\n                    'endAngle',\n                    'innerRadius',\n                    'outerRadius'\n                ]\n            }\n        },\n        indexAxis: 'r',\n        startAngle: 0\n    };\n static overrides = {\n        aspectRatio: 1,\n        plugins: {\n            legend: {\n                labels: {\n                    generateLabels (chart) {\n                        const data = chart.data;\n                        if (data.labels.length && data.datasets.length) {\n                            const { labels: { pointStyle , color  }  } = chart.legend.options;\n                            return data.labels.map((label, i)=>{\n                                const meta = chart.getDatasetMeta(0);\n                                const style = meta.controller.getStyle(i);\n                                return {\n                                    text: label,\n                                    fillStyle: style.backgroundColor,\n                                    strokeStyle: style.borderColor,\n                                    fontColor: color,\n                                    lineWidth: style.borderWidth,\n                                    pointStyle: pointStyle,\n                                    hidden: !chart.getDataVisibility(i),\n                                    index: i\n                                };\n                            });\n                        }\n                        return [];\n                    }\n                },\n                onClick (e, legendItem, legend) {\n                    legend.chart.toggleDataVisibility(legendItem.index);\n                    legend.chart.update();\n                }\n            }\n        },\n        scales: {\n            r: {\n                type: 'radialLinear',\n                angleLines: {\n                    display: false\n                },\n                beginAtZero: true,\n                grid: {\n                    circular: true\n                },\n                pointLabels: {\n                    display: false\n                },\n                startAngle: 0\n            }\n        }\n    };\n    constructor(chart, datasetIndex){\n        super(chart, datasetIndex);\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n    }\n    getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const chart = this.chart;\n        const labels = chart.data.labels || [];\n        const value = formatNumber(meta._parsed[index].r, chart.options.locale);\n        return {\n            label: labels[index] || '',\n            value\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const arcs = this._cachedMeta.data;\n        this._updateRadius();\n        this.updateElements(arcs, 0, arcs.length, mode);\n    }\n getMinMax() {\n        const meta = this._cachedMeta;\n        const range = {\n            min: Number.POSITIVE_INFINITY,\n            max: Number.NEGATIVE_INFINITY\n        };\n        meta.data.forEach((element, index)=>{\n            const parsed = this.getParsed(index).r;\n            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {\n                if (parsed < range.min) {\n                    range.min = parsed;\n                }\n                if (parsed > range.max) {\n                    range.max = parsed;\n                }\n            }\n        });\n        return range;\n    }\n _updateRadius() {\n        const chart = this.chart;\n        const chartArea = chart.chartArea;\n        const opts = chart.options;\n        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);\n        const outerRadius = Math.max(minSize / 2, 0);\n        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);\n        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();\n        this.outerRadius = outerRadius - radiusLength * this.index;\n        this.innerRadius = this.outerRadius - radiusLength;\n    }\n    updateElements(arcs, start, count, mode) {\n        const reset = mode === 'reset';\n        const chart = this.chart;\n        const opts = chart.options;\n        const animationOpts = opts.animation;\n        const scale = this._cachedMeta.rScale;\n        const centerX = scale.xCenter;\n        const centerY = scale.yCenter;\n        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * PI;\n        let angle = datasetStartAngle;\n        let i;\n        const defaultAngle = 360 / this.countVisibleElements();\n        for(i = 0; i < start; ++i){\n            angle += this._computeAngle(i, mode, defaultAngle);\n        }\n        for(i = start; i < start + count; i++){\n            const arc = arcs[i];\n            let startAngle = angle;\n            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);\n            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;\n            angle = endAngle;\n            if (reset) {\n                if (animationOpts.animateScale) {\n                    outerRadius = 0;\n                }\n                if (animationOpts.animateRotate) {\n                    startAngle = endAngle = datasetStartAngle;\n                }\n            }\n            const properties = {\n                x: centerX,\n                y: centerY,\n                innerRadius: 0,\n                outerRadius,\n                startAngle,\n                endAngle,\n                options: this.resolveDataElementOptions(i, arc.active ? 'active' : mode)\n            };\n            this.updateElement(arc, i, properties, mode);\n        }\n    }\n    countVisibleElements() {\n        const meta = this._cachedMeta;\n        let count = 0;\n        meta.data.forEach((element, index)=>{\n            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) {\n                count++;\n            }\n        });\n        return count;\n    }\n _computeAngle(index, mode, defaultAngle) {\n        return this.chart.getDataVisibility(index) ? toRadians(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;\n    }\n}\n\nclass PieController extends DoughnutController {\n    static id = 'pie';\n static defaults = {\n        cutout: 0,\n        rotation: 0,\n        circumference: 360,\n        radius: '100%'\n    };\n}\n\nclass RadarController extends DatasetController {\n    static id = 'radar';\n static defaults = {\n        datasetElementType: 'line',\n        dataElementType: 'point',\n        indexAxis: 'r',\n        showLine: true,\n        elements: {\n            line: {\n                fill: 'start'\n            }\n        }\n    };\n static overrides = {\n        aspectRatio: 1,\n        scales: {\n            r: {\n                type: 'radialLinear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const vScale = this._cachedMeta.vScale;\n        const parsed = this.getParsed(index);\n        return {\n            label: vScale.getLabels()[index],\n            value: '' + vScale.getLabelForValue(parsed[vScale.axis])\n        };\n    }\n    parseObjectData(meta, data, start, count) {\n        return _parseObjectDataRadialScale.bind(this)(meta, data, start, count);\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const line = meta.dataset;\n        const points = meta.data || [];\n        const labels = meta.iScale.getLabels();\n        line.points = points;\n        if (mode !== 'resize') {\n            const options = this.resolveDatasetElementOptions(mode);\n            if (!this.options.showLine) {\n                options.borderWidth = 0;\n            }\n            const properties = {\n                _loop: true,\n                _fullLoop: labels.length === points.length,\n                options\n            };\n            this.updateElement(line, undefined, properties, mode);\n        }\n        this.updateElements(points, 0, points.length, mode);\n    }\n    updateElements(points, start, count, mode) {\n        const scale = this._cachedMeta.rScale;\n        const reset = mode === 'reset';\n        for(let i = start; i < start + count; i++){\n            const point = points[i];\n            const options = this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);\n            const x = reset ? scale.xCenter : pointPosition.x;\n            const y = reset ? scale.yCenter : pointPosition.y;\n            const properties = {\n                x,\n                y,\n                angle: pointPosition.angle,\n                skip: isNaN(x) || isNaN(y),\n                options\n            };\n            this.updateElement(point, i, properties, mode);\n        }\n    }\n}\n\nclass ScatterController extends DatasetController {\n    static id = 'scatter';\n static defaults = {\n        datasetElementType: false,\n        dataElementType: 'point',\n        showLine: false,\n        fill: false\n    };\n static overrides = {\n        interaction: {\n            mode: 'point'\n        },\n        scales: {\n            x: {\n                type: 'linear'\n            },\n            y: {\n                type: 'linear'\n            }\n        }\n    };\n getLabelAndValue(index) {\n        const meta = this._cachedMeta;\n        const labels = this.chart.data.labels || [];\n        const { xScale , yScale  } = meta;\n        const parsed = this.getParsed(index);\n        const x = xScale.getLabelForValue(parsed.x);\n        const y = yScale.getLabelForValue(parsed.y);\n        return {\n            label: labels[index] || '',\n            value: '(' + x + ', ' + y + ')'\n        };\n    }\n    update(mode) {\n        const meta = this._cachedMeta;\n        const { data: points = []  } = meta;\n        const animationsDisabled = this.chart._animationsDisabled;\n        let { start , count  } = _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled);\n        this._drawStart = start;\n        this._drawCount = count;\n        if (_scaleRangesChanged(meta)) {\n            start = 0;\n            count = points.length;\n        }\n        if (this.options.showLine) {\n            if (!this.datasetElementType) {\n                this.addElements();\n            }\n            const { dataset: line , _dataset  } = meta;\n            line._chart = this.chart;\n            line._datasetIndex = this.index;\n            line._decimated = !!_dataset._decimated;\n            line.points = points;\n            const options = this.resolveDatasetElementOptions(mode);\n            options.segment = this.options.segment;\n            this.updateElement(line, undefined, {\n                animated: !animationsDisabled,\n                options\n            }, mode);\n        } else if (this.datasetElementType) {\n            delete meta.dataset;\n            this.datasetElementType = false;\n        }\n        this.updateElements(points, start, count, mode);\n    }\n    addElements() {\n        const { showLine  } = this.options;\n        if (!this.datasetElementType && showLine) {\n            this.datasetElementType = this.chart.registry.getElement('line');\n        }\n        super.addElements();\n    }\n    updateElements(points, start, count, mode) {\n        const reset = mode === 'reset';\n        const { iScale , vScale , _stacked , _dataset  } = this._cachedMeta;\n        const firstOpts = this.resolveDataElementOptions(start, mode);\n        const sharedOptions = this.getSharedOptions(firstOpts);\n        const includeOptions = this.includeOptions(mode, sharedOptions);\n        const iAxis = iScale.axis;\n        const vAxis = vScale.axis;\n        const { spanGaps , segment  } = this.options;\n        const maxGapLength = isNumber(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;\n        const directUpdate = this.chart._animationsDisabled || reset || mode === 'none';\n        let prevParsed = start > 0 && this.getParsed(start - 1);\n        for(let i = start; i < start + count; ++i){\n            const point = points[i];\n            const parsed = this.getParsed(i);\n            const properties = directUpdate ? point : {};\n            const nullData = isNullOrUndef(parsed[vAxis]);\n            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);\n            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);\n            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;\n            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;\n            if (segment) {\n                properties.parsed = parsed;\n                properties.raw = _dataset.data[i];\n            }\n            if (includeOptions) {\n                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? 'active' : mode);\n            }\n            if (!directUpdate) {\n                this.updateElement(point, i, properties, mode);\n            }\n            prevParsed = parsed;\n        }\n        this.updateSharedOptions(sharedOptions, mode, firstOpts);\n    }\n getMaxOverflow() {\n        const meta = this._cachedMeta;\n        const data = meta.data || [];\n        if (!this.options.showLine) {\n            let max = 0;\n            for(let i = data.length - 1; i >= 0; --i){\n                max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);\n            }\n            return max > 0 && max;\n        }\n        const dataset = meta.dataset;\n        const border = dataset.options && dataset.options.borderWidth || 0;\n        if (!data.length) {\n            return border;\n        }\n        const firstPoint = data[0].size(this.resolveDataElementOptions(0));\n        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));\n        return Math.max(border, firstPoint, lastPoint) / 2;\n    }\n}\n\nvar controllers = /*#__PURE__*/Object.freeze({\n__proto__: null,\nBarController: BarController,\nBubbleController: BubbleController,\nDoughnutController: DoughnutController,\nLineController: LineController,\nPieController: PieController,\nPolarAreaController: PolarAreaController,\nRadarController: RadarController,\nScatterController: ScatterController\n});\n\n/**\n * @namespace Chart._adapters\n * @since 2.8.0\n * @private\n */ function abstract() {\n    throw new Error('This method is not implemented: Check that a complete date adapter is provided.');\n}\n/**\n * Date adapter (current used by the time scale)\n * @namespace Chart._adapters._date\n * @memberof Chart._adapters\n * @private\n */ class DateAdapterBase {\n    /**\n   * Override default date adapter methods.\n   * Accepts type parameter to define options type.\n   * @example\n   * Chart._adapters._date.override<{myAdapterOption: string}>({\n   *   init() {\n   *     console.log(this.options.myAdapterOption);\n   *   }\n   * })\n   */ static override(members) {\n        Object.assign(DateAdapterBase.prototype, members);\n    }\n    options;\n    constructor(options){\n        this.options = options || {};\n    }\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    init() {}\n    formats() {\n        return abstract();\n    }\n    parse() {\n        return abstract();\n    }\n    format() {\n        return abstract();\n    }\n    add() {\n        return abstract();\n    }\n    diff() {\n        return abstract();\n    }\n    startOf() {\n        return abstract();\n    }\n    endOf() {\n        return abstract();\n    }\n}\nvar adapters = {\n    _date: DateAdapterBase\n};\n\nfunction binarySearch(metaset, axis, value, intersect) {\n    const { controller , data , _sorted  } = metaset;\n    const iScale = controller._cachedMeta.iScale;\n    const spanGaps = metaset.dataset ? metaset.dataset.options ? metaset.dataset.options.spanGaps : null : null;\n    if (iScale && axis === iScale.axis && axis !== 'r' && _sorted && data.length) {\n        const lookupMethod = iScale._reversePixels ? _rlookupByKey : _lookupByKey;\n        if (!intersect) {\n            const result = lookupMethod(data, axis, value);\n            if (spanGaps) {\n                const { vScale  } = controller._cachedMeta;\n                const { _parsed  } = metaset;\n                const distanceToDefinedLo = _parsed.slice(0, result.lo + 1).reverse().findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                result.lo -= Math.max(0, distanceToDefinedLo);\n                const distanceToDefinedHi = _parsed.slice(result.hi).findIndex((point)=>!isNullOrUndef(point[vScale.axis]));\n                result.hi += Math.max(0, distanceToDefinedHi);\n            }\n            return result;\n        } else if (controller._sharedOptions) {\n            const el = data[0];\n            const range = typeof el.getRange === 'function' && el.getRange(axis);\n            if (range) {\n                const start = lookupMethod(data, axis, value - range);\n                const end = lookupMethod(data, axis, value + range);\n                return {\n                    lo: start.lo,\n                    hi: end.hi\n                };\n            }\n        }\n    }\n    return {\n        lo: 0,\n        hi: data.length - 1\n    };\n}\n function evaluateInteractionItems(chart, axis, position, handler, intersect) {\n    const metasets = chart.getSortedVisibleDatasetMetas();\n    const value = position[axis];\n    for(let i = 0, ilen = metasets.length; i < ilen; ++i){\n        const { index , data  } = metasets[i];\n        const { lo , hi  } = binarySearch(metasets[i], axis, value, intersect);\n        for(let j = lo; j <= hi; ++j){\n            const element = data[j];\n            if (!element.skip) {\n                handler(element, index, j);\n            }\n        }\n    }\n}\n function getDistanceMetricForAxis(axis) {\n    const useX = axis.indexOf('x') !== -1;\n    const useY = axis.indexOf('y') !== -1;\n    return function(pt1, pt2) {\n        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;\n        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;\n        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));\n    };\n}\n function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {\n    const items = [];\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return items;\n    }\n    const evaluationFunc = function(element, datasetIndex, index) {\n        if (!includeInvisible && !_isPointInArea(element, chart.chartArea, 0)) {\n            return;\n        }\n        if (element.inRange(position.x, position.y, useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    };\n    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);\n    return items;\n}\n function getNearestRadialItems(chart, position, axis, useFinalPosition) {\n    let items = [];\n    function evaluationFunc(element, datasetIndex, index) {\n        const { startAngle , endAngle  } = element.getProps([\n            'startAngle',\n            'endAngle'\n        ], useFinalPosition);\n        const { angle  } = getAngleFromPoint(element, {\n            x: position.x,\n            y: position.y\n        });\n        if (_angleBetween(angle, startAngle, endAngle)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    let items = [];\n    const distanceMetric = getDistanceMetricForAxis(axis);\n    let minDistance = Number.POSITIVE_INFINITY;\n    function evaluationFunc(element, datasetIndex, index) {\n        const inRange = element.inRange(position.x, position.y, useFinalPosition);\n        if (intersect && !inRange) {\n            return;\n        }\n        const center = element.getCenterPoint(useFinalPosition);\n        const pointInArea = !!includeInvisible || chart.isPointInArea(center);\n        if (!pointInArea && !inRange) {\n            return;\n        }\n        const distance = distanceMetric(position, center);\n        if (distance < minDistance) {\n            items = [\n                {\n                    element,\n                    datasetIndex,\n                    index\n                }\n            ];\n            minDistance = distance;\n        } else if (distance === minDistance) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n        }\n    }\n    evaluateInteractionItems(chart, axis, position, evaluationFunc);\n    return items;\n}\n function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {\n    if (!includeInvisible && !chart.isPointInArea(position)) {\n        return [];\n    }\n    return axis === 'r' && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);\n}\n function getAxisItems(chart, position, axis, intersect, useFinalPosition) {\n    const items = [];\n    const rangeMethod = axis === 'x' ? 'inXRange' : 'inYRange';\n    let intersectsItem = false;\n    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{\n        if (element[rangeMethod] && element[rangeMethod](position[axis], useFinalPosition)) {\n            items.push({\n                element,\n                datasetIndex,\n                index\n            });\n            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);\n        }\n    });\n    if (intersect && !intersectsItem) {\n        return [];\n    }\n    return items;\n}\n var Interaction = {\n    evaluateInteractionItems,\n    modes: {\n index (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'x';\n            const includeInvisible = options.includeInvisible || false;\n            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            const elements = [];\n            if (!items.length) {\n                return [];\n            }\n            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{\n                const index = items[0].index;\n                const element = meta.data[index];\n                if (element && !element.skip) {\n                    elements.push({\n                        element,\n                        datasetIndex: meta.index,\n                        index\n                    });\n                }\n            });\n            return elements;\n        },\n dataset (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);\n            if (items.length > 0) {\n                const datasetIndex = items[0].datasetIndex;\n                const data = chart.getDatasetMeta(datasetIndex).data;\n                items = [];\n                for(let i = 0; i < data.length; ++i){\n                    items.push({\n                        element: data[i],\n                        datasetIndex,\n                        index: i\n                    });\n                }\n            }\n            return items;\n        },\n point (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);\n        },\n nearest (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            const axis = options.axis || 'xy';\n            const includeInvisible = options.includeInvisible || false;\n            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);\n        },\n x (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'x', options.intersect, useFinalPosition);\n        },\n y (chart, e, options, useFinalPosition) {\n            const position = getRelativePosition(e, chart);\n            return getAxisItems(chart, position, 'y', options.intersect, useFinalPosition);\n        }\n    }\n};\n\nconst STATIC_POSITIONS = [\n    'left',\n    'top',\n    'right',\n    'bottom'\n];\nfunction filterByPosition(array, position) {\n    return array.filter((v)=>v.pos === position);\n}\nfunction filterDynamicPositionByAxis(array, axis) {\n    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);\n}\nfunction sortByWeight(array, reverse) {\n    return array.sort((a, b)=>{\n        const v0 = reverse ? b : a;\n        const v1 = reverse ? a : b;\n        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;\n    });\n}\nfunction wrapBoxes(boxes) {\n    const layoutBoxes = [];\n    let i, ilen, box, pos, stack, stackWeight;\n    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){\n        box = boxes[i];\n        ({ position: pos , options: { stack , stackWeight =1  }  } = box);\n        layoutBoxes.push({\n            index: i,\n            box,\n            pos,\n            horizontal: box.isHorizontal(),\n            weight: box.weight,\n            stack: stack && pos + stack,\n            stackWeight\n        });\n    }\n    return layoutBoxes;\n}\nfunction buildStacks(layouts) {\n    const stacks = {};\n    for (const wrap of layouts){\n        const { stack , pos , stackWeight  } = wrap;\n        if (!stack || !STATIC_POSITIONS.includes(pos)) {\n            continue;\n        }\n        const _stack = stacks[stack] || (stacks[stack] = {\n            count: 0,\n            placed: 0,\n            weight: 0,\n            size: 0\n        });\n        _stack.count++;\n        _stack.weight += stackWeight;\n    }\n    return stacks;\n}\n function setLayoutDims(layouts, params) {\n    const stacks = buildStacks(layouts);\n    const { vBoxMaxWidth , hBoxMaxHeight  } = params;\n    let i, ilen, layout;\n    for(i = 0, ilen = layouts.length; i < ilen; ++i){\n        layout = layouts[i];\n        const { fullSize  } = layout.box;\n        const stack = stacks[layout.stack];\n        const factor = stack && layout.stackWeight / stack.weight;\n        if (layout.horizontal) {\n            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;\n            layout.height = hBoxMaxHeight;\n        } else {\n            layout.width = vBoxMaxWidth;\n            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;\n        }\n    }\n    return stacks;\n}\nfunction buildLayoutBoxes(boxes) {\n    const layoutBoxes = wrapBoxes(boxes);\n    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);\n    const left = sortByWeight(filterByPosition(layoutBoxes, 'left'), true);\n    const right = sortByWeight(filterByPosition(layoutBoxes, 'right'));\n    const top = sortByWeight(filterByPosition(layoutBoxes, 'top'), true);\n    const bottom = sortByWeight(filterByPosition(layoutBoxes, 'bottom'));\n    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, 'x');\n    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, 'y');\n    return {\n        fullSize,\n        leftAndTop: left.concat(top),\n        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),\n        chartArea: filterByPosition(layoutBoxes, 'chartArea'),\n        vertical: left.concat(right).concat(centerVertical),\n        horizontal: top.concat(bottom).concat(centerHorizontal)\n    };\n}\nfunction getCombinedMax(maxPadding, chartArea, a, b) {\n    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);\n}\nfunction updateMaxPadding(maxPadding, boxPadding) {\n    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);\n    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);\n    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);\n    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);\n}\nfunction updateDims(chartArea, params, layout, stacks) {\n    const { pos , box  } = layout;\n    const maxPadding = chartArea.maxPadding;\n    if (!isObject(pos)) {\n        if (layout.size) {\n            chartArea[pos] -= layout.size;\n        }\n        const stack = stacks[layout.stack] || {\n            size: 0,\n            count: 1\n        };\n        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);\n        layout.size = stack.size / stack.count;\n        chartArea[pos] += layout.size;\n    }\n    if (box.getPadding) {\n        updateMaxPadding(maxPadding, box.getPadding());\n    }\n    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, 'left', 'right'));\n    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, 'top', 'bottom'));\n    const widthChanged = newWidth !== chartArea.w;\n    const heightChanged = newHeight !== chartArea.h;\n    chartArea.w = newWidth;\n    chartArea.h = newHeight;\n    return layout.horizontal ? {\n        same: widthChanged,\n        other: heightChanged\n    } : {\n        same: heightChanged,\n        other: widthChanged\n    };\n}\nfunction handleMaxPadding(chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function updatePos(pos) {\n        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);\n        chartArea[pos] += change;\n        return change;\n    }\n    chartArea.y += updatePos('top');\n    chartArea.x += updatePos('left');\n    updatePos('right');\n    updatePos('bottom');\n}\nfunction getMargins(horizontal, chartArea) {\n    const maxPadding = chartArea.maxPadding;\n    function marginForPositions(positions) {\n        const margin = {\n            left: 0,\n            top: 0,\n            right: 0,\n            bottom: 0\n        };\n        positions.forEach((pos)=>{\n            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);\n        });\n        return margin;\n    }\n    return horizontal ? marginForPositions([\n        'left',\n        'right'\n    ]) : marginForPositions([\n        'top',\n        'bottom'\n    ]);\n}\nfunction fitBoxes(boxes, chartArea, params, stacks) {\n    const refitBoxes = [];\n    let i, ilen, layout, box, refit, changed;\n    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){\n        layout = boxes[i];\n        box = layout.box;\n        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));\n        const { same , other  } = updateDims(chartArea, params, layout, stacks);\n        refit |= same && refitBoxes.length;\n        changed = changed || other;\n        if (!box.fullSize) {\n            refitBoxes.push(layout);\n        }\n    }\n    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;\n}\nfunction setBoxDims(box, left, top, width, height) {\n    box.top = top;\n    box.left = left;\n    box.right = left + width;\n    box.bottom = top + height;\n    box.width = width;\n    box.height = height;\n}\nfunction placeBoxes(boxes, chartArea, params, stacks) {\n    const userPadding = params.padding;\n    let { x , y  } = chartArea;\n    for (const layout of boxes){\n        const box = layout.box;\n        const stack = stacks[layout.stack] || {\n            count: 1,\n            placed: 0,\n            weight: 1\n        };\n        const weight = layout.stackWeight / stack.weight || 1;\n        if (layout.horizontal) {\n            const width = chartArea.w * weight;\n            const height = stack.size || box.height;\n            if (defined(stack.start)) {\n                y = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);\n            } else {\n                setBoxDims(box, chartArea.left + stack.placed, y, width, height);\n            }\n            stack.start = y;\n            stack.placed += width;\n            y = box.bottom;\n        } else {\n            const height = chartArea.h * weight;\n            const width = stack.size || box.width;\n            if (defined(stack.start)) {\n                x = stack.start;\n            }\n            if (box.fullSize) {\n                setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);\n            } else {\n                setBoxDims(box, x, chartArea.top + stack.placed, width, height);\n            }\n            stack.start = x;\n            stack.placed += height;\n            x = box.right;\n        }\n    }\n    chartArea.x = x;\n    chartArea.y = y;\n}\nvar layouts = {\n addBox (chart, item) {\n        if (!chart.boxes) {\n            chart.boxes = [];\n        }\n        item.fullSize = item.fullSize || false;\n        item.position = item.position || 'top';\n        item.weight = item.weight || 0;\n        item._layers = item._layers || function() {\n            return [\n                {\n                    z: 0,\n                    draw (chartArea) {\n                        item.draw(chartArea);\n                    }\n                }\n            ];\n        };\n        chart.boxes.push(item);\n    },\n removeBox (chart, layoutItem) {\n        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;\n        if (index !== -1) {\n            chart.boxes.splice(index, 1);\n        }\n    },\n configure (chart, item, options) {\n        item.fullSize = options.fullSize;\n        item.position = options.position;\n        item.weight = options.weight;\n    },\n update (chart, width, height, minPadding) {\n        if (!chart) {\n            return;\n        }\n        const padding = toPadding(chart.options.layout.padding);\n        const availableWidth = Math.max(width - padding.width, 0);\n        const availableHeight = Math.max(height - padding.height, 0);\n        const boxes = buildLayoutBoxes(chart.boxes);\n        const verticalBoxes = boxes.vertical;\n        const horizontalBoxes = boxes.horizontal;\n        each(chart.boxes, (box)=>{\n            if (typeof box.beforeLayout === 'function') {\n                box.beforeLayout();\n            }\n        });\n        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;\n        const params = Object.freeze({\n            outerWidth: width,\n            outerHeight: height,\n            padding,\n            availableWidth,\n            availableHeight,\n            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,\n            hBoxMaxHeight: availableHeight / 2\n        });\n        const maxPadding = Object.assign({}, padding);\n        updateMaxPadding(maxPadding, toPadding(minPadding));\n        const chartArea = Object.assign({\n            maxPadding,\n            w: availableWidth,\n            h: availableHeight,\n            x: padding.left,\n            y: padding.top\n        }, padding);\n        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);\n        fitBoxes(boxes.fullSize, chartArea, params, stacks);\n        fitBoxes(verticalBoxes, chartArea, params, stacks);\n        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) {\n            fitBoxes(verticalBoxes, chartArea, params, stacks);\n        }\n        handleMaxPadding(chartArea);\n        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);\n        chartArea.x += chartArea.w;\n        chartArea.y += chartArea.h;\n        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);\n        chart.chartArea = {\n            left: chartArea.left,\n            top: chartArea.top,\n            right: chartArea.left + chartArea.w,\n            bottom: chartArea.top + chartArea.h,\n            height: chartArea.h,\n            width: chartArea.w\n        };\n        each(boxes.chartArea, (layout)=>{\n            const box = layout.box;\n            Object.assign(box, chart.chartArea);\n            box.update(chartArea.w, chartArea.h, {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            });\n        });\n    }\n};\n\nclass BasePlatform {\n acquireContext(canvas, aspectRatio) {}\n releaseContext(context) {\n        return false;\n    }\n addEventListener(chart, type, listener) {}\n removeEventListener(chart, type, listener) {}\n getDevicePixelRatio() {\n        return 1;\n    }\n getMaximumSize(element, width, height, aspectRatio) {\n        width = Math.max(0, width || element.width);\n        height = height || element.height;\n        return {\n            width,\n            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)\n        };\n    }\n isAttached(canvas) {\n        return true;\n    }\n updateConfig(config) {\n    }\n}\n\nclass BasicPlatform extends BasePlatform {\n    acquireContext(item) {\n        return item && item.getContext && item.getContext('2d') || null;\n    }\n    updateConfig(config) {\n        config.options.animation = false;\n    }\n}\n\nconst EXPANDO_KEY = '$chartjs';\n const EVENT_TYPES = {\n    touchstart: 'mousedown',\n    touchmove: 'mousemove',\n    touchend: 'mouseup',\n    pointerenter: 'mouseenter',\n    pointerdown: 'mousedown',\n    pointermove: 'mousemove',\n    pointerup: 'mouseup',\n    pointerleave: 'mouseout',\n    pointerout: 'mouseout'\n};\nconst isNullOrEmpty = (value)=>value === null || value === '';\n function initCanvas(canvas, aspectRatio) {\n    const style = canvas.style;\n    const renderHeight = canvas.getAttribute('height');\n    const renderWidth = canvas.getAttribute('width');\n    canvas[EXPANDO_KEY] = {\n        initial: {\n            height: renderHeight,\n            width: renderWidth,\n            style: {\n                display: style.display,\n                height: style.height,\n                width: style.width\n            }\n        }\n    };\n    style.display = style.display || 'block';\n    style.boxSizing = style.boxSizing || 'border-box';\n    if (isNullOrEmpty(renderWidth)) {\n        const displayWidth = readUsedSize(canvas, 'width');\n        if (displayWidth !== undefined) {\n            canvas.width = displayWidth;\n        }\n    }\n    if (isNullOrEmpty(renderHeight)) {\n        if (canvas.style.height === '') {\n            canvas.height = canvas.width / (aspectRatio || 2);\n        } else {\n            const displayHeight = readUsedSize(canvas, 'height');\n            if (displayHeight !== undefined) {\n                canvas.height = displayHeight;\n            }\n        }\n    }\n    return canvas;\n}\nconst eventListenerOptions = supportsEventListenerOptions ? {\n    passive: true\n} : false;\nfunction addListener(node, type, listener) {\n    if (node) {\n        node.addEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction removeListener(chart, type, listener) {\n    if (chart && chart.canvas) {\n        chart.canvas.removeEventListener(type, listener, eventListenerOptions);\n    }\n}\nfunction fromNativeEvent(event, chart) {\n    const type = EVENT_TYPES[event.type] || event.type;\n    const { x , y  } = getRelativePosition(event, chart);\n    return {\n        type,\n        chart,\n        native: event,\n        x: x !== undefined ? x : null,\n        y: y !== undefined ? y : null\n    };\n}\nfunction nodeListContains(nodeList, canvas) {\n    for (const node of nodeList){\n        if (node === canvas || node.contains(canvas)) {\n            return true;\n        }\n    }\n}\nfunction createAttachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.addedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nfunction createDetachObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const observer = new MutationObserver((entries)=>{\n        let trigger = false;\n        for (const entry of entries){\n            trigger = trigger || nodeListContains(entry.removedNodes, canvas);\n            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);\n        }\n        if (trigger) {\n            listener();\n        }\n    });\n    observer.observe(document, {\n        childList: true,\n        subtree: true\n    });\n    return observer;\n}\nconst drpListeningCharts = new Map();\nlet oldDevicePixelRatio = 0;\nfunction onWindowResize() {\n    const dpr = window.devicePixelRatio;\n    if (dpr === oldDevicePixelRatio) {\n        return;\n    }\n    oldDevicePixelRatio = dpr;\n    drpListeningCharts.forEach((resize, chart)=>{\n        if (chart.currentDevicePixelRatio !== dpr) {\n            resize();\n        }\n    });\n}\nfunction listenDevicePixelRatioChanges(chart, resize) {\n    if (!drpListeningCharts.size) {\n        window.addEventListener('resize', onWindowResize);\n    }\n    drpListeningCharts.set(chart, resize);\n}\nfunction unlistenDevicePixelRatioChanges(chart) {\n    drpListeningCharts.delete(chart);\n    if (!drpListeningCharts.size) {\n        window.removeEventListener('resize', onWindowResize);\n    }\n}\nfunction createResizeObserver(chart, type, listener) {\n    const canvas = chart.canvas;\n    const container = canvas && _getParentNode(canvas);\n    if (!container) {\n        return;\n    }\n    const resize = throttled((width, height)=>{\n        const w = container.clientWidth;\n        listener(width, height);\n        if (w < container.clientWidth) {\n            listener();\n        }\n    }, window);\n    const observer = new ResizeObserver((entries)=>{\n        const entry = entries[0];\n        const width = entry.contentRect.width;\n        const height = entry.contentRect.height;\n        if (width === 0 && height === 0) {\n            return;\n        }\n        resize(width, height);\n    });\n    observer.observe(container);\n    listenDevicePixelRatioChanges(chart, resize);\n    return observer;\n}\nfunction releaseObserver(chart, type, observer) {\n    if (observer) {\n        observer.disconnect();\n    }\n    if (type === 'resize') {\n        unlistenDevicePixelRatioChanges(chart);\n    }\n}\nfunction createProxyAndListen(chart, type, listener) {\n    const canvas = chart.canvas;\n    const proxy = throttled((event)=>{\n        if (chart.ctx !== null) {\n            listener(fromNativeEvent(event, chart));\n        }\n    }, chart);\n    addListener(canvas, type, proxy);\n    return proxy;\n}\n class DomPlatform extends BasePlatform {\n acquireContext(canvas, aspectRatio) {\n        const context = canvas && canvas.getContext && canvas.getContext('2d');\n        if (context && context.canvas === canvas) {\n            initCanvas(canvas, aspectRatio);\n            return context;\n        }\n        return null;\n    }\n releaseContext(context) {\n        const canvas = context.canvas;\n        if (!canvas[EXPANDO_KEY]) {\n            return false;\n        }\n        const initial = canvas[EXPANDO_KEY].initial;\n        [\n            'height',\n            'width'\n        ].forEach((prop)=>{\n            const value = initial[prop];\n            if (isNullOrUndef(value)) {\n                canvas.removeAttribute(prop);\n            } else {\n                canvas.setAttribute(prop, value);\n            }\n        });\n        const style = initial.style || {};\n        Object.keys(style).forEach((key)=>{\n            canvas.style[key] = style[key];\n        });\n        canvas.width = canvas.width;\n        delete canvas[EXPANDO_KEY];\n        return true;\n    }\n addEventListener(chart, type, listener) {\n        this.removeEventListener(chart, type);\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const handlers = {\n            attach: createAttachObserver,\n            detach: createDetachObserver,\n            resize: createResizeObserver\n        };\n        const handler = handlers[type] || createProxyAndListen;\n        proxies[type] = handler(chart, type, listener);\n    }\n removeEventListener(chart, type) {\n        const proxies = chart.$proxies || (chart.$proxies = {});\n        const proxy = proxies[type];\n        if (!proxy) {\n            return;\n        }\n        const handlers = {\n            attach: releaseObserver,\n            detach: releaseObserver,\n            resize: releaseObserver\n        };\n        const handler = handlers[type] || removeListener;\n        handler(chart, type, proxy);\n        proxies[type] = undefined;\n    }\n    getDevicePixelRatio() {\n        return window.devicePixelRatio;\n    }\n getMaximumSize(canvas, width, height, aspectRatio) {\n        return getMaximumSize(canvas, width, height, aspectRatio);\n    }\n isAttached(canvas) {\n        const container = canvas && _getParentNode(canvas);\n        return !!(container && container.isConnected);\n    }\n}\n\nfunction _detectPlatform(canvas) {\n    if (!_isDomSupported() || typeof OffscreenCanvas !== 'undefined' && canvas instanceof OffscreenCanvas) {\n        return BasicPlatform;\n    }\n    return DomPlatform;\n}\n\nclass Element {\n    static defaults = {};\n    static defaultRoutes = undefined;\n    x;\n    y;\n    active = false;\n    options;\n    $animations;\n    tooltipPosition(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    hasValue() {\n        return isNumber(this.x) && isNumber(this.y);\n    }\n    getProps(props, final) {\n        const anims = this.$animations;\n        if (!final || !anims) {\n            // let's not create an object, if not needed\n            return this;\n        }\n        const ret = {};\n        props.forEach((prop)=>{\n            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];\n        });\n        return ret;\n    }\n}\n\nfunction autoSkip(scale, ticks) {\n    const tickOpts = scale.options.ticks;\n    const determinedMaxTicks = determineMaxTicks(scale);\n    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);\n    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];\n    const numMajorIndices = majorIndices.length;\n    const first = majorIndices[0];\n    const last = majorIndices[numMajorIndices - 1];\n    const newTicks = [];\n    if (numMajorIndices > ticksLimit) {\n        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);\n        return newTicks;\n    }\n    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);\n    if (numMajorIndices > 0) {\n        let i, ilen;\n        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;\n        skip(ticks, newTicks, spacing, isNullOrUndef(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);\n        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++){\n            skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);\n        }\n        skip(ticks, newTicks, spacing, last, isNullOrUndef(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);\n        return newTicks;\n    }\n    skip(ticks, newTicks, spacing);\n    return newTicks;\n}\nfunction determineMaxTicks(scale) {\n    const offset = scale.options.offset;\n    const tickLength = scale._tickSize();\n    const maxScale = scale._length / tickLength + (offset ? 0 : 1);\n    const maxChart = scale._maxLength / tickLength;\n    return Math.floor(Math.min(maxScale, maxChart));\n}\n function calculateSpacing(majorIndices, ticks, ticksLimit) {\n    const evenMajorSpacing = getEvenSpacing(majorIndices);\n    const spacing = ticks.length / ticksLimit;\n    if (!evenMajorSpacing) {\n        return Math.max(spacing, 1);\n    }\n    const factors = _factorize(evenMajorSpacing);\n    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){\n        const factor = factors[i];\n        if (factor > spacing) {\n            return factor;\n        }\n    }\n    return Math.max(spacing, 1);\n}\n function getMajorIndices(ticks) {\n    const result = [];\n    let i, ilen;\n    for(i = 0, ilen = ticks.length; i < ilen; i++){\n        if (ticks[i].major) {\n            result.push(i);\n        }\n    }\n    return result;\n}\n function skipMajors(ticks, newTicks, majorIndices, spacing) {\n    let count = 0;\n    let next = majorIndices[0];\n    let i;\n    spacing = Math.ceil(spacing);\n    for(i = 0; i < ticks.length; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = majorIndices[count * spacing];\n        }\n    }\n}\n function skip(ticks, newTicks, spacing, majorStart, majorEnd) {\n    const start = valueOrDefault(majorStart, 0);\n    const end = Math.min(valueOrDefault(majorEnd, ticks.length), ticks.length);\n    let count = 0;\n    let length, i, next;\n    spacing = Math.ceil(spacing);\n    if (majorEnd) {\n        length = majorEnd - majorStart;\n        spacing = length / Math.floor(length / spacing);\n    }\n    next = start;\n    while(next < 0){\n        count++;\n        next = Math.round(start + count * spacing);\n    }\n    for(i = Math.max(start, 0); i < end; i++){\n        if (i === next) {\n            newTicks.push(ticks[i]);\n            count++;\n            next = Math.round(start + count * spacing);\n        }\n    }\n}\n function getEvenSpacing(arr) {\n    const len = arr.length;\n    let i, diff;\n    if (len < 2) {\n        return false;\n    }\n    for(diff = arr[0], i = 1; i < len; ++i){\n        if (arr[i] - arr[i - 1] !== diff) {\n            return false;\n        }\n    }\n    return diff;\n}\n\nconst reverseAlign = (align)=>align === 'left' ? 'right' : align === 'right' ? 'left' : align;\nconst offsetFromEdge = (scale, edge, offset)=>edge === 'top' || edge === 'left' ? scale[edge] + offset : scale[edge] - offset;\nconst getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);\n function sample(arr, numItems) {\n    const result = [];\n    const increment = arr.length / numItems;\n    const len = arr.length;\n    let i = 0;\n    for(; i < len; i += increment){\n        result.push(arr[Math.floor(i)]);\n    }\n    return result;\n}\n function getPixelForGridLine(scale, index, offsetGridLines) {\n    const length = scale.ticks.length;\n    const validIndex = Math.min(index, length - 1);\n    const start = scale._startPixel;\n    const end = scale._endPixel;\n    const epsilon = 1e-6;\n    let lineValue = scale.getPixelForTick(validIndex);\n    let offset;\n    if (offsetGridLines) {\n        if (length === 1) {\n            offset = Math.max(lineValue - start, end - lineValue);\n        } else if (index === 0) {\n            offset = (scale.getPixelForTick(1) - lineValue) / 2;\n        } else {\n            offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;\n        }\n        lineValue += validIndex < index ? offset : -offset;\n        if (lineValue < start - epsilon || lineValue > end + epsilon) {\n            return;\n        }\n    }\n    return lineValue;\n}\n function garbageCollect(caches, length) {\n    each(caches, (cache)=>{\n        const gc = cache.gc;\n        const gcLen = gc.length / 2;\n        let i;\n        if (gcLen > length) {\n            for(i = 0; i < gcLen; ++i){\n                delete cache.data[gc[i]];\n            }\n            gc.splice(0, gcLen);\n        }\n    });\n}\n function getTickMarkLength(options) {\n    return options.drawTicks ? options.tickLength : 0;\n}\n function getTitleHeight(options, fallback) {\n    if (!options.display) {\n        return 0;\n    }\n    const font = toFont(options.font, fallback);\n    const padding = toPadding(options.padding);\n    const lines = isArray(options.text) ? options.text.length : 1;\n    return lines * font.lineHeight + padding.height;\n}\nfunction createScaleContext(parent, scale) {\n    return createContext(parent, {\n        scale,\n        type: 'scale'\n    });\n}\nfunction createTickContext(parent, index, tick) {\n    return createContext(parent, {\n        tick,\n        index,\n        type: 'tick'\n    });\n}\nfunction titleAlign(align, position, reverse) {\n     let ret = _toLeftRightCenter(align);\n    if (reverse && position !== 'right' || !reverse && position === 'right') {\n        ret = reverseAlign(ret);\n    }\n    return ret;\n}\nfunction titleArgs(scale, offset, position, align) {\n    const { top , left , bottom , right , chart  } = scale;\n    const { chartArea , scales  } = chart;\n    let rotation = 0;\n    let maxWidth, titleX, titleY;\n    const height = bottom - top;\n    const width = right - left;\n    if (scale.isHorizontal()) {\n        titleX = _alignStartEnd(align, left, right);\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;\n        } else if (position === 'center') {\n            titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;\n        } else {\n            titleY = offsetFromEdge(scale, position, offset);\n        }\n        maxWidth = right - left;\n    } else {\n        if (isObject(position)) {\n            const positionAxisID = Object.keys(position)[0];\n            const value = position[positionAxisID];\n            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;\n        } else if (position === 'center') {\n            titleX = (chartArea.left + chartArea.right) / 2 - width + offset;\n        } else {\n            titleX = offsetFromEdge(scale, position, offset);\n        }\n        titleY = _alignStartEnd(align, bottom, top);\n        rotation = position === 'left' ? -HALF_PI : HALF_PI;\n    }\n    return {\n        titleX,\n        titleY,\n        maxWidth,\n        rotation\n    };\n}\nclass Scale extends Element {\n    constructor(cfg){\n        super();\n         this.id = cfg.id;\n         this.type = cfg.type;\n         this.options = undefined;\n         this.ctx = cfg.ctx;\n         this.chart = cfg.chart;\n         this.top = undefined;\n         this.bottom = undefined;\n         this.left = undefined;\n         this.right = undefined;\n         this.width = undefined;\n         this.height = undefined;\n        this._margins = {\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        };\n         this.maxWidth = undefined;\n         this.maxHeight = undefined;\n         this.paddingTop = undefined;\n         this.paddingBottom = undefined;\n         this.paddingLeft = undefined;\n         this.paddingRight = undefined;\n         this.axis = undefined;\n         this.labelRotation = undefined;\n        this.min = undefined;\n        this.max = undefined;\n        this._range = undefined;\n         this.ticks = [];\n         this._gridLineItems = null;\n         this._labelItems = null;\n         this._labelSizes = null;\n        this._length = 0;\n        this._maxLength = 0;\n        this._longestTextCache = {};\n         this._startPixel = undefined;\n         this._endPixel = undefined;\n        this._reversePixels = false;\n        this._userMax = undefined;\n        this._userMin = undefined;\n        this._suggestedMax = undefined;\n        this._suggestedMin = undefined;\n        this._ticksLength = 0;\n        this._borderValue = 0;\n        this._cache = {};\n        this._dataLimitsCached = false;\n        this.$context = undefined;\n    }\n init(options) {\n        this.options = options.setContext(this.getContext());\n        this.axis = options.axis;\n        this._userMin = this.parse(options.min);\n        this._userMax = this.parse(options.max);\n        this._suggestedMin = this.parse(options.suggestedMin);\n        this._suggestedMax = this.parse(options.suggestedMax);\n    }\n parse(raw, index) {\n        return raw;\n    }\n getUserBounds() {\n        let { _userMin , _userMax , _suggestedMin , _suggestedMax  } = this;\n        _userMin = finiteOrDefault(_userMin, Number.POSITIVE_INFINITY);\n        _userMax = finiteOrDefault(_userMax, Number.NEGATIVE_INFINITY);\n        _suggestedMin = finiteOrDefault(_suggestedMin, Number.POSITIVE_INFINITY);\n        _suggestedMax = finiteOrDefault(_suggestedMax, Number.NEGATIVE_INFINITY);\n        return {\n            min: finiteOrDefault(_userMin, _suggestedMin),\n            max: finiteOrDefault(_userMax, _suggestedMax),\n            minDefined: isNumberFinite(_userMin),\n            maxDefined: isNumberFinite(_userMax)\n        };\n    }\n getMinMax(canStack) {\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n        let range;\n        if (minDefined && maxDefined) {\n            return {\n                min,\n                max\n            };\n        }\n        const metas = this.getMatchingVisibleMetas();\n        for(let i = 0, ilen = metas.length; i < ilen; ++i){\n            range = metas[i].controller.getMinMax(this, canStack);\n            if (!minDefined) {\n                min = Math.min(min, range.min);\n            }\n            if (!maxDefined) {\n                max = Math.max(max, range.max);\n            }\n        }\n        min = maxDefined && min > max ? max : min;\n        max = minDefined && min > max ? min : max;\n        return {\n            min: finiteOrDefault(min, finiteOrDefault(max, min)),\n            max: finiteOrDefault(max, finiteOrDefault(min, max))\n        };\n    }\n getPadding() {\n        return {\n            left: this.paddingLeft || 0,\n            top: this.paddingTop || 0,\n            right: this.paddingRight || 0,\n            bottom: this.paddingBottom || 0\n        };\n    }\n getTicks() {\n        return this.ticks;\n    }\n getLabels() {\n        const data = this.chart.data;\n        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];\n    }\n getLabelItems(chartArea = this.chart.chartArea) {\n        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));\n        return items;\n    }\n    beforeLayout() {\n        this._cache = {};\n        this._dataLimitsCached = false;\n    }\n    beforeUpdate() {\n        callback(this.options.beforeUpdate, [\n            this\n        ]);\n    }\n update(maxWidth, maxHeight, margins) {\n        const { beginAtZero , grace , ticks: tickOpts  } = this.options;\n        const sampleSize = tickOpts.sampleSize;\n        this.beforeUpdate();\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins = Object.assign({\n            left: 0,\n            right: 0,\n            top: 0,\n            bottom: 0\n        }, margins);\n        this.ticks = null;\n        this._labelSizes = null;\n        this._gridLineItems = null;\n        this._labelItems = null;\n        this.beforeSetDimensions();\n        this.setDimensions();\n        this.afterSetDimensions();\n        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;\n        if (!this._dataLimitsCached) {\n            this.beforeDataLimits();\n            this.determineDataLimits();\n            this.afterDataLimits();\n            this._range = _addGrace(this, grace, beginAtZero);\n            this._dataLimitsCached = true;\n        }\n        this.beforeBuildTicks();\n        this.ticks = this.buildTicks() || [];\n        this.afterBuildTicks();\n        const samplingEnabled = sampleSize < this.ticks.length;\n        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);\n        this.configure();\n        this.beforeCalculateLabelRotation();\n        this.calculateLabelRotation();\n        this.afterCalculateLabelRotation();\n        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === 'auto')) {\n            this.ticks = autoSkip(this, this.ticks);\n            this._labelSizes = null;\n            this.afterAutoSkip();\n        }\n        if (samplingEnabled) {\n            this._convertTicksToLabels(this.ticks);\n        }\n        this.beforeFit();\n        this.fit();\n        this.afterFit();\n        this.afterUpdate();\n    }\n configure() {\n        let reversePixels = this.options.reverse;\n        let startPixel, endPixel;\n        if (this.isHorizontal()) {\n            startPixel = this.left;\n            endPixel = this.right;\n        } else {\n            startPixel = this.top;\n            endPixel = this.bottom;\n            reversePixels = !reversePixels;\n        }\n        this._startPixel = startPixel;\n        this._endPixel = endPixel;\n        this._reversePixels = reversePixels;\n        this._length = endPixel - startPixel;\n        this._alignToPixels = this.options.alignToPixels;\n    }\n    afterUpdate() {\n        callback(this.options.afterUpdate, [\n            this\n        ]);\n    }\n    beforeSetDimensions() {\n        callback(this.options.beforeSetDimensions, [\n            this\n        ]);\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = 0;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = 0;\n            this.bottom = this.height;\n        }\n        this.paddingLeft = 0;\n        this.paddingTop = 0;\n        this.paddingRight = 0;\n        this.paddingBottom = 0;\n    }\n    afterSetDimensions() {\n        callback(this.options.afterSetDimensions, [\n            this\n        ]);\n    }\n    _callHooks(name) {\n        this.chart.notifyPlugins(name, this.getContext());\n        callback(this.options[name], [\n            this\n        ]);\n    }\n    beforeDataLimits() {\n        this._callHooks('beforeDataLimits');\n    }\n    determineDataLimits() {}\n    afterDataLimits() {\n        this._callHooks('afterDataLimits');\n    }\n    beforeBuildTicks() {\n        this._callHooks('beforeBuildTicks');\n    }\n buildTicks() {\n        return [];\n    }\n    afterBuildTicks() {\n        this._callHooks('afterBuildTicks');\n    }\n    beforeTickToLabelConversion() {\n        callback(this.options.beforeTickToLabelConversion, [\n            this\n        ]);\n    }\n generateTickLabels(ticks) {\n        const tickOpts = this.options.ticks;\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            tick = ticks[i];\n            tick.label = callback(tickOpts.callback, [\n                tick.value,\n                i,\n                ticks\n            ], this);\n        }\n    }\n    afterTickToLabelConversion() {\n        callback(this.options.afterTickToLabelConversion, [\n            this\n        ]);\n    }\n    beforeCalculateLabelRotation() {\n        callback(this.options.beforeCalculateLabelRotation, [\n            this\n        ]);\n    }\n    calculateLabelRotation() {\n        const options = this.options;\n        const tickOpts = options.ticks;\n        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);\n        const minRotation = tickOpts.minRotation || 0;\n        const maxRotation = tickOpts.maxRotation;\n        let labelRotation = minRotation;\n        let tickWidth, maxHeight, maxLabelDiagonal;\n        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {\n            this.labelRotation = minRotation;\n            return;\n        }\n        const labelSizes = this._getLabelSizes();\n        const maxLabelWidth = labelSizes.widest.width;\n        const maxLabelHeight = labelSizes.highest.height;\n        const maxWidth = _limitValue(this.chart.width - maxLabelWidth, 0, this.maxWidth);\n        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);\n        if (maxLabelWidth + 6 > tickWidth) {\n            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));\n            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);\n            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);\n            labelRotation = toDegrees(Math.min(Math.asin(_limitValue((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin(_limitValue(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin(_limitValue(maxLabelHeight / maxLabelDiagonal, -1, 1))));\n            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));\n        }\n        this.labelRotation = labelRotation;\n    }\n    afterCalculateLabelRotation() {\n        callback(this.options.afterCalculateLabelRotation, [\n            this\n        ]);\n    }\n    afterAutoSkip() {}\n    beforeFit() {\n        callback(this.options.beforeFit, [\n            this\n        ]);\n    }\n    fit() {\n        const minSize = {\n            width: 0,\n            height: 0\n        };\n        const { chart , options: { ticks: tickOpts , title: titleOpts , grid: gridOpts  }  } = this;\n        const display = this._isVisible();\n        const isHorizontal = this.isHorizontal();\n        if (display) {\n            const titleHeight = getTitleHeight(titleOpts, chart.options.font);\n            if (isHorizontal) {\n                minSize.width = this.maxWidth;\n                minSize.height = getTickMarkLength(gridOpts) + titleHeight;\n            } else {\n                minSize.height = this.maxHeight;\n                minSize.width = getTickMarkLength(gridOpts) + titleHeight;\n            }\n            if (tickOpts.display && this.ticks.length) {\n                const { first , last , widest , highest  } = this._getLabelSizes();\n                const tickPadding = tickOpts.padding * 2;\n                const angleRadians = toRadians(this.labelRotation);\n                const cos = Math.cos(angleRadians);\n                const sin = Math.sin(angleRadians);\n                if (isHorizontal) {\n                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;\n                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);\n                } else {\n                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;\n                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);\n                }\n                this._calculatePadding(first, last, sin, cos);\n            }\n        }\n        this._handleMargins();\n        if (isHorizontal) {\n            this.width = this._length = chart.width - this._margins.left - this._margins.right;\n            this.height = minSize.height;\n        } else {\n            this.width = minSize.width;\n            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;\n        }\n    }\n    _calculatePadding(first, last, sin, cos) {\n        const { ticks: { align , padding  } , position  } = this.options;\n        const isRotated = this.labelRotation !== 0;\n        const labelsBelowTicks = position !== 'top' && this.axis === 'x';\n        if (this.isHorizontal()) {\n            const offsetLeft = this.getPixelForTick(0) - this.left;\n            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);\n            let paddingLeft = 0;\n            let paddingRight = 0;\n            if (isRotated) {\n                if (labelsBelowTicks) {\n                    paddingLeft = cos * first.width;\n                    paddingRight = sin * last.height;\n                } else {\n                    paddingLeft = sin * first.height;\n                    paddingRight = cos * last.width;\n                }\n            } else if (align === 'start') {\n                paddingRight = last.width;\n            } else if (align === 'end') {\n                paddingLeft = first.width;\n            } else if (align !== 'inner') {\n                paddingLeft = first.width / 2;\n                paddingRight = last.width / 2;\n            }\n            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);\n            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);\n        } else {\n            let paddingTop = last.height / 2;\n            let paddingBottom = first.height / 2;\n            if (align === 'start') {\n                paddingTop = 0;\n                paddingBottom = first.height;\n            } else if (align === 'end') {\n                paddingTop = last.height;\n                paddingBottom = 0;\n            }\n            this.paddingTop = paddingTop + padding;\n            this.paddingBottom = paddingBottom + padding;\n        }\n    }\n _handleMargins() {\n        if (this._margins) {\n            this._margins.left = Math.max(this.paddingLeft, this._margins.left);\n            this._margins.top = Math.max(this.paddingTop, this._margins.top);\n            this._margins.right = Math.max(this.paddingRight, this._margins.right);\n            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);\n        }\n    }\n    afterFit() {\n        callback(this.options.afterFit, [\n            this\n        ]);\n    }\n isHorizontal() {\n        const { axis , position  } = this.options;\n        return position === 'top' || position === 'bottom' || axis === 'x';\n    }\n isFullSize() {\n        return this.options.fullSize;\n    }\n _convertTicksToLabels(ticks) {\n        this.beforeTickToLabelConversion();\n        this.generateTickLabels(ticks);\n        let i, ilen;\n        for(i = 0, ilen = ticks.length; i < ilen; i++){\n            if (isNullOrUndef(ticks[i].label)) {\n                ticks.splice(i, 1);\n                ilen--;\n                i--;\n            }\n        }\n        this.afterTickToLabelConversion();\n    }\n _getLabelSizes() {\n        let labelSizes = this._labelSizes;\n        if (!labelSizes) {\n            const sampleSize = this.options.ticks.sampleSize;\n            let ticks = this.ticks;\n            if (sampleSize < ticks.length) {\n                ticks = sample(ticks, sampleSize);\n            }\n            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);\n        }\n        return labelSizes;\n    }\n _computeLabelSizes(ticks, length, maxTicksLimit) {\n        const { ctx , _longestTextCache: caches  } = this;\n        const widths = [];\n        const heights = [];\n        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));\n        let widestLabelSize = 0;\n        let highestLabelSize = 0;\n        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;\n        for(i = 0; i < length; i += increment){\n            label = ticks[i].label;\n            tickFont = this._resolveTickFontOptions(i);\n            ctx.font = fontString = tickFont.string;\n            cache = caches[fontString] = caches[fontString] || {\n                data: {},\n                gc: []\n            };\n            lineHeight = tickFont.lineHeight;\n            width = height = 0;\n            if (!isNullOrUndef(label) && !isArray(label)) {\n                width = _measureText(ctx, cache.data, cache.gc, width, label);\n                height = lineHeight;\n            } else if (isArray(label)) {\n                for(j = 0, jlen = label.length; j < jlen; ++j){\n                    nestedLabel =  label[j];\n                    if (!isNullOrUndef(nestedLabel) && !isArray(nestedLabel)) {\n                        width = _measureText(ctx, cache.data, cache.gc, width, nestedLabel);\n                        height += lineHeight;\n                    }\n                }\n            }\n            widths.push(width);\n            heights.push(height);\n            widestLabelSize = Math.max(width, widestLabelSize);\n            highestLabelSize = Math.max(height, highestLabelSize);\n        }\n        garbageCollect(caches, length);\n        const widest = widths.indexOf(widestLabelSize);\n        const highest = heights.indexOf(highestLabelSize);\n        const valueAt = (idx)=>({\n                width: widths[idx] || 0,\n                height: heights[idx] || 0\n            });\n        return {\n            first: valueAt(0),\n            last: valueAt(length - 1),\n            widest: valueAt(widest),\n            highest: valueAt(highest),\n            widths,\n            heights\n        };\n    }\n getLabelForValue(value) {\n        return value;\n    }\n getPixelForValue(value, index) {\n        return NaN;\n    }\n getValueForPixel(pixel) {}\n getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n getPixelForDecimal(decimal) {\n        if (this._reversePixels) {\n            decimal = 1 - decimal;\n        }\n        const pixel = this._startPixel + decimal * this._length;\n        return _int16Range(this._alignToPixels ? _alignPixel(this.chart, pixel, 0) : pixel);\n    }\n getDecimalForPixel(pixel) {\n        const decimal = (pixel - this._startPixel) / this._length;\n        return this._reversePixels ? 1 - decimal : decimal;\n    }\n getBasePixel() {\n        return this.getPixelForValue(this.getBaseValue());\n    }\n getBaseValue() {\n        const { min , max  } = this;\n        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;\n    }\n getContext(index) {\n        const ticks = this.ticks || [];\n        if (index >= 0 && index < ticks.length) {\n            const tick = ticks[index];\n            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));\n        }\n        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));\n    }\n _tickSize() {\n        const optionTicks = this.options.ticks;\n        const rot = toRadians(this.labelRotation);\n        const cos = Math.abs(Math.cos(rot));\n        const sin = Math.abs(Math.sin(rot));\n        const labelSizes = this._getLabelSizes();\n        const padding = optionTicks.autoSkipPadding || 0;\n        const w = labelSizes ? labelSizes.widest.width + padding : 0;\n        const h = labelSizes ? labelSizes.highest.height + padding : 0;\n        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;\n    }\n _isVisible() {\n        const display = this.options.display;\n        if (display !== 'auto') {\n            return !!display;\n        }\n        return this.getMatchingVisibleMetas().length > 0;\n    }\n _computeGridLineItems(chartArea) {\n        const axis = this.axis;\n        const chart = this.chart;\n        const options = this.options;\n        const { grid , position , border  } = options;\n        const offset = grid.offset;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const ticksLength = ticks.length + (offset ? 1 : 0);\n        const tl = getTickMarkLength(grid);\n        const items = [];\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = borderOpts.display ? borderOpts.width : 0;\n        const axisHalfWidth = axisWidth / 2;\n        const alignBorderValue = function(pixel) {\n            return _alignPixel(chart, pixel, axisWidth);\n        };\n        let borderValue, i, lineValue, alignedLineValue;\n        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;\n        if (position === 'top') {\n            borderValue = alignBorderValue(this.bottom);\n            ty1 = this.bottom - tl;\n            ty2 = borderValue - axisHalfWidth;\n            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;\n            y2 = chartArea.bottom;\n        } else if (position === 'bottom') {\n            borderValue = alignBorderValue(this.top);\n            y1 = chartArea.top;\n            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = this.top + tl;\n        } else if (position === 'left') {\n            borderValue = alignBorderValue(this.right);\n            tx1 = this.right - tl;\n            tx2 = borderValue - axisHalfWidth;\n            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;\n            x2 = chartArea.right;\n        } else if (position === 'right') {\n            borderValue = alignBorderValue(this.left);\n            x1 = chartArea.left;\n            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;\n            tx1 = borderValue + axisHalfWidth;\n            tx2 = this.left + tl;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            y1 = chartArea.top;\n            y2 = chartArea.bottom;\n            ty1 = borderValue + axisHalfWidth;\n            ty2 = ty1 + tl;\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));\n            }\n            tx1 = borderValue - axisHalfWidth;\n            tx2 = tx1 - tl;\n            x1 = chartArea.left;\n            x2 = chartArea.right;\n        }\n        const limit = valueOrDefault(options.ticks.maxTicksLimit, ticksLength);\n        const step = Math.max(1, Math.ceil(ticksLength / limit));\n        for(i = 0; i < ticksLength; i += step){\n            const context = this.getContext(i);\n            const optsAtIndex = grid.setContext(context);\n            const optsAtIndexBorder = border.setContext(context);\n            const lineWidth = optsAtIndex.lineWidth;\n            const lineColor = optsAtIndex.color;\n            const borderDash = optsAtIndexBorder.dash || [];\n            const borderDashOffset = optsAtIndexBorder.dashOffset;\n            const tickWidth = optsAtIndex.tickWidth;\n            const tickColor = optsAtIndex.tickColor;\n            const tickBorderDash = optsAtIndex.tickBorderDash || [];\n            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;\n            lineValue = getPixelForGridLine(this, i, offset);\n            if (lineValue === undefined) {\n                continue;\n            }\n            alignedLineValue = _alignPixel(chart, lineValue, lineWidth);\n            if (isHorizontal) {\n                tx1 = tx2 = x1 = x2 = alignedLineValue;\n            } else {\n                ty1 = ty2 = y1 = y2 = alignedLineValue;\n            }\n            items.push({\n                tx1,\n                ty1,\n                tx2,\n                ty2,\n                x1,\n                y1,\n                x2,\n                y2,\n                width: lineWidth,\n                color: lineColor,\n                borderDash,\n                borderDashOffset,\n                tickWidth,\n                tickColor,\n                tickBorderDash,\n                tickBorderDashOffset\n            });\n        }\n        this._ticksLength = ticksLength;\n        this._borderValue = borderValue;\n        return items;\n    }\n _computeLabelItems(chartArea) {\n        const axis = this.axis;\n        const options = this.options;\n        const { position , ticks: optionTicks  } = options;\n        const isHorizontal = this.isHorizontal();\n        const ticks = this.ticks;\n        const { align , crossAlign , padding , mirror  } = optionTicks;\n        const tl = getTickMarkLength(options.grid);\n        const tickAndPadding = tl + padding;\n        const hTickAndPadding = mirror ? -padding : tickAndPadding;\n        const rotation = -toRadians(this.labelRotation);\n        const items = [];\n        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;\n        let textBaseline = 'middle';\n        if (position === 'top') {\n            y = this.bottom - hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'bottom') {\n            y = this.top + hTickAndPadding;\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (position === 'left') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (position === 'right') {\n            const ret = this._getYAxisLabelAlignment(tl);\n            textAlign = ret.textAlign;\n            x = ret.x;\n        } else if (axis === 'x') {\n            if (position === 'center') {\n                y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;\n            }\n            textAlign = this._getXAxisLabelAlignment();\n        } else if (axis === 'y') {\n            if (position === 'center') {\n                x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;\n            } else if (isObject(position)) {\n                const positionAxisID = Object.keys(position)[0];\n                const value = position[positionAxisID];\n                x = this.chart.scales[positionAxisID].getPixelForValue(value);\n            }\n            textAlign = this._getYAxisLabelAlignment(tl).textAlign;\n        }\n        if (axis === 'y') {\n            if (align === 'start') {\n                textBaseline = 'top';\n            } else if (align === 'end') {\n                textBaseline = 'bottom';\n            }\n        }\n        const labelSizes = this._getLabelSizes();\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            label = tick.label;\n            const optsAtIndex = optionTicks.setContext(this.getContext(i));\n            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;\n            font = this._resolveTickFontOptions(i);\n            lineHeight = font.lineHeight;\n            lineCount = isArray(label) ? label.length : 1;\n            const halfCount = lineCount / 2;\n            const color = optsAtIndex.color;\n            const strokeColor = optsAtIndex.textStrokeColor;\n            const strokeWidth = optsAtIndex.textStrokeWidth;\n            let tickTextAlign = textAlign;\n            if (isHorizontal) {\n                x = pixel;\n                if (textAlign === 'inner') {\n                    if (i === ilen - 1) {\n                        tickTextAlign = !this.options.reverse ? 'right' : 'left';\n                    } else if (i === 0) {\n                        tickTextAlign = !this.options.reverse ? 'left' : 'right';\n                    } else {\n                        tickTextAlign = 'center';\n                    }\n                }\n                if (position === 'top') {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = -lineCount * lineHeight + lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;\n                    } else {\n                        textOffset = -labelSizes.highest.height + lineHeight / 2;\n                    }\n                } else {\n                    if (crossAlign === 'near' || rotation !== 0) {\n                        textOffset = lineHeight / 2;\n                    } else if (crossAlign === 'center') {\n                        textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;\n                    } else {\n                        textOffset = labelSizes.highest.height - lineCount * lineHeight;\n                    }\n                }\n                if (mirror) {\n                    textOffset *= -1;\n                }\n                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) {\n                    x += lineHeight / 2 * Math.sin(rotation);\n                }\n            } else {\n                y = pixel;\n                textOffset = (1 - lineCount) * lineHeight / 2;\n            }\n            let backdrop;\n            if (optsAtIndex.showLabelBackdrop) {\n                const labelPadding = toPadding(optsAtIndex.backdropPadding);\n                const height = labelSizes.heights[i];\n                const width = labelSizes.widths[i];\n                let top = textOffset - labelPadding.top;\n                let left = 0 - labelPadding.left;\n                switch(textBaseline){\n                    case 'middle':\n                        top -= height / 2;\n                        break;\n                    case 'bottom':\n                        top -= height;\n                        break;\n                }\n                switch(textAlign){\n                    case 'center':\n                        left -= width / 2;\n                        break;\n                    case 'right':\n                        left -= width;\n                        break;\n                    case 'inner':\n                        if (i === ilen - 1) {\n                            left -= width;\n                        } else if (i > 0) {\n                            left -= width / 2;\n                        }\n                        break;\n                }\n                backdrop = {\n                    left,\n                    top,\n                    width: width + labelPadding.width,\n                    height: height + labelPadding.height,\n                    color: optsAtIndex.backdropColor\n                };\n            }\n            items.push({\n                label,\n                font,\n                textOffset,\n                options: {\n                    rotation,\n                    color,\n                    strokeColor,\n                    strokeWidth,\n                    textAlign: tickTextAlign,\n                    textBaseline,\n                    translation: [\n                        x,\n                        y\n                    ],\n                    backdrop\n                }\n            });\n        }\n        return items;\n    }\n    _getXAxisLabelAlignment() {\n        const { position , ticks  } = this.options;\n        const rotation = -toRadians(this.labelRotation);\n        if (rotation) {\n            return position === 'top' ? 'left' : 'right';\n        }\n        let align = 'center';\n        if (ticks.align === 'start') {\n            align = 'left';\n        } else if (ticks.align === 'end') {\n            align = 'right';\n        } else if (ticks.align === 'inner') {\n            align = 'inner';\n        }\n        return align;\n    }\n    _getYAxisLabelAlignment(tl) {\n        const { position , ticks: { crossAlign , mirror , padding  }  } = this.options;\n        const labelSizes = this._getLabelSizes();\n        const tickAndPadding = tl + padding;\n        const widest = labelSizes.widest.width;\n        let textAlign;\n        let x;\n        if (position === 'left') {\n            if (mirror) {\n                x = this.right + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x += widest;\n                }\n            } else {\n                x = this.right - tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x = this.left;\n                }\n            }\n        } else if (position === 'right') {\n            if (mirror) {\n                x = this.left + padding;\n                if (crossAlign === 'near') {\n                    textAlign = 'right';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x -= widest / 2;\n                } else {\n                    textAlign = 'left';\n                    x -= widest;\n                }\n            } else {\n                x = this.left + tickAndPadding;\n                if (crossAlign === 'near') {\n                    textAlign = 'left';\n                } else if (crossAlign === 'center') {\n                    textAlign = 'center';\n                    x += widest / 2;\n                } else {\n                    textAlign = 'right';\n                    x = this.right;\n                }\n            }\n        } else {\n            textAlign = 'right';\n        }\n        return {\n            textAlign,\n            x\n        };\n    }\n _computeLabelArea() {\n        if (this.options.ticks.mirror) {\n            return;\n        }\n        const chart = this.chart;\n        const position = this.options.position;\n        if (position === 'left' || position === 'right') {\n            return {\n                top: 0,\n                left: this.left,\n                bottom: chart.height,\n                right: this.right\n            };\n        }\n        if (position === 'top' || position === 'bottom') {\n            return {\n                top: this.top,\n                left: 0,\n                bottom: this.bottom,\n                right: chart.width\n            };\n        }\n    }\n drawBackground() {\n        const { ctx , options: { backgroundColor  } , left , top , width , height  } = this;\n        if (backgroundColor) {\n            ctx.save();\n            ctx.fillStyle = backgroundColor;\n            ctx.fillRect(left, top, width, height);\n            ctx.restore();\n        }\n    }\n    getLineWidthForValue(value) {\n        const grid = this.options.grid;\n        if (!this._isVisible() || !grid.display) {\n            return 0;\n        }\n        const ticks = this.ticks;\n        const index = ticks.findIndex((t)=>t.value === value);\n        if (index >= 0) {\n            const opts = grid.setContext(this.getContext(index));\n            return opts.lineWidth;\n        }\n        return 0;\n    }\n drawGrid(chartArea) {\n        const grid = this.options.grid;\n        const ctx = this.ctx;\n        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));\n        let i, ilen;\n        const drawLine = (p1, p2, style)=>{\n            if (!style.width || !style.color) {\n                return;\n            }\n            ctx.save();\n            ctx.lineWidth = style.width;\n            ctx.strokeStyle = style.color;\n            ctx.setLineDash(style.borderDash || []);\n            ctx.lineDashOffset = style.borderDashOffset;\n            ctx.beginPath();\n            ctx.moveTo(p1.x, p1.y);\n            ctx.lineTo(p2.x, p2.y);\n            ctx.stroke();\n            ctx.restore();\n        };\n        if (grid.display) {\n            for(i = 0, ilen = items.length; i < ilen; ++i){\n                const item = items[i];\n                if (grid.drawOnChartArea) {\n                    drawLine({\n                        x: item.x1,\n                        y: item.y1\n                    }, {\n                        x: item.x2,\n                        y: item.y2\n                    }, item);\n                }\n                if (grid.drawTicks) {\n                    drawLine({\n                        x: item.tx1,\n                        y: item.ty1\n                    }, {\n                        x: item.tx2,\n                        y: item.ty2\n                    }, {\n                        color: item.tickColor,\n                        width: item.tickWidth,\n                        borderDash: item.tickBorderDash,\n                        borderDashOffset: item.tickBorderDashOffset\n                    });\n                }\n            }\n        }\n    }\n drawBorder() {\n        const { chart , ctx , options: { border , grid  }  } = this;\n        const borderOpts = border.setContext(this.getContext());\n        const axisWidth = border.display ? borderOpts.width : 0;\n        if (!axisWidth) {\n            return;\n        }\n        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;\n        const borderValue = this._borderValue;\n        let x1, x2, y1, y2;\n        if (this.isHorizontal()) {\n            x1 = _alignPixel(chart, this.left, axisWidth) - axisWidth / 2;\n            x2 = _alignPixel(chart, this.right, lastLineWidth) + lastLineWidth / 2;\n            y1 = y2 = borderValue;\n        } else {\n            y1 = _alignPixel(chart, this.top, axisWidth) - axisWidth / 2;\n            y2 = _alignPixel(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;\n            x1 = x2 = borderValue;\n        }\n        ctx.save();\n        ctx.lineWidth = borderOpts.width;\n        ctx.strokeStyle = borderOpts.color;\n        ctx.beginPath();\n        ctx.moveTo(x1, y1);\n        ctx.lineTo(x2, y2);\n        ctx.stroke();\n        ctx.restore();\n    }\n drawLabels(chartArea) {\n        const optionTicks = this.options.ticks;\n        if (!optionTicks.display) {\n            return;\n        }\n        const ctx = this.ctx;\n        const area = this._computeLabelArea();\n        if (area) {\n            clipArea(ctx, area);\n        }\n        const items = this.getLabelItems(chartArea);\n        for (const item of items){\n            const renderTextOptions = item.options;\n            const tickFont = item.font;\n            const label = item.label;\n            const y = item.textOffset;\n            renderText(ctx, label, 0, y, tickFont, renderTextOptions);\n        }\n        if (area) {\n            unclipArea(ctx);\n        }\n    }\n drawTitle() {\n        const { ctx , options: { position , title , reverse  }  } = this;\n        if (!title.display) {\n            return;\n        }\n        const font = toFont(title.font);\n        const padding = toPadding(title.padding);\n        const align = title.align;\n        let offset = font.lineHeight / 2;\n        if (position === 'bottom' || position === 'center' || isObject(position)) {\n            offset += padding.bottom;\n            if (isArray(title.text)) {\n                offset += font.lineHeight * (title.text.length - 1);\n            }\n        } else {\n            offset += padding.top;\n        }\n        const { titleX , titleY , maxWidth , rotation  } = titleArgs(this, offset, position, align);\n        renderText(ctx, title.text, 0, 0, font, {\n            color: title.color,\n            maxWidth,\n            rotation,\n            textAlign: titleAlign(align, position, reverse),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n    draw(chartArea) {\n        if (!this._isVisible()) {\n            return;\n        }\n        this.drawBackground();\n        this.drawGrid(chartArea);\n        this.drawBorder();\n        this.drawTitle();\n        this.drawLabels(chartArea);\n    }\n _layers() {\n        const opts = this.options;\n        const tz = opts.ticks && opts.ticks.z || 0;\n        const gz = valueOrDefault(opts.grid && opts.grid.z, -1);\n        const bz = valueOrDefault(opts.border && opts.border.z, 0);\n        if (!this._isVisible() || this.draw !== Scale.prototype.draw) {\n            return [\n                {\n                    z: tz,\n                    draw: (chartArea)=>{\n                        this.draw(chartArea);\n                    }\n                }\n            ];\n        }\n        return [\n            {\n                z: gz,\n                draw: (chartArea)=>{\n                    this.drawBackground();\n                    this.drawGrid(chartArea);\n                    this.drawTitle();\n                }\n            },\n            {\n                z: bz,\n                draw: ()=>{\n                    this.drawBorder();\n                }\n            },\n            {\n                z: tz,\n                draw: (chartArea)=>{\n                    this.drawLabels(chartArea);\n                }\n            }\n        ];\n    }\n getMatchingVisibleMetas(type) {\n        const metas = this.chart.getSortedVisibleDatasetMetas();\n        const axisID = this.axis + 'AxisID';\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            const meta = metas[i];\n            if (meta[axisID] === this.id && (!type || meta.type === type)) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n _resolveTickFontOptions(index) {\n        const opts = this.options.ticks.setContext(this.getContext(index));\n        return toFont(opts.font);\n    }\n _maxDigits() {\n        const fontSize = this._resolveTickFontOptions(0).lineHeight;\n        return (this.isHorizontal() ? this.width : this.height) / fontSize;\n    }\n}\n\nclass TypedRegistry {\n    constructor(type, scope, override){\n        this.type = type;\n        this.scope = scope;\n        this.override = override;\n        this.items = Object.create(null);\n    }\n    isForType(type) {\n        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);\n    }\n register(item) {\n        const proto = Object.getPrototypeOf(item);\n        let parentScope;\n        if (isIChartComponent(proto)) {\n            parentScope = this.register(proto);\n        }\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope + '.' + id;\n        if (!id) {\n            throw new Error('class does not have id: ' + item);\n        }\n        if (id in items) {\n            return scope;\n        }\n        items[id] = item;\n        registerDefaults(item, scope, parentScope);\n        if (this.override) {\n            defaults.override(item.id, item.overrides);\n        }\n        return scope;\n    }\n get(id) {\n        return this.items[id];\n    }\n unregister(item) {\n        const items = this.items;\n        const id = item.id;\n        const scope = this.scope;\n        if (id in items) {\n            delete items[id];\n        }\n        if (scope && id in defaults[scope]) {\n            delete defaults[scope][id];\n            if (this.override) {\n                delete overrides[id];\n            }\n        }\n    }\n}\nfunction registerDefaults(item, scope, parentScope) {\n    const itemDefaults = merge(Object.create(null), [\n        parentScope ? defaults.get(parentScope) : {},\n        defaults.get(scope),\n        item.defaults\n    ]);\n    defaults.set(scope, itemDefaults);\n    if (item.defaultRoutes) {\n        routeDefaults(scope, item.defaultRoutes);\n    }\n    if (item.descriptors) {\n        defaults.describe(scope, item.descriptors);\n    }\n}\nfunction routeDefaults(scope, routes) {\n    Object.keys(routes).forEach((property)=>{\n        const propertyParts = property.split('.');\n        const sourceName = propertyParts.pop();\n        const sourceScope = [\n            scope\n        ].concat(propertyParts).join('.');\n        const parts = routes[property].split('.');\n        const targetName = parts.pop();\n        const targetScope = parts.join('.');\n        defaults.route(sourceScope, sourceName, targetScope, targetName);\n    });\n}\nfunction isIChartComponent(proto) {\n    return 'id' in proto && 'defaults' in proto;\n}\n\nclass Registry {\n    constructor(){\n        this.controllers = new TypedRegistry(DatasetController, 'datasets', true);\n        this.elements = new TypedRegistry(Element, 'elements');\n        this.plugins = new TypedRegistry(Object, 'plugins');\n        this.scales = new TypedRegistry(Scale, 'scales');\n        this._typedRegistries = [\n            this.controllers,\n            this.scales,\n            this.elements\n        ];\n    }\n add(...args) {\n        this._each('register', args);\n    }\n    remove(...args) {\n        this._each('unregister', args);\n    }\n addControllers(...args) {\n        this._each('register', args, this.controllers);\n    }\n addElements(...args) {\n        this._each('register', args, this.elements);\n    }\n addPlugins(...args) {\n        this._each('register', args, this.plugins);\n    }\n addScales(...args) {\n        this._each('register', args, this.scales);\n    }\n getController(id) {\n        return this._get(id, this.controllers, 'controller');\n    }\n getElement(id) {\n        return this._get(id, this.elements, 'element');\n    }\n getPlugin(id) {\n        return this._get(id, this.plugins, 'plugin');\n    }\n getScale(id) {\n        return this._get(id, this.scales, 'scale');\n    }\n removeControllers(...args) {\n        this._each('unregister', args, this.controllers);\n    }\n removeElements(...args) {\n        this._each('unregister', args, this.elements);\n    }\n removePlugins(...args) {\n        this._each('unregister', args, this.plugins);\n    }\n removeScales(...args) {\n        this._each('unregister', args, this.scales);\n    }\n _each(method, args, typedRegistry) {\n        [\n            ...args\n        ].forEach((arg)=>{\n            const reg = typedRegistry || this._getRegistryForType(arg);\n            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) {\n                this._exec(method, reg, arg);\n            } else {\n                each(arg, (item)=>{\n                    const itemReg = typedRegistry || this._getRegistryForType(item);\n                    this._exec(method, itemReg, item);\n                });\n            }\n        });\n    }\n _exec(method, registry, component) {\n        const camelMethod = _capitalize(method);\n        callback(component['before' + camelMethod], [], component);\n        registry[method](component);\n        callback(component['after' + camelMethod], [], component);\n    }\n _getRegistryForType(type) {\n        for(let i = 0; i < this._typedRegistries.length; i++){\n            const reg = this._typedRegistries[i];\n            if (reg.isForType(type)) {\n                return reg;\n            }\n        }\n        return this.plugins;\n    }\n _get(id, typedRegistry, type) {\n        const item = typedRegistry.get(id);\n        if (item === undefined) {\n            throw new Error('\"' + id + '\" is not a registered ' + type + '.');\n        }\n        return item;\n    }\n}\nvar registry = /* #__PURE__ */ new Registry();\n\nclass PluginService {\n    constructor(){\n        this._init = [];\n    }\n notify(chart, hook, args, filter) {\n        if (hook === 'beforeInit') {\n            this._init = this._createDescriptors(chart, true);\n            this._notify(this._init, chart, 'install');\n        }\n        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);\n        const result = this._notify(descriptors, chart, hook, args);\n        if (hook === 'afterDestroy') {\n            this._notify(descriptors, chart, 'stop');\n            this._notify(this._init, chart, 'uninstall');\n        }\n        return result;\n    }\n _notify(descriptors, chart, hook, args) {\n        args = args || {};\n        for (const descriptor of descriptors){\n            const plugin = descriptor.plugin;\n            const method = plugin[hook];\n            const params = [\n                chart,\n                args,\n                descriptor.options\n            ];\n            if (callback(method, params, plugin) === false && args.cancelable) {\n                return false;\n            }\n        }\n        return true;\n    }\n    invalidate() {\n        if (!isNullOrUndef(this._cache)) {\n            this._oldCache = this._cache;\n            this._cache = undefined;\n        }\n    }\n _descriptors(chart) {\n        if (this._cache) {\n            return this._cache;\n        }\n        const descriptors = this._cache = this._createDescriptors(chart);\n        this._notifyStateChanges(chart);\n        return descriptors;\n    }\n    _createDescriptors(chart, all) {\n        const config = chart && chart.config;\n        const options = valueOrDefault(config.options && config.options.plugins, {});\n        const plugins = allPlugins(config);\n        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);\n    }\n _notifyStateChanges(chart) {\n        const previousDescriptors = this._oldCache || [];\n        const descriptors = this._cache;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));\n        this._notify(diff(previousDescriptors, descriptors), chart, 'stop');\n        this._notify(diff(descriptors, previousDescriptors), chart, 'start');\n    }\n}\n function allPlugins(config) {\n    const localIds = {};\n    const plugins = [];\n    const keys = Object.keys(registry.plugins.items);\n    for(let i = 0; i < keys.length; i++){\n        plugins.push(registry.getPlugin(keys[i]));\n    }\n    const local = config.plugins || [];\n    for(let i = 0; i < local.length; i++){\n        const plugin = local[i];\n        if (plugins.indexOf(plugin) === -1) {\n            plugins.push(plugin);\n            localIds[plugin.id] = true;\n        }\n    }\n    return {\n        plugins,\n        localIds\n    };\n}\nfunction getOpts(options, all) {\n    if (!all && options === false) {\n        return null;\n    }\n    if (options === true) {\n        return {};\n    }\n    return options;\n}\nfunction createDescriptors(chart, { plugins , localIds  }, options, all) {\n    const result = [];\n    const context = chart.getContext();\n    for (const plugin of plugins){\n        const id = plugin.id;\n        const opts = getOpts(options[id], all);\n        if (opts === null) {\n            continue;\n        }\n        result.push({\n            plugin,\n            options: pluginOpts(chart.config, {\n                plugin,\n                local: localIds[id]\n            }, opts, context)\n        });\n    }\n    return result;\n}\nfunction pluginOpts(config, { plugin , local  }, opts, context) {\n    const keys = config.pluginScopeKeys(plugin);\n    const scopes = config.getOptionScopes(opts, keys);\n    if (local && plugin.defaults) {\n        scopes.push(plugin.defaults);\n    }\n    return config.createResolver(scopes, context, [\n        ''\n    ], {\n        scriptable: false,\n        indexable: false,\n        allKeys: true\n    });\n}\n\nfunction getIndexAxis(type, options) {\n    const datasetDefaults = defaults.datasets[type] || {};\n    const datasetOptions = (options.datasets || {})[type] || {};\n    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || 'x';\n}\nfunction getAxisFromDefaultScaleID(id, indexAxis) {\n    let axis = id;\n    if (id === '_index_') {\n        axis = indexAxis;\n    } else if (id === '_value_') {\n        axis = indexAxis === 'x' ? 'y' : 'x';\n    }\n    return axis;\n}\nfunction getDefaultScaleIDFromAxis(axis, indexAxis) {\n    return axis === indexAxis ? '_index_' : '_value_';\n}\nfunction idMatchesAxis(id) {\n    if (id === 'x' || id === 'y' || id === 'r') {\n        return id;\n    }\n}\nfunction axisFromPosition(position) {\n    if (position === 'top' || position === 'bottom') {\n        return 'x';\n    }\n    if (position === 'left' || position === 'right') {\n        return 'y';\n    }\n}\nfunction determineAxis(id, ...scaleOptions) {\n    if (idMatchesAxis(id)) {\n        return id;\n    }\n    for (const opts of scaleOptions){\n        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());\n        if (axis) {\n            return axis;\n        }\n    }\n    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);\n}\nfunction getAxisFromDataset(id, axis, dataset) {\n    if (dataset[axis + 'AxisID'] === id) {\n        return {\n            axis\n        };\n    }\n}\nfunction retrieveAxisFromDatasets(id, config) {\n    if (config.data && config.data.datasets) {\n        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);\n        if (boundDs.length) {\n            return getAxisFromDataset(id, 'x', boundDs[0]) || getAxisFromDataset(id, 'y', boundDs[0]);\n        }\n    }\n    return {};\n}\nfunction mergeScaleConfig(config, options) {\n    const chartDefaults = overrides[config.type] || {\n        scales: {}\n    };\n    const configScales = options.scales || {};\n    const chartIndexAxis = getIndexAxis(config.type, options);\n    const scales = Object.create(null);\n    Object.keys(configScales).forEach((id)=>{\n        const scaleConf = configScales[id];\n        if (!isObject(scaleConf)) {\n            return console.error(`Invalid scale configuration for scale: ${id}`);\n        }\n        if (scaleConf._proxy) {\n            return console.warn(`Ignoring resolver passed as options for scale: ${id}`);\n        }\n        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), defaults.scales[scaleConf.type]);\n        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);\n        const defaultScaleOptions = chartDefaults.scales || {};\n        scales[id] = mergeIf(Object.create(null), [\n            {\n                axis\n            },\n            scaleConf,\n            defaultScaleOptions[axis],\n            defaultScaleOptions[defaultId]\n        ]);\n    });\n    config.data.datasets.forEach((dataset)=>{\n        const type = dataset.type || config.type;\n        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);\n        const datasetDefaults = overrides[type] || {};\n        const defaultScaleOptions = datasetDefaults.scales || {};\n        Object.keys(defaultScaleOptions).forEach((defaultID)=>{\n            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);\n            const id = dataset[axis + 'AxisID'] || axis;\n            scales[id] = scales[id] || Object.create(null);\n            mergeIf(scales[id], [\n                {\n                    axis\n                },\n                configScales[id],\n                defaultScaleOptions[defaultID]\n            ]);\n        });\n    });\n    Object.keys(scales).forEach((key)=>{\n        const scale = scales[key];\n        mergeIf(scale, [\n            defaults.scales[scale.type],\n            defaults.scale\n        ]);\n    });\n    return scales;\n}\nfunction initOptions(config) {\n    const options = config.options || (config.options = {});\n    options.plugins = valueOrDefault(options.plugins, {});\n    options.scales = mergeScaleConfig(config, options);\n}\nfunction initData(data) {\n    data = data || {};\n    data.datasets = data.datasets || [];\n    data.labels = data.labels || [];\n    return data;\n}\nfunction initConfig(config) {\n    config = config || {};\n    config.data = initData(config.data);\n    initOptions(config);\n    return config;\n}\nconst keyCache = new Map();\nconst keysCached = new Set();\nfunction cachedKeys(cacheKey, generate) {\n    let keys = keyCache.get(cacheKey);\n    if (!keys) {\n        keys = generate();\n        keyCache.set(cacheKey, keys);\n        keysCached.add(keys);\n    }\n    return keys;\n}\nconst addIfFound = (set, obj, key)=>{\n    const opts = resolveObjectKey(obj, key);\n    if (opts !== undefined) {\n        set.add(opts);\n    }\n};\nclass Config {\n    constructor(config){\n        this._config = initConfig(config);\n        this._scopeCache = new Map();\n        this._resolverCache = new Map();\n    }\n    get platform() {\n        return this._config.platform;\n    }\n    get type() {\n        return this._config.type;\n    }\n    set type(type) {\n        this._config.type = type;\n    }\n    get data() {\n        return this._config.data;\n    }\n    set data(data) {\n        this._config.data = initData(data);\n    }\n    get options() {\n        return this._config.options;\n    }\n    set options(options) {\n        this._config.options = options;\n    }\n    get plugins() {\n        return this._config.plugins;\n    }\n    update() {\n        const config = this._config;\n        this.clearCache();\n        initOptions(config);\n    }\n    clearCache() {\n        this._scopeCache.clear();\n        this._resolverCache.clear();\n    }\n datasetScopeKeys(datasetType) {\n        return cachedKeys(datasetType, ()=>[\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetAnimationScopeKeys(datasetType, transition) {\n        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[\n                [\n                    `datasets.${datasetType}.transitions.${transition}`,\n                    `transitions.${transition}`\n                ],\n                [\n                    `datasets.${datasetType}`,\n                    ''\n                ]\n            ]);\n    }\n datasetElementScopeKeys(datasetType, elementType) {\n        return cachedKeys(`${datasetType}-${elementType}`, ()=>[\n                [\n                    `datasets.${datasetType}.elements.${elementType}`,\n                    `datasets.${datasetType}`,\n                    `elements.${elementType}`,\n                    ''\n                ]\n            ]);\n    }\n pluginScopeKeys(plugin) {\n        const id = plugin.id;\n        const type = this.type;\n        return cachedKeys(`${type}-plugin-${id}`, ()=>[\n                [\n                    `plugins.${id}`,\n                    ...plugin.additionalOptionScopes || []\n                ]\n            ]);\n    }\n _cachedScopes(mainScope, resetCache) {\n        const _scopeCache = this._scopeCache;\n        let cache = _scopeCache.get(mainScope);\n        if (!cache || resetCache) {\n            cache = new Map();\n            _scopeCache.set(mainScope, cache);\n        }\n        return cache;\n    }\n getOptionScopes(mainScope, keyLists, resetCache) {\n        const { options , type  } = this;\n        const cache = this._cachedScopes(mainScope, resetCache);\n        const cached = cache.get(keyLists);\n        if (cached) {\n            return cached;\n        }\n        const scopes = new Set();\n        keyLists.forEach((keys)=>{\n            if (mainScope) {\n                scopes.add(mainScope);\n                keys.forEach((key)=>addIfFound(scopes, mainScope, key));\n            }\n            keys.forEach((key)=>addIfFound(scopes, options, key));\n            keys.forEach((key)=>addIfFound(scopes, overrides[type] || {}, key));\n            keys.forEach((key)=>addIfFound(scopes, defaults, key));\n            keys.forEach((key)=>addIfFound(scopes, descriptors, key));\n        });\n        const array = Array.from(scopes);\n        if (array.length === 0) {\n            array.push(Object.create(null));\n        }\n        if (keysCached.has(keyLists)) {\n            cache.set(keyLists, array);\n        }\n        return array;\n    }\n chartOptionScopes() {\n        const { options , type  } = this;\n        return [\n            options,\n            overrides[type] || {},\n            defaults.datasets[type] || {},\n            {\n                type\n            },\n            defaults,\n            descriptors\n        ];\n    }\n resolveNamedOptions(scopes, names, context, prefixes = [\n        ''\n    ]) {\n        const result = {\n            $shared: true\n        };\n        const { resolver , subPrefixes  } = getResolver(this._resolverCache, scopes, prefixes);\n        let options = resolver;\n        if (needContext(resolver, names)) {\n            result.$shared = false;\n            context = isFunction(context) ? context() : context;\n            const subResolver = this.createResolver(scopes, context, subPrefixes);\n            options = _attachContext(resolver, context, subResolver);\n        }\n        for (const prop of names){\n            result[prop] = options[prop];\n        }\n        return result;\n    }\n createResolver(scopes, context, prefixes = [\n        ''\n    ], descriptorDefaults) {\n        const { resolver  } = getResolver(this._resolverCache, scopes, prefixes);\n        return isObject(context) ? _attachContext(resolver, context, undefined, descriptorDefaults) : resolver;\n    }\n}\nfunction getResolver(resolverCache, scopes, prefixes) {\n    let cache = resolverCache.get(scopes);\n    if (!cache) {\n        cache = new Map();\n        resolverCache.set(scopes, cache);\n    }\n    const cacheKey = prefixes.join();\n    let cached = cache.get(cacheKey);\n    if (!cached) {\n        const resolver = _createResolver(scopes, prefixes);\n        cached = {\n            resolver,\n            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes('hover'))\n        };\n        cache.set(cacheKey, cached);\n    }\n    return cached;\n}\nconst hasFunction = (value)=>isObject(value) && Object.getOwnPropertyNames(value).some((key)=>isFunction(value[key]));\nfunction needContext(proxy, names) {\n    const { isScriptable , isIndexable  } = _descriptors(proxy);\n    for (const prop of names){\n        const scriptable = isScriptable(prop);\n        const indexable = isIndexable(prop);\n        const value = (indexable || scriptable) && proxy[prop];\n        if (scriptable && (isFunction(value) || hasFunction(value)) || indexable && isArray(value)) {\n            return true;\n        }\n    }\n    return false;\n}\n\nvar version = \"4.4.8\";\n\nconst KNOWN_POSITIONS = [\n    'top',\n    'bottom',\n    'left',\n    'right',\n    'chartArea'\n];\nfunction positionIsHorizontal(position, axis) {\n    return position === 'top' || position === 'bottom' || KNOWN_POSITIONS.indexOf(position) === -1 && axis === 'x';\n}\nfunction compare2Level(l1, l2) {\n    return function(a, b) {\n        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];\n    };\n}\nfunction onAnimationsComplete(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    chart.notifyPlugins('afterRender');\n    callback(animationOptions && animationOptions.onComplete, [\n        context\n    ], chart);\n}\nfunction onAnimationProgress(context) {\n    const chart = context.chart;\n    const animationOptions = chart.options.animation;\n    callback(animationOptions && animationOptions.onProgress, [\n        context\n    ], chart);\n}\n function getCanvas(item) {\n    if (_isDomSupported() && typeof item === 'string') {\n        item = document.getElementById(item);\n    } else if (item && item.length) {\n        item = item[0];\n    }\n    if (item && item.canvas) {\n        item = item.canvas;\n    }\n    return item;\n}\nconst instances = {};\nconst getChart = (key)=>{\n    const canvas = getCanvas(key);\n    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();\n};\nfunction moveNumericKeys(obj, start, move) {\n    const keys = Object.keys(obj);\n    for (const key of keys){\n        const intKey = +key;\n        if (intKey >= start) {\n            const value = obj[key];\n            delete obj[key];\n            if (move > 0 || intKey > start) {\n                obj[intKey + move] = value;\n            }\n        }\n    }\n}\n function determineLastEvent(e, lastEvent, inChartArea, isClick) {\n    if (!inChartArea || e.type === 'mouseout') {\n        return null;\n    }\n    if (isClick) {\n        return lastEvent;\n    }\n    return e;\n}\nfunction getSizeForArea(scale, chartArea, field) {\n    return scale.options.clip ? scale[field] : chartArea[field];\n}\nfunction getDatasetArea(meta, chartArea) {\n    const { xScale , yScale  } = meta;\n    if (xScale && yScale) {\n        return {\n            left: getSizeForArea(xScale, chartArea, 'left'),\n            right: getSizeForArea(xScale, chartArea, 'right'),\n            top: getSizeForArea(yScale, chartArea, 'top'),\n            bottom: getSizeForArea(yScale, chartArea, 'bottom')\n        };\n    }\n    return chartArea;\n}\nclass Chart {\n    static defaults = defaults;\n    static instances = instances;\n    static overrides = overrides;\n    static registry = registry;\n    static version = version;\n    static getChart = getChart;\n    static register(...items) {\n        registry.add(...items);\n        invalidatePlugins();\n    }\n    static unregister(...items) {\n        registry.remove(...items);\n        invalidatePlugins();\n    }\n    constructor(item, userConfig){\n        const config = this.config = new Config(userConfig);\n        const initialCanvas = getCanvas(item);\n        const existingChart = getChart(initialCanvas);\n        if (existingChart) {\n            throw new Error('Canvas is already in use. Chart with ID \\'' + existingChart.id + '\\'' + ' must be destroyed before the canvas with ID \\'' + existingChart.canvas.id + '\\' can be reused.');\n        }\n        const options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        this.platform = new (config.platform || _detectPlatform(initialCanvas))();\n        this.platform.updateConfig(config);\n        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);\n        const canvas = context && context.canvas;\n        const height = canvas && canvas.height;\n        const width = canvas && canvas.width;\n        this.id = uid();\n        this.ctx = context;\n        this.canvas = canvas;\n        this.width = width;\n        this.height = height;\n        this._options = options;\n        this._aspectRatio = this.aspectRatio;\n        this._layers = [];\n        this._metasets = [];\n        this._stacks = undefined;\n        this.boxes = [];\n        this.currentDevicePixelRatio = undefined;\n        this.chartArea = undefined;\n        this._active = [];\n        this._lastEvent = undefined;\n        this._listeners = {};\n         this._responsiveListeners = undefined;\n        this._sortedMetasets = [];\n        this.scales = {};\n        this._plugins = new PluginService();\n        this.$proxies = {};\n        this._hiddenIndices = {};\n        this.attached = false;\n        this._animationsDisabled = undefined;\n        this.$context = undefined;\n        this._doResize = debounce((mode)=>this.update(mode), options.resizeDelay || 0);\n        this._dataChanges = [];\n        instances[this.id] = this;\n        if (!context || !canvas) {\n            console.error(\"Failed to create chart: can't acquire context from the given item\");\n            return;\n        }\n        animator.listen(this, 'complete', onAnimationsComplete);\n        animator.listen(this, 'progress', onAnimationProgress);\n        this._initialize();\n        if (this.attached) {\n            this.update();\n        }\n    }\n    get aspectRatio() {\n        const { options: { aspectRatio , maintainAspectRatio  } , width , height , _aspectRatio  } = this;\n        if (!isNullOrUndef(aspectRatio)) {\n            return aspectRatio;\n        }\n        if (maintainAspectRatio && _aspectRatio) {\n            return _aspectRatio;\n        }\n        return height ? width / height : null;\n    }\n    get data() {\n        return this.config.data;\n    }\n    set data(data) {\n        this.config.data = data;\n    }\n    get options() {\n        return this._options;\n    }\n    set options(options) {\n        this.config.options = options;\n    }\n    get registry() {\n        return registry;\n    }\n _initialize() {\n        this.notifyPlugins('beforeInit');\n        if (this.options.responsive) {\n            this.resize();\n        } else {\n            retinaScale(this, this.options.devicePixelRatio);\n        }\n        this.bindEvents();\n        this.notifyPlugins('afterInit');\n        return this;\n    }\n    clear() {\n        clearCanvas(this.canvas, this.ctx);\n        return this;\n    }\n    stop() {\n        animator.stop(this);\n        return this;\n    }\n resize(width, height) {\n        if (!animator.running(this)) {\n            this._resize(width, height);\n        } else {\n            this._resizeBeforeDraw = {\n                width,\n                height\n            };\n        }\n    }\n    _resize(width, height) {\n        const options = this.options;\n        const canvas = this.canvas;\n        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;\n        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);\n        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();\n        const mode = this.width ? 'resize' : 'attach';\n        this.width = newSize.width;\n        this.height = newSize.height;\n        this._aspectRatio = this.aspectRatio;\n        if (!retinaScale(this, newRatio, true)) {\n            return;\n        }\n        this.notifyPlugins('resize', {\n            size: newSize\n        });\n        callback(options.onResize, [\n            this,\n            newSize\n        ], this);\n        if (this.attached) {\n            if (this._doResize(mode)) {\n                this.render();\n            }\n        }\n    }\n    ensureScalesHaveIDs() {\n        const options = this.options;\n        const scalesOptions = options.scales || {};\n        each(scalesOptions, (axisOptions, axisID)=>{\n            axisOptions.id = axisID;\n        });\n    }\n buildOrUpdateScales() {\n        const options = this.options;\n        const scaleOpts = options.scales;\n        const scales = this.scales;\n        const updated = Object.keys(scales).reduce((obj, id)=>{\n            obj[id] = false;\n            return obj;\n        }, {});\n        let items = [];\n        if (scaleOpts) {\n            items = items.concat(Object.keys(scaleOpts).map((id)=>{\n                const scaleOptions = scaleOpts[id];\n                const axis = determineAxis(id, scaleOptions);\n                const isRadial = axis === 'r';\n                const isHorizontal = axis === 'x';\n                return {\n                    options: scaleOptions,\n                    dposition: isRadial ? 'chartArea' : isHorizontal ? 'bottom' : 'left',\n                    dtype: isRadial ? 'radialLinear' : isHorizontal ? 'category' : 'linear'\n                };\n            }));\n        }\n        each(items, (item)=>{\n            const scaleOptions = item.options;\n            const id = scaleOptions.id;\n            const axis = determineAxis(id, scaleOptions);\n            const scaleType = valueOrDefault(scaleOptions.type, item.dtype);\n            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) {\n                scaleOptions.position = item.dposition;\n            }\n            updated[id] = true;\n            let scale = null;\n            if (id in scales && scales[id].type === scaleType) {\n                scale = scales[id];\n            } else {\n                const scaleClass = registry.getScale(scaleType);\n                scale = new scaleClass({\n                    id,\n                    type: scaleType,\n                    ctx: this.ctx,\n                    chart: this\n                });\n                scales[scale.id] = scale;\n            }\n            scale.init(scaleOptions, options);\n        });\n        each(updated, (hasUpdated, id)=>{\n            if (!hasUpdated) {\n                delete scales[id];\n            }\n        });\n        each(scales, (scale)=>{\n            layouts.configure(this, scale, scale.options);\n            layouts.addBox(this, scale);\n        });\n    }\n _updateMetasets() {\n        const metasets = this._metasets;\n        const numData = this.data.datasets.length;\n        const numMeta = metasets.length;\n        metasets.sort((a, b)=>a.index - b.index);\n        if (numMeta > numData) {\n            for(let i = numData; i < numMeta; ++i){\n                this._destroyDatasetMeta(i);\n            }\n            metasets.splice(numData, numMeta - numData);\n        }\n        this._sortedMetasets = metasets.slice(0).sort(compare2Level('order', 'index'));\n    }\n _removeUnreferencedMetasets() {\n        const { _metasets: metasets , data: { datasets  }  } = this;\n        if (metasets.length > datasets.length) {\n            delete this._stacks;\n        }\n        metasets.forEach((meta, index)=>{\n            if (datasets.filter((x)=>x === meta._dataset).length === 0) {\n                this._destroyDatasetMeta(index);\n            }\n        });\n    }\n    buildOrUpdateControllers() {\n        const newControllers = [];\n        const datasets = this.data.datasets;\n        let i, ilen;\n        this._removeUnreferencedMetasets();\n        for(i = 0, ilen = datasets.length; i < ilen; i++){\n            const dataset = datasets[i];\n            let meta = this.getDatasetMeta(i);\n            const type = dataset.type || this.config.type;\n            if (meta.type && meta.type !== type) {\n                this._destroyDatasetMeta(i);\n                meta = this.getDatasetMeta(i);\n            }\n            meta.type = type;\n            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);\n            meta.order = dataset.order || 0;\n            meta.index = i;\n            meta.label = '' + dataset.label;\n            meta.visible = this.isDatasetVisible(i);\n            if (meta.controller) {\n                meta.controller.updateIndex(i);\n                meta.controller.linkScales();\n            } else {\n                const ControllerClass = registry.getController(type);\n                const { datasetElementType , dataElementType  } = defaults.datasets[type];\n                Object.assign(ControllerClass, {\n                    dataElementType: registry.getElement(dataElementType),\n                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)\n                });\n                meta.controller = new ControllerClass(this, i);\n                newControllers.push(meta.controller);\n            }\n        }\n        this._updateMetasets();\n        return newControllers;\n    }\n _resetElements() {\n        each(this.data.datasets, (dataset, datasetIndex)=>{\n            this.getDatasetMeta(datasetIndex).controller.reset();\n        }, this);\n    }\n reset() {\n        this._resetElements();\n        this.notifyPlugins('reset');\n    }\n    update(mode) {\n        const config = this.config;\n        config.update();\n        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());\n        const animsDisabled = this._animationsDisabled = !options.animation;\n        this._updateScales();\n        this._checkEventBindings();\n        this._updateHiddenIndices();\n        this._plugins.invalidate();\n        if (this.notifyPlugins('beforeUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const newControllers = this.buildOrUpdateControllers();\n        this.notifyPlugins('beforeElementsUpdate');\n        let minPadding = 0;\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){\n            const { controller  } = this.getDatasetMeta(i);\n            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;\n            controller.buildOrUpdateElements(reset);\n            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);\n        }\n        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;\n        this._updateLayout(minPadding);\n        if (!animsDisabled) {\n            each(newControllers, (controller)=>{\n                controller.reset();\n            });\n        }\n        this._updateDatasets(mode);\n        this.notifyPlugins('afterUpdate', {\n            mode\n        });\n        this._layers.sort(compare2Level('z', '_idx'));\n        const { _active , _lastEvent  } = this;\n        if (_lastEvent) {\n            this._eventHandler(_lastEvent, true);\n        } else if (_active.length) {\n            this._updateHoverStyles(_active, _active, true);\n        }\n        this.render();\n    }\n _updateScales() {\n        each(this.scales, (scale)=>{\n            layouts.removeBox(this, scale);\n        });\n        this.ensureScalesHaveIDs();\n        this.buildOrUpdateScales();\n    }\n _checkEventBindings() {\n        const options = this.options;\n        const existingEvents = new Set(Object.keys(this._listeners));\n        const newEvents = new Set(options.events);\n        if (!setsEqual(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {\n            this.unbindEvents();\n            this.bindEvents();\n        }\n    }\n _updateHiddenIndices() {\n        const { _hiddenIndices  } = this;\n        const changes = this._getUniformDataChanges() || [];\n        for (const { method , start , count  } of changes){\n            const move = method === '_removeElements' ? -count : count;\n            moveNumericKeys(_hiddenIndices, start, move);\n        }\n    }\n _getUniformDataChanges() {\n        const _dataChanges = this._dataChanges;\n        if (!_dataChanges || !_dataChanges.length) {\n            return;\n        }\n        this._dataChanges = [];\n        const datasetCount = this.data.datasets.length;\n        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + ',' + c.splice(1).join(',')));\n        const changeSet = makeSet(0);\n        for(let i = 1; i < datasetCount; i++){\n            if (!setsEqual(changeSet, makeSet(i))) {\n                return;\n            }\n        }\n        return Array.from(changeSet).map((c)=>c.split(',')).map((a)=>({\n                method: a[1],\n                start: +a[2],\n                count: +a[3]\n            }));\n    }\n _updateLayout(minPadding) {\n        if (this.notifyPlugins('beforeLayout', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        layouts.update(this, this.width, this.height, minPadding);\n        const area = this.chartArea;\n        const noArea = area.width <= 0 || area.height <= 0;\n        this._layers = [];\n        each(this.boxes, (box)=>{\n            if (noArea && box.position === 'chartArea') {\n                return;\n            }\n            if (box.configure) {\n                box.configure();\n            }\n            this._layers.push(...box._layers());\n        }, this);\n        this._layers.forEach((item, index)=>{\n            item._idx = index;\n        });\n        this.notifyPlugins('afterLayout');\n    }\n _updateDatasets(mode) {\n        if (this.notifyPlugins('beforeDatasetsUpdate', {\n            mode,\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this.getDatasetMeta(i).controller.configure();\n        }\n        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._updateDataset(i, isFunction(mode) ? mode({\n                datasetIndex: i\n            }) : mode);\n        }\n        this.notifyPlugins('afterDatasetsUpdate', {\n            mode\n        });\n    }\n _updateDataset(index, mode) {\n        const meta = this.getDatasetMeta(index);\n        const args = {\n            meta,\n            index,\n            mode,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetUpdate', args) === false) {\n            return;\n        }\n        meta.controller._update(mode);\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetUpdate', args);\n    }\n    render() {\n        if (this.notifyPlugins('beforeRender', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        if (animator.has(this)) {\n            if (this.attached && !animator.running(this)) {\n                animator.start(this);\n            }\n        } else {\n            this.draw();\n            onAnimationsComplete({\n                chart: this\n            });\n        }\n    }\n    draw() {\n        let i;\n        if (this._resizeBeforeDraw) {\n            const { width , height  } = this._resizeBeforeDraw;\n            this._resizeBeforeDraw = null;\n            this._resize(width, height);\n        }\n        this.clear();\n        if (this.width <= 0 || this.height <= 0) {\n            return;\n        }\n        if (this.notifyPlugins('beforeDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const layers = this._layers;\n        for(i = 0; i < layers.length && layers[i].z <= 0; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this._drawDatasets();\n        for(; i < layers.length; ++i){\n            layers[i].draw(this.chartArea);\n        }\n        this.notifyPlugins('afterDraw');\n    }\n _getSortedDatasetMetas(filterVisible) {\n        const metasets = this._sortedMetasets;\n        const result = [];\n        let i, ilen;\n        for(i = 0, ilen = metasets.length; i < ilen; ++i){\n            const meta = metasets[i];\n            if (!filterVisible || meta.visible) {\n                result.push(meta);\n            }\n        }\n        return result;\n    }\n getSortedVisibleDatasetMetas() {\n        return this._getSortedDatasetMetas(true);\n    }\n _drawDatasets() {\n        if (this.notifyPlugins('beforeDatasetsDraw', {\n            cancelable: true\n        }) === false) {\n            return;\n        }\n        const metasets = this.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            this._drawDataset(metasets[i]);\n        }\n        this.notifyPlugins('afterDatasetsDraw');\n    }\n _drawDataset(meta) {\n        const ctx = this.ctx;\n        const clip = meta._clip;\n        const useClip = !clip.disabled;\n        const area = getDatasetArea(meta, this.chartArea);\n        const args = {\n            meta,\n            index: meta.index,\n            cancelable: true\n        };\n        if (this.notifyPlugins('beforeDatasetDraw', args) === false) {\n            return;\n        }\n        if (useClip) {\n            clipArea(ctx, {\n                left: clip.left === false ? 0 : area.left - clip.left,\n                right: clip.right === false ? this.width : area.right + clip.right,\n                top: clip.top === false ? 0 : area.top - clip.top,\n                bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom\n            });\n        }\n        meta.controller.draw();\n        if (useClip) {\n            unclipArea(ctx);\n        }\n        args.cancelable = false;\n        this.notifyPlugins('afterDatasetDraw', args);\n    }\n isPointInArea(point) {\n        return _isPointInArea(point, this.chartArea, this._minPadding);\n    }\n    getElementsAtEventForMode(e, mode, options, useFinalPosition) {\n        const method = Interaction.modes[mode];\n        if (typeof method === 'function') {\n            return method(this, e, options, useFinalPosition);\n        }\n        return [];\n    }\n    getDatasetMeta(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        const metasets = this._metasets;\n        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();\n        if (!meta) {\n            meta = {\n                type: null,\n                data: [],\n                dataset: null,\n                controller: null,\n                hidden: null,\n                xAxisID: null,\n                yAxisID: null,\n                order: dataset && dataset.order || 0,\n                index: datasetIndex,\n                _dataset: dataset,\n                _parsed: [],\n                _sorted: false\n            };\n            metasets.push(meta);\n        }\n        return meta;\n    }\n    getContext() {\n        return this.$context || (this.$context = createContext(null, {\n            chart: this,\n            type: 'chart'\n        }));\n    }\n    getVisibleDatasetCount() {\n        return this.getSortedVisibleDatasetMetas().length;\n    }\n    isDatasetVisible(datasetIndex) {\n        const dataset = this.data.datasets[datasetIndex];\n        if (!dataset) {\n            return false;\n        }\n        const meta = this.getDatasetMeta(datasetIndex);\n        return typeof meta.hidden === 'boolean' ? !meta.hidden : !dataset.hidden;\n    }\n    setDatasetVisibility(datasetIndex, visible) {\n        const meta = this.getDatasetMeta(datasetIndex);\n        meta.hidden = !visible;\n    }\n    toggleDataVisibility(index) {\n        this._hiddenIndices[index] = !this._hiddenIndices[index];\n    }\n    getDataVisibility(index) {\n        return !this._hiddenIndices[index];\n    }\n _updateVisibility(datasetIndex, dataIndex, visible) {\n        const mode = visible ? 'show' : 'hide';\n        const meta = this.getDatasetMeta(datasetIndex);\n        const anims = meta.controller._resolveAnimations(undefined, mode);\n        if (defined(dataIndex)) {\n            meta.data[dataIndex].hidden = !visible;\n            this.update();\n        } else {\n            this.setDatasetVisibility(datasetIndex, visible);\n            anims.update(meta, {\n                visible\n            });\n            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);\n        }\n    }\n    hide(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, false);\n    }\n    show(datasetIndex, dataIndex) {\n        this._updateVisibility(datasetIndex, dataIndex, true);\n    }\n _destroyDatasetMeta(datasetIndex) {\n        const meta = this._metasets[datasetIndex];\n        if (meta && meta.controller) {\n            meta.controller._destroy();\n        }\n        delete this._metasets[datasetIndex];\n    }\n    _stop() {\n        let i, ilen;\n        this.stop();\n        animator.remove(this);\n        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i){\n            this._destroyDatasetMeta(i);\n        }\n    }\n    destroy() {\n        this.notifyPlugins('beforeDestroy');\n        const { canvas , ctx  } = this;\n        this._stop();\n        this.config.clearCache();\n        if (canvas) {\n            this.unbindEvents();\n            clearCanvas(canvas, ctx);\n            this.platform.releaseContext(ctx);\n            this.canvas = null;\n            this.ctx = null;\n        }\n        delete instances[this.id];\n        this.notifyPlugins('afterDestroy');\n    }\n    toBase64Image(...args) {\n        return this.canvas.toDataURL(...args);\n    }\n bindEvents() {\n        this.bindUserEvents();\n        if (this.options.responsive) {\n            this.bindResponsiveEvents();\n        } else {\n            this.attached = true;\n        }\n    }\n bindUserEvents() {\n        const listeners = this._listeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const listener = (e, x, y)=>{\n            e.offsetX = x;\n            e.offsetY = y;\n            this._eventHandler(e);\n        };\n        each(this.options.events, (type)=>_add(type, listener));\n    }\n bindResponsiveEvents() {\n        if (!this._responsiveListeners) {\n            this._responsiveListeners = {};\n        }\n        const listeners = this._responsiveListeners;\n        const platform = this.platform;\n        const _add = (type, listener)=>{\n            platform.addEventListener(this, type, listener);\n            listeners[type] = listener;\n        };\n        const _remove = (type, listener)=>{\n            if (listeners[type]) {\n                platform.removeEventListener(this, type, listener);\n                delete listeners[type];\n            }\n        };\n        const listener = (width, height)=>{\n            if (this.canvas) {\n                this.resize(width, height);\n            }\n        };\n        let detached;\n        const attached = ()=>{\n            _remove('attach', attached);\n            this.attached = true;\n            this.resize();\n            _add('resize', listener);\n            _add('detach', detached);\n        };\n        detached = ()=>{\n            this.attached = false;\n            _remove('resize', listener);\n            this._stop();\n            this._resize(0, 0);\n            _add('attach', attached);\n        };\n        if (platform.isAttached(this.canvas)) {\n            attached();\n        } else {\n            detached();\n        }\n    }\n unbindEvents() {\n        each(this._listeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._listeners = {};\n        each(this._responsiveListeners, (listener, type)=>{\n            this.platform.removeEventListener(this, type, listener);\n        });\n        this._responsiveListeners = undefined;\n    }\n    updateHoverStyle(items, mode, enabled) {\n        const prefix = enabled ? 'set' : 'remove';\n        let meta, item, i, ilen;\n        if (mode === 'dataset') {\n            meta = this.getDatasetMeta(items[0].datasetIndex);\n            meta.controller['_' + prefix + 'DatasetHoverStyle']();\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            item = items[i];\n            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;\n            if (controller) {\n                controller[prefix + 'HoverStyle'](item.element, item.datasetIndex, item.index);\n            }\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements) {\n        const lastActive = this._active || [];\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('No dataset found at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed) {\n            this._active = active;\n            this._lastEvent = null;\n            this._updateHoverStyles(active, lastActive);\n        }\n    }\n notifyPlugins(hook, args, filter) {\n        return this._plugins.notify(this, hook, args, filter);\n    }\n isPluginEnabled(pluginId) {\n        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;\n    }\n _updateHoverStyles(active, lastActive, replay) {\n        const hoverOptions = this.options.hover;\n        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));\n        const deactivated = diff(lastActive, active);\n        const activated = replay ? active : diff(active, lastActive);\n        if (deactivated.length) {\n            this.updateHoverStyle(deactivated, hoverOptions.mode, false);\n        }\n        if (activated.length && hoverOptions.mode) {\n            this.updateHoverStyle(activated, hoverOptions.mode, true);\n        }\n    }\n _eventHandler(e, replay) {\n        const args = {\n            event: e,\n            replay,\n            cancelable: true,\n            inChartArea: this.isPointInArea(e)\n        };\n        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);\n        if (this.notifyPlugins('beforeEvent', args, eventFilter) === false) {\n            return;\n        }\n        const changed = this._handleEvent(e, replay, args.inChartArea);\n        args.cancelable = false;\n        this.notifyPlugins('afterEvent', args, eventFilter);\n        if (changed || args.changed) {\n            this.render();\n        }\n        return this;\n    }\n _handleEvent(e, replay, inChartArea) {\n        const { _active: lastActive = [] , options  } = this;\n        const useFinalPosition = replay;\n        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);\n        const isClick = _isClickEvent(e);\n        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);\n        if (inChartArea) {\n            this._lastEvent = null;\n            callback(options.onHover, [\n                e,\n                active,\n                this\n            ], this);\n            if (isClick) {\n                callback(options.onClick, [\n                    e,\n                    active,\n                    this\n                ], this);\n            }\n        }\n        const changed = !_elementsEqual(active, lastActive);\n        if (changed || replay) {\n            this._active = active;\n            this._updateHoverStyles(active, lastActive, replay);\n        }\n        this._lastEvent = lastEvent;\n        return changed;\n    }\n _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive;\n        }\n        const hoverOptions = this.options.hover;\n        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);\n    }\n}\nfunction invalidatePlugins() {\n    return each(Chart.instances, (chart)=>chart._plugins.invalidate());\n}\n\nfunction clipArc(ctx, element, endAngle) {\n    const { startAngle , pixelMargin , x , y , outerRadius , innerRadius  } = element;\n    let angleMargin = pixelMargin / outerRadius;\n    // Draw an inner border by clipping the arc and drawing a double-width border\n    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders\n    ctx.beginPath();\n    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);\n    if (innerRadius > pixelMargin) {\n        angleMargin = pixelMargin / innerRadius;\n        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);\n    } else {\n        ctx.arc(x, y, pixelMargin, endAngle + HALF_PI, startAngle - HALF_PI);\n    }\n    ctx.closePath();\n    ctx.clip();\n}\nfunction toRadiusCorners(value) {\n    return _readValueToProps(value, [\n        'outerStart',\n        'outerEnd',\n        'innerStart',\n        'innerEnd'\n    ]);\n}\n/**\n * Parse border radius from the provided options\n */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {\n    const o = toRadiusCorners(arc.options.borderRadius);\n    const halfThickness = (outerRadius - innerRadius) / 2;\n    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);\n    // Outer limits are complicated. We want to compute the available angular distance at\n    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.\n    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.\n    //\n    // If the borderRadius is large, that value can become negative.\n    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius\n    // we know that the thickness term will dominate and compute the limits at that point\n    const computeOuterLimit = (val)=>{\n        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;\n        return _limitValue(val, 0, Math.min(halfThickness, outerArcLimit));\n    };\n    return {\n        outerStart: computeOuterLimit(o.outerStart),\n        outerEnd: computeOuterLimit(o.outerEnd),\n        innerStart: _limitValue(o.innerStart, 0, innerLimit),\n        innerEnd: _limitValue(o.innerEnd, 0, innerLimit)\n    };\n}\n/**\n * Convert (r, 𝜃) to (x, y)\n */ function rThetaToXY(r, theta, x, y) {\n    return {\n        x: x + r * Math.cos(theta),\n        y: y + r * Math.sin(theta)\n    };\n}\n/**\n * Path the arc, respecting border radius by separating into left and right halves.\n *\n *   Start      End\n *\n *    1--->a--->2    Outer\n *   /           \\\n *   8           3\n *   |           |\n *   |           |\n *   7           4\n *   \\           /\n *    6<---b<---5    Inner\n */ function pathArc(ctx, element, offset, spacing, end, circular) {\n    const { x , y , startAngle: start , pixelMargin , innerRadius: innerR  } = element;\n    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);\n    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;\n    let spacingOffset = 0;\n    const alpha = end - start;\n    if (spacing) {\n        // When spacing is present, it is the same for all items\n        // So we adjust the start and end angle of the arc such that\n        // the distance is the same as it would be without the spacing\n        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;\n        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;\n        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;\n        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;\n        spacingOffset = (alpha - adjustedAngle) / 2;\n    }\n    const beta = Math.max(0.001, alpha * outerRadius - offset / PI) / outerRadius;\n    const angleOffset = (alpha - beta) / 2;\n    const startAngle = start + angleOffset + spacingOffset;\n    const endAngle = end - angleOffset - spacingOffset;\n    const { outerStart , outerEnd , innerStart , innerEnd  } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);\n    const outerStartAdjustedRadius = outerRadius - outerStart;\n    const outerEndAdjustedRadius = outerRadius - outerEnd;\n    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;\n    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;\n    const innerStartAdjustedRadius = innerRadius + innerStart;\n    const innerEndAdjustedRadius = innerRadius + innerEnd;\n    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;\n    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;\n    ctx.beginPath();\n    if (circular) {\n        // The first arc segments from point 1 to point a to point 2\n        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;\n        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);\n        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);\n        // The corner segment from point 2 to point 3\n        if (outerEnd > 0) {\n            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + HALF_PI);\n        }\n        // The line from point 3 to point 4\n        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);\n        ctx.lineTo(p4.x, p4.y);\n        // The corner segment from point 4 to point 5\n        if (innerEnd > 0) {\n            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + HALF_PI, innerEndAdjustedAngle + Math.PI);\n        }\n        // The inner arc from point 5 to point b to point 6\n        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;\n        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);\n        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);\n        // The corner segment from point 6 to point 7\n        if (innerStart > 0) {\n            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - HALF_PI);\n        }\n        // The line from point 7 to point 8\n        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);\n        ctx.lineTo(p8.x, p8.y);\n        // The corner segment from point 8 to point 1\n        if (outerStart > 0) {\n            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);\n            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - HALF_PI, outerStartAdjustedAngle);\n        }\n    } else {\n        ctx.moveTo(x, y);\n        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;\n        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerStartX, outerStartY);\n        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;\n        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;\n        ctx.lineTo(outerEndX, outerEndY);\n    }\n    ctx.closePath();\n}\nfunction drawArc(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference  } = element;\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.fill();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    pathArc(ctx, element, offset, spacing, endAngle, circular);\n    ctx.fill();\n    return endAngle;\n}\nfunction drawBorder(ctx, element, offset, spacing, circular) {\n    const { fullCircles , startAngle , circumference , options  } = element;\n    const { borderWidth , borderJoinStyle , borderDash , borderDashOffset  } = options;\n    const inner = options.borderAlign === 'inner';\n    if (!borderWidth) {\n        return;\n    }\n    ctx.setLineDash(borderDash || []);\n    ctx.lineDashOffset = borderDashOffset;\n    if (inner) {\n        ctx.lineWidth = borderWidth * 2;\n        ctx.lineJoin = borderJoinStyle || 'round';\n    } else {\n        ctx.lineWidth = borderWidth;\n        ctx.lineJoin = borderJoinStyle || 'bevel';\n    }\n    let endAngle = element.endAngle;\n    if (fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        for(let i = 0; i < fullCircles; ++i){\n            ctx.stroke();\n        }\n        if (!isNaN(circumference)) {\n            endAngle = startAngle + (circumference % TAU || TAU);\n        }\n    }\n    if (inner) {\n        clipArc(ctx, element, endAngle);\n    }\n    if (!fullCircles) {\n        pathArc(ctx, element, offset, spacing, endAngle, circular);\n        ctx.stroke();\n    }\n}\nclass ArcElement extends Element {\n    static id = 'arc';\n    static defaults = {\n        borderAlign: 'center',\n        borderColor: '#fff',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: undefined,\n        borderRadius: 0,\n        borderWidth: 2,\n        offset: 0,\n        spacing: 0,\n        angle: undefined,\n        circular: true\n    };\n    static defaultRoutes = {\n        backgroundColor: 'backgroundColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash'\n    };\n    circumference;\n    endAngle;\n    fullCircles;\n    innerRadius;\n    outerRadius;\n    pixelMargin;\n    startAngle;\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.circumference = undefined;\n        this.startAngle = undefined;\n        this.endAngle = undefined;\n        this.innerRadius = undefined;\n        this.outerRadius = undefined;\n        this.pixelMargin = 0;\n        this.fullCircles = 0;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(chartX, chartY, useFinalPosition) {\n        const point = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        const { angle , distance  } = getAngleFromPoint(point, {\n            x: chartX,\n            y: chartY\n        });\n        const { startAngle , endAngle , innerRadius , outerRadius , circumference  } = this.getProps([\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius',\n            'circumference'\n        ], useFinalPosition);\n        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;\n        const _circumference = valueOrDefault(circumference, endAngle - startAngle);\n        const nonZeroBetween = _angleBetween(angle, startAngle, endAngle) && startAngle !== endAngle;\n        const betweenAngles = _circumference >= TAU || nonZeroBetween;\n        const withinRadius = _isBetween(distance, innerRadius + rAdjust, outerRadius + rAdjust);\n        return betweenAngles && withinRadius;\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , startAngle , endAngle , innerRadius , outerRadius  } = this.getProps([\n            'x',\n            'y',\n            'startAngle',\n            'endAngle',\n            'innerRadius',\n            'outerRadius'\n        ], useFinalPosition);\n        const { offset , spacing  } = this.options;\n        const halfAngle = (startAngle + endAngle) / 2;\n        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;\n        return {\n            x: x + Math.cos(halfAngle) * halfRadius,\n            y: y + Math.sin(halfAngle) * halfRadius\n        };\n    }\n    tooltipPosition(useFinalPosition) {\n        return this.getCenterPoint(useFinalPosition);\n    }\n    draw(ctx) {\n        const { options , circumference  } = this;\n        const offset = (options.offset || 0) / 4;\n        const spacing = (options.spacing || 0) / 2;\n        const circular = options.circular;\n        this.pixelMargin = options.borderAlign === 'inner' ? 0.33 : 0;\n        this.fullCircles = circumference > TAU ? Math.floor(circumference / TAU) : 0;\n        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) {\n            return;\n        }\n        ctx.save();\n        const halfAngle = (this.startAngle + this.endAngle) / 2;\n        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);\n        const fix = 1 - Math.sin(Math.min(PI, circumference || 0));\n        const radiusOffset = offset * fix;\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        drawArc(ctx, this, radiusOffset, spacing, circular);\n        drawBorder(ctx, this, radiusOffset, spacing, circular);\n        ctx.restore();\n    }\n}\n\nfunction setStyle(ctx, options, style = options) {\n    ctx.lineCap = valueOrDefault(style.borderCapStyle, options.borderCapStyle);\n    ctx.setLineDash(valueOrDefault(style.borderDash, options.borderDash));\n    ctx.lineDashOffset = valueOrDefault(style.borderDashOffset, options.borderDashOffset);\n    ctx.lineJoin = valueOrDefault(style.borderJoinStyle, options.borderJoinStyle);\n    ctx.lineWidth = valueOrDefault(style.borderWidth, options.borderWidth);\n    ctx.strokeStyle = valueOrDefault(style.borderColor, options.borderColor);\n}\nfunction lineTo(ctx, previous, target) {\n    ctx.lineTo(target.x, target.y);\n}\n function getLineMethod(options) {\n    if (options.stepped) {\n        return _steppedLineTo;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierCurveTo;\n    }\n    return lineTo;\n}\nfunction pathVars(points, segment, params = {}) {\n    const count = points.length;\n    const { start: paramsStart = 0 , end: paramsEnd = count - 1  } = params;\n    const { start: segmentStart , end: segmentEnd  } = segment;\n    const start = Math.max(paramsStart, segmentStart);\n    const end = Math.min(paramsEnd, segmentEnd);\n    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;\n    return {\n        count,\n        start,\n        loop: segment.loop,\n        ilen: end < start && !outside ? count + end - start : end - start\n    };\n}\n function pathSegment(ctx, line, segment, params) {\n    const { points , options  } = line;\n    const { count , start , loop , ilen  } = pathVars(points, segment, params);\n    const lineMethod = getLineMethod(options);\n    let { move =true , reverse  } = params || {};\n    let i, point, prev;\n    for(i = 0; i <= ilen; ++i){\n        point = points[(start + (reverse ? ilen - i : i)) % count];\n        if (point.skip) {\n            continue;\n        } else if (move) {\n            ctx.moveTo(point.x, point.y);\n            move = false;\n        } else {\n            lineMethod(ctx, prev, point, reverse, options.stepped);\n        }\n        prev = point;\n    }\n    if (loop) {\n        point = points[(start + (reverse ? ilen : 0)) % count];\n        lineMethod(ctx, prev, point, reverse, options.stepped);\n    }\n    return !!loop;\n}\n function fastPathSegment(ctx, line, segment, params) {\n    const points = line.points;\n    const { count , start , ilen  } = pathVars(points, segment, params);\n    const { move =true , reverse  } = params || {};\n    let avgX = 0;\n    let countX = 0;\n    let i, point, prevX, minY, maxY, lastY;\n    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;\n    const drawX = ()=>{\n        if (minY !== maxY) {\n            ctx.lineTo(avgX, maxY);\n            ctx.lineTo(avgX, minY);\n            ctx.lineTo(avgX, lastY);\n        }\n    };\n    if (move) {\n        point = points[pointIndex(0)];\n        ctx.moveTo(point.x, point.y);\n    }\n    for(i = 0; i <= ilen; ++i){\n        point = points[pointIndex(i)];\n        if (point.skip) {\n            continue;\n        }\n        const x = point.x;\n        const y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n            } else if (y > maxY) {\n                maxY = y;\n            }\n            avgX = (countX * avgX + x) / ++countX;\n        } else {\n            drawX();\n            ctx.lineTo(x, y);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n        }\n        lastY = y;\n    }\n    drawX();\n}\n function _getSegmentMethod(line) {\n    const opts = line.options;\n    const borderDash = opts.borderDash && opts.borderDash.length;\n    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== 'monotone' && !opts.stepped && !borderDash;\n    return useFastPath ? fastPathSegment : pathSegment;\n}\n function _getInterpolationMethod(options) {\n    if (options.stepped) {\n        return _steppedInterpolation;\n    }\n    if (options.tension || options.cubicInterpolationMode === 'monotone') {\n        return _bezierInterpolation;\n    }\n    return _pointInLine;\n}\nfunction strokePathWithCache(ctx, line, start, count) {\n    let path = line._path;\n    if (!path) {\n        path = line._path = new Path2D();\n        if (line.path(path, start, count)) {\n            path.closePath();\n        }\n    }\n    setStyle(ctx, line.options);\n    ctx.stroke(path);\n}\nfunction strokePathDirect(ctx, line, start, count) {\n    const { segments , options  } = line;\n    const segmentMethod = _getSegmentMethod(line);\n    for (const segment of segments){\n        setStyle(ctx, options, segment.style);\n        ctx.beginPath();\n        if (segmentMethod(ctx, line, segment, {\n            start,\n            end: start + count - 1\n        })) {\n            ctx.closePath();\n        }\n        ctx.stroke();\n    }\n}\nconst usePath2D = typeof Path2D === 'function';\nfunction draw(ctx, line, start, count) {\n    if (usePath2D && !line.options.segment) {\n        strokePathWithCache(ctx, line, start, count);\n    } else {\n        strokePathDirect(ctx, line, start, count);\n    }\n}\nclass LineElement extends Element {\n    static id = 'line';\n static defaults = {\n        borderCapStyle: 'butt',\n        borderDash: [],\n        borderDashOffset: 0,\n        borderJoinStyle: 'miter',\n        borderWidth: 3,\n        capBezierPoints: true,\n        cubicInterpolationMode: 'default',\n        fill: false,\n        spanGaps: false,\n        stepped: false,\n        tension: 0\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    static descriptors = {\n        _scriptable: true,\n        _indexable: (name)=>name !== 'borderDash' && name !== 'fill'\n    };\n    constructor(cfg){\n        super();\n        this.animated = true;\n        this.options = undefined;\n        this._chart = undefined;\n        this._loop = undefined;\n        this._fullLoop = undefined;\n        this._path = undefined;\n        this._points = undefined;\n        this._segments = undefined;\n        this._decimated = false;\n        this._pointsUpdated = false;\n        this._datasetIndex = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    updateControlPoints(chartArea, indexAxis) {\n        const options = this.options;\n        if ((options.tension || options.cubicInterpolationMode === 'monotone') && !options.stepped && !this._pointsUpdated) {\n            const loop = options.spanGaps ? this._loop : this._fullLoop;\n            _updateBezierControlPoints(this._points, options, chartArea, loop, indexAxis);\n            this._pointsUpdated = true;\n        }\n    }\n    set points(points) {\n        this._points = points;\n        delete this._segments;\n        delete this._path;\n        this._pointsUpdated = false;\n    }\n    get points() {\n        return this._points;\n    }\n    get segments() {\n        return this._segments || (this._segments = _computeSegments(this, this.options.segment));\n    }\n first() {\n        const segments = this.segments;\n        const points = this.points;\n        return segments.length && points[segments[0].start];\n    }\n last() {\n        const segments = this.segments;\n        const points = this.points;\n        const count = segments.length;\n        return count && points[segments[count - 1].end];\n    }\n interpolate(point, property) {\n        const options = this.options;\n        const value = point[property];\n        const points = this.points;\n        const segments = _boundSegments(this, {\n            property,\n            start: value,\n            end: value\n        });\n        if (!segments.length) {\n            return;\n        }\n        const result = [];\n        const _interpolate = _getInterpolationMethod(options);\n        let i, ilen;\n        for(i = 0, ilen = segments.length; i < ilen; ++i){\n            const { start , end  } = segments[i];\n            const p1 = points[start];\n            const p2 = points[end];\n            if (p1 === p2) {\n                result.push(p1);\n                continue;\n            }\n            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));\n            const interpolated = _interpolate(p1, p2, t, options.stepped);\n            interpolated[property] = point[property];\n            result.push(interpolated);\n        }\n        return result.length === 1 ? result[0] : result;\n    }\n pathSegment(ctx, segment, params) {\n        const segmentMethod = _getSegmentMethod(this);\n        return segmentMethod(ctx, this, segment, params);\n    }\n path(ctx, start, count) {\n        const segments = this.segments;\n        const segmentMethod = _getSegmentMethod(this);\n        let loop = this._loop;\n        start = start || 0;\n        count = count || this.points.length - start;\n        for (const segment of segments){\n            loop &= segmentMethod(ctx, this, segment, {\n                start,\n                end: start + count - 1\n            });\n        }\n        return !!loop;\n    }\n draw(ctx, chartArea, start, count) {\n        const options = this.options || {};\n        const points = this.points || [];\n        if (points.length && options.borderWidth) {\n            ctx.save();\n            draw(ctx, this, start, count);\n            ctx.restore();\n        }\n        if (this.animated) {\n            this._pointsUpdated = false;\n            this._path = undefined;\n        }\n    }\n}\n\nfunction inRange$1(el, pos, axis, useFinalPosition) {\n    const options = el.options;\n    const { [axis]: value  } = el.getProps([\n        axis\n    ], useFinalPosition);\n    return Math.abs(pos - value) < options.radius + options.hitRadius;\n}\nclass PointElement extends Element {\n    static id = 'point';\n    parsed;\n    skip;\n    stop;\n    /**\n   * @type {any}\n   */ static defaults = {\n        borderWidth: 1,\n        hitRadius: 1,\n        hoverBorderWidth: 1,\n        hoverRadius: 4,\n        pointStyle: 'circle',\n        radius: 3,\n        rotation: 0\n    };\n    /**\n   * @type {any}\n   */ static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.parsed = undefined;\n        this.skip = undefined;\n        this.stop = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        const options = this.options;\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange$1(this, mouseX, 'x', useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange$1(this, mouseY, 'y', useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y  } = this.getProps([\n            'x',\n            'y'\n        ], useFinalPosition);\n        return {\n            x,\n            y\n        };\n    }\n    size(options) {\n        options = options || this.options || {};\n        let radius = options.radius || 0;\n        radius = Math.max(radius, radius && options.hoverRadius || 0);\n        const borderWidth = radius && options.borderWidth || 0;\n        return (radius + borderWidth) * 2;\n    }\n    draw(ctx, area) {\n        const options = this.options;\n        if (this.skip || options.radius < 0.1 || !_isPointInArea(this, area, this.size(options) / 2)) {\n            return;\n        }\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.fillStyle = options.backgroundColor;\n        drawPoint(ctx, options, this.x, this.y);\n    }\n    getRange() {\n        const options = this.options || {};\n        // @ts-expect-error Fallbacks should never be hit in practice\n        return options.radius + options.hitRadius;\n    }\n}\n\nfunction getBarBounds(bar, useFinalPosition) {\n    const { x , y , base , width , height  } =  bar.getProps([\n        'x',\n        'y',\n        'base',\n        'width',\n        'height'\n    ], useFinalPosition);\n    let left, right, top, bottom, half;\n    if (bar.horizontal) {\n        half = height / 2;\n        left = Math.min(x, base);\n        right = Math.max(x, base);\n        top = y - half;\n        bottom = y + half;\n    } else {\n        half = width / 2;\n        left = x - half;\n        right = x + half;\n        top = Math.min(y, base);\n        bottom = Math.max(y, base);\n    }\n    return {\n        left,\n        top,\n        right,\n        bottom\n    };\n}\nfunction skipOrLimit(skip, value, min, max) {\n    return skip ? 0 : _limitValue(value, min, max);\n}\nfunction parseBorderWidth(bar, maxW, maxH) {\n    const value = bar.options.borderWidth;\n    const skip = bar.borderSkipped;\n    const o = toTRBL(value);\n    return {\n        t: skipOrLimit(skip.top, o.top, 0, maxH),\n        r: skipOrLimit(skip.right, o.right, 0, maxW),\n        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),\n        l: skipOrLimit(skip.left, o.left, 0, maxW)\n    };\n}\nfunction parseBorderRadius(bar, maxW, maxH) {\n    const { enableBorderRadius  } = bar.getProps([\n        'enableBorderRadius'\n    ]);\n    const value = bar.options.borderRadius;\n    const o = toTRBLCorners(value);\n    const maxR = Math.min(maxW, maxH);\n    const skip = bar.borderSkipped;\n    const enableBorder = enableBorderRadius || isObject(value);\n    return {\n        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),\n        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),\n        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),\n        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)\n    };\n}\nfunction boundingRects(bar) {\n    const bounds = getBarBounds(bar);\n    const width = bounds.right - bounds.left;\n    const height = bounds.bottom - bounds.top;\n    const border = parseBorderWidth(bar, width / 2, height / 2);\n    const radius = parseBorderRadius(bar, width / 2, height / 2);\n    return {\n        outer: {\n            x: bounds.left,\n            y: bounds.top,\n            w: width,\n            h: height,\n            radius\n        },\n        inner: {\n            x: bounds.left + border.l,\n            y: bounds.top + border.t,\n            w: width - border.l - border.r,\n            h: height - border.t - border.b,\n            radius: {\n                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),\n                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),\n                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),\n                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))\n            }\n        }\n    };\n}\nfunction inRange(bar, x, y, useFinalPosition) {\n    const skipX = x === null;\n    const skipY = y === null;\n    const skipBoth = skipX && skipY;\n    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);\n    return bounds && (skipX || _isBetween(x, bounds.left, bounds.right)) && (skipY || _isBetween(y, bounds.top, bounds.bottom));\n}\nfunction hasRadius(radius) {\n    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;\n}\n function addNormalRectPath(ctx, rect) {\n    ctx.rect(rect.x, rect.y, rect.w, rect.h);\n}\nfunction inflateRect(rect, amount, refRect = {}) {\n    const x = rect.x !== refRect.x ? -amount : 0;\n    const y = rect.y !== refRect.y ? -amount : 0;\n    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;\n    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;\n    return {\n        x: rect.x + x,\n        y: rect.y + y,\n        w: rect.w + w,\n        h: rect.h + h,\n        radius: rect.radius\n    };\n}\nclass BarElement extends Element {\n    static id = 'bar';\n static defaults = {\n        borderSkipped: 'start',\n        borderWidth: 0,\n        borderRadius: 0,\n        inflateAmount: 'auto',\n        pointStyle: undefined\n    };\n static defaultRoutes = {\n        backgroundColor: 'backgroundColor',\n        borderColor: 'borderColor'\n    };\n    constructor(cfg){\n        super();\n        this.options = undefined;\n        this.horizontal = undefined;\n        this.base = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.inflateAmount = undefined;\n        if (cfg) {\n            Object.assign(this, cfg);\n        }\n    }\n    draw(ctx) {\n        const { inflateAmount , options: { borderColor , backgroundColor  }  } = this;\n        const { inner , outer  } = boundingRects(this);\n        const addRectPath = hasRadius(outer.radius) ? addRoundedRectPath : addNormalRectPath;\n        ctx.save();\n        if (outer.w !== inner.w || outer.h !== inner.h) {\n            ctx.beginPath();\n            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));\n            ctx.clip();\n            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));\n            ctx.fillStyle = borderColor;\n            ctx.fill('evenodd');\n        }\n        ctx.beginPath();\n        addRectPath(ctx, inflateRect(inner, inflateAmount));\n        ctx.fillStyle = backgroundColor;\n        ctx.fill();\n        ctx.restore();\n    }\n    inRange(mouseX, mouseY, useFinalPosition) {\n        return inRange(this, mouseX, mouseY, useFinalPosition);\n    }\n    inXRange(mouseX, useFinalPosition) {\n        return inRange(this, mouseX, null, useFinalPosition);\n    }\n    inYRange(mouseY, useFinalPosition) {\n        return inRange(this, null, mouseY, useFinalPosition);\n    }\n    getCenterPoint(useFinalPosition) {\n        const { x , y , base , horizontal  } =  this.getProps([\n            'x',\n            'y',\n            'base',\n            'horizontal'\n        ], useFinalPosition);\n        return {\n            x: horizontal ? (x + base) / 2 : x,\n            y: horizontal ? y : (y + base) / 2\n        };\n    }\n    getRange(axis) {\n        return axis === 'x' ? this.width / 2 : this.height / 2;\n    }\n}\n\nvar elements = /*#__PURE__*/Object.freeze({\n__proto__: null,\nArcElement: ArcElement,\nBarElement: BarElement,\nLineElement: LineElement,\nPointElement: PointElement\n});\n\nconst BORDER_COLORS = [\n    'rgb(54, 162, 235)',\n    'rgb(255, 99, 132)',\n    'rgb(255, 159, 64)',\n    'rgb(255, 205, 86)',\n    'rgb(75, 192, 192)',\n    'rgb(153, 102, 255)',\n    'rgb(201, 203, 207)' // grey\n];\n// Border colors with 50% transparency\nconst BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace('rgb(', 'rgba(').replace(')', ', 0.5)'));\nfunction getBorderColor(i) {\n    return BORDER_COLORS[i % BORDER_COLORS.length];\n}\nfunction getBackgroundColor(i) {\n    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];\n}\nfunction colorizeDefaultDataset(dataset, i) {\n    dataset.borderColor = getBorderColor(i);\n    dataset.backgroundColor = getBackgroundColor(i);\n    return ++i;\n}\nfunction colorizeDoughnutDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));\n    return i;\n}\nfunction colorizePolarAreaDataset(dataset, i) {\n    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));\n    return i;\n}\nfunction getColorizer(chart) {\n    let i = 0;\n    return (dataset, datasetIndex)=>{\n        const controller = chart.getDatasetMeta(datasetIndex).controller;\n        if (controller instanceof DoughnutController) {\n            i = colorizeDoughnutDataset(dataset, i);\n        } else if (controller instanceof PolarAreaController) {\n            i = colorizePolarAreaDataset(dataset, i);\n        } else if (controller) {\n            i = colorizeDefaultDataset(dataset, i);\n        }\n    };\n}\nfunction containsColorsDefinitions(descriptors) {\n    let k;\n    for(k in descriptors){\n        if (descriptors[k].borderColor || descriptors[k].backgroundColor) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction containsColorsDefinition(descriptor) {\n    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);\n}\nfunction containsDefaultColorsDefenitions() {\n    return defaults.borderColor !== 'rgba(0,0,0,0.1)' || defaults.backgroundColor !== 'rgba(0,0,0,0.1)';\n}\nvar plugin_colors = {\n    id: 'colors',\n    defaults: {\n        enabled: true,\n        forceOverride: false\n    },\n    beforeLayout (chart, _args, options) {\n        if (!options.enabled) {\n            return;\n        }\n        const { data: { datasets  } , options: chartOptions  } = chart.config;\n        const { elements  } = chartOptions;\n        const containsColorDefenition = containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements) || containsDefaultColorsDefenitions();\n        if (!options.forceOverride && containsColorDefenition) {\n            return;\n        }\n        const colorizer = getColorizer(chart);\n        datasets.forEach(colorizer);\n    }\n};\n\nfunction lttbDecimation(data, start, count, availableWidth, options) {\n const samples = options.samples || availableWidth;\n    if (samples >= count) {\n        return data.slice(start, start + count);\n    }\n    const decimated = [];\n    const bucketWidth = (count - 2) / (samples - 2);\n    let sampledIndex = 0;\n    const endIndex = start + count - 1;\n    let a = start;\n    let i, maxAreaPoint, maxArea, area, nextA;\n    decimated[sampledIndex++] = data[a];\n    for(i = 0; i < samples - 2; i++){\n        let avgX = 0;\n        let avgY = 0;\n        let j;\n        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;\n        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;\n        const avgRangeLength = avgRangeEnd - avgRangeStart;\n        for(j = avgRangeStart; j < avgRangeEnd; j++){\n            avgX += data[j].x;\n            avgY += data[j].y;\n        }\n        avgX /= avgRangeLength;\n        avgY /= avgRangeLength;\n        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;\n        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;\n        const { x: pointAx , y: pointAy  } = data[a];\n        maxArea = area = -1;\n        for(j = rangeOffs; j < rangeTo; j++){\n            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));\n            if (area > maxArea) {\n                maxArea = area;\n                maxAreaPoint = data[j];\n                nextA = j;\n            }\n        }\n        decimated[sampledIndex++] = maxAreaPoint;\n        a = nextA;\n    }\n    decimated[sampledIndex++] = data[endIndex];\n    return decimated;\n}\nfunction minMaxDecimation(data, start, count, availableWidth) {\n    let avgX = 0;\n    let countX = 0;\n    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;\n    const decimated = [];\n    const endIndex = start + count - 1;\n    const xMin = data[start].x;\n    const xMax = data[endIndex].x;\n    const dx = xMax - xMin;\n    for(i = start; i < start + count; ++i){\n        point = data[i];\n        x = (point.x - xMin) / dx * availableWidth;\n        y = point.y;\n        const truncX = x | 0;\n        if (truncX === prevX) {\n            if (y < minY) {\n                minY = y;\n                minIndex = i;\n            } else if (y > maxY) {\n                maxY = y;\n                maxIndex = i;\n            }\n            avgX = (countX * avgX + point.x) / ++countX;\n        } else {\n            const lastIndex = i - 1;\n            if (!isNullOrUndef(minIndex) && !isNullOrUndef(maxIndex)) {\n                const intermediateIndex1 = Math.min(minIndex, maxIndex);\n                const intermediateIndex2 = Math.max(minIndex, maxIndex);\n                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex1],\n                        x: avgX\n                    });\n                }\n                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) {\n                    decimated.push({\n                        ...data[intermediateIndex2],\n                        x: avgX\n                    });\n                }\n            }\n            if (i > 0 && lastIndex !== startIndex) {\n                decimated.push(data[lastIndex]);\n            }\n            decimated.push(point);\n            prevX = truncX;\n            countX = 0;\n            minY = maxY = y;\n            minIndex = maxIndex = startIndex = i;\n        }\n    }\n    return decimated;\n}\nfunction cleanDecimatedDataset(dataset) {\n    if (dataset._decimated) {\n        const data = dataset._data;\n        delete dataset._decimated;\n        delete dataset._data;\n        Object.defineProperty(dataset, 'data', {\n            configurable: true,\n            enumerable: true,\n            writable: true,\n            value: data\n        });\n    }\n}\nfunction cleanDecimatedData(chart) {\n    chart.data.datasets.forEach((dataset)=>{\n        cleanDecimatedDataset(dataset);\n    });\n}\nfunction getStartAndCountOfVisiblePointsSimplified(meta, points) {\n    const pointCount = points.length;\n    let start = 0;\n    let count;\n    const { iScale  } = meta;\n    const { min , max , minDefined , maxDefined  } = iScale.getUserBounds();\n    if (minDefined) {\n        start = _limitValue(_lookupByKey(points, iScale.axis, min).lo, 0, pointCount - 1);\n    }\n    if (maxDefined) {\n        count = _limitValue(_lookupByKey(points, iScale.axis, max).hi + 1, start, pointCount) - start;\n    } else {\n        count = pointCount - start;\n    }\n    return {\n        start,\n        count\n    };\n}\nvar plugin_decimation = {\n    id: 'decimation',\n    defaults: {\n        algorithm: 'min-max',\n        enabled: false\n    },\n    beforeElementsUpdate: (chart, args, options)=>{\n        if (!options.enabled) {\n            cleanDecimatedData(chart);\n            return;\n        }\n        const availableWidth = chart.width;\n        chart.data.datasets.forEach((dataset, datasetIndex)=>{\n            const { _data , indexAxis  } = dataset;\n            const meta = chart.getDatasetMeta(datasetIndex);\n            const data = _data || dataset.data;\n            if (resolve([\n                indexAxis,\n                chart.options.indexAxis\n            ]) === 'y') {\n                return;\n            }\n            if (!meta.controller.supportsDecimation) {\n                return;\n            }\n            const xAxis = chart.scales[meta.xAxisID];\n            if (xAxis.type !== 'linear' && xAxis.type !== 'time') {\n                return;\n            }\n            if (chart.options.parsing) {\n                return;\n            }\n            let { start , count  } = getStartAndCountOfVisiblePointsSimplified(meta, data);\n            const threshold = options.threshold || 4 * availableWidth;\n            if (count <= threshold) {\n                cleanDecimatedDataset(dataset);\n                return;\n            }\n            if (isNullOrUndef(_data)) {\n                dataset._data = data;\n                delete dataset.data;\n                Object.defineProperty(dataset, 'data', {\n                    configurable: true,\n                    enumerable: true,\n                    get: function() {\n                        return this._decimated;\n                    },\n                    set: function(d) {\n                        this._data = d;\n                    }\n                });\n            }\n            let decimated;\n            switch(options.algorithm){\n                case 'lttb':\n                    decimated = lttbDecimation(data, start, count, availableWidth, options);\n                    break;\n                case 'min-max':\n                    decimated = minMaxDecimation(data, start, count, availableWidth);\n                    break;\n                default:\n                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);\n            }\n            dataset._decimated = decimated;\n        });\n    },\n    destroy (chart) {\n        cleanDecimatedData(chart);\n    }\n};\n\nfunction _segments(line, target, property) {\n    const segments = line.segments;\n    const points = line.points;\n    const tpoints = target.points;\n    const parts = [];\n    for (const segment of segments){\n        let { start , end  } = segment;\n        end = _findSegmentEnd(start, end, points);\n        const bounds = _getBounds(property, points[start], points[end], segment.loop);\n        if (!target.segments) {\n            parts.push({\n                source: segment,\n                target: bounds,\n                start: points[start],\n                end: points[end]\n            });\n            continue;\n        }\n        const targetSegments = _boundSegments(target, bounds);\n        for (const tgt of targetSegments){\n            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);\n            const fillSources = _boundSegment(segment, points, subBounds);\n            for (const fillSource of fillSources){\n                parts.push({\n                    source: fillSource,\n                    target: tgt,\n                    start: {\n                        [property]: _getEdge(bounds, subBounds, 'start', Math.max)\n                    },\n                    end: {\n                        [property]: _getEdge(bounds, subBounds, 'end', Math.min)\n                    }\n                });\n            }\n        }\n    }\n    return parts;\n}\nfunction _getBounds(property, first, last, loop) {\n    if (loop) {\n        return;\n    }\n    let start = first[property];\n    let end = last[property];\n    if (property === 'angle') {\n        start = _normalizeAngle(start);\n        end = _normalizeAngle(end);\n    }\n    return {\n        property,\n        start,\n        end\n    };\n}\nfunction _pointsFromSegments(boundary, line) {\n    const { x =null , y =null  } = boundary || {};\n    const linePoints = line.points;\n    const points = [];\n    line.segments.forEach(({ start , end  })=>{\n        end = _findSegmentEnd(start, end, linePoints);\n        const first = linePoints[start];\n        const last = linePoints[end];\n        if (y !== null) {\n            points.push({\n                x: first.x,\n                y\n            });\n            points.push({\n                x: last.x,\n                y\n            });\n        } else if (x !== null) {\n            points.push({\n                x,\n                y: first.y\n            });\n            points.push({\n                x,\n                y: last.y\n            });\n        }\n    });\n    return points;\n}\nfunction _findSegmentEnd(start, end, points) {\n    for(; end > start; end--){\n        const point = points[end];\n        if (!isNaN(point.x) && !isNaN(point.y)) {\n            break;\n        }\n    }\n    return end;\n}\nfunction _getEdge(a, b, prop, fn) {\n    if (a && b) {\n        return fn(a[prop], b[prop]);\n    }\n    return a ? a[prop] : b ? b[prop] : 0;\n}\n\nfunction _createBoundaryLine(boundary, line) {\n    let points = [];\n    let _loop = false;\n    if (isArray(boundary)) {\n        _loop = true;\n        points = boundary;\n    } else {\n        points = _pointsFromSegments(boundary, line);\n    }\n    return points.length ? new LineElement({\n        points,\n        options: {\n            tension: 0\n        },\n        _loop,\n        _fullLoop: _loop\n    }) : null;\n}\nfunction _shouldApplyFill(source) {\n    return source && source.fill !== false;\n}\n\nfunction _resolveTarget(sources, index, propagate) {\n    const source = sources[index];\n    let fill = source.fill;\n    const visited = [\n        index\n    ];\n    let target;\n    if (!propagate) {\n        return fill;\n    }\n    while(fill !== false && visited.indexOf(fill) === -1){\n        if (!isNumberFinite(fill)) {\n            return fill;\n        }\n        target = sources[fill];\n        if (!target) {\n            return false;\n        }\n        if (target.visible) {\n            return fill;\n        }\n        visited.push(fill);\n        fill = target.fill;\n    }\n    return false;\n}\n function _decodeFill(line, index, count) {\n     const fill = parseFillOption(line);\n    if (isObject(fill)) {\n        return isNaN(fill.value) ? false : fill;\n    }\n    let target = parseFloat(fill);\n    if (isNumberFinite(target) && Math.floor(target) === target) {\n        return decodeTargetIndex(fill[0], index, target, count);\n    }\n    return [\n        'origin',\n        'start',\n        'end',\n        'stack',\n        'shape'\n    ].indexOf(fill) >= 0 && fill;\n}\nfunction decodeTargetIndex(firstCh, index, target, count) {\n    if (firstCh === '-' || firstCh === '+') {\n        target = index + target;\n    }\n    if (target === index || target < 0 || target >= count) {\n        return false;\n    }\n    return target;\n}\n function _getTargetPixel(fill, scale) {\n    let pixel = null;\n    if (fill === 'start') {\n        pixel = scale.bottom;\n    } else if (fill === 'end') {\n        pixel = scale.top;\n    } else if (isObject(fill)) {\n        pixel = scale.getPixelForValue(fill.value);\n    } else if (scale.getBasePixel) {\n        pixel = scale.getBasePixel();\n    }\n    return pixel;\n}\n function _getTargetValue(fill, scale, startValue) {\n    let value;\n    if (fill === 'start') {\n        value = startValue;\n    } else if (fill === 'end') {\n        value = scale.options.reverse ? scale.min : scale.max;\n    } else if (isObject(fill)) {\n        value = fill.value;\n    } else {\n        value = scale.getBaseValue();\n    }\n    return value;\n}\n function parseFillOption(line) {\n    const options = line.options;\n    const fillOption = options.fill;\n    let fill = valueOrDefault(fillOption && fillOption.target, fillOption);\n    if (fill === undefined) {\n        fill = !!options.backgroundColor;\n    }\n    if (fill === false || fill === null) {\n        return false;\n    }\n    if (fill === true) {\n        return 'origin';\n    }\n    return fill;\n}\n\nfunction _buildStackLine(source) {\n    const { scale , index , line  } = source;\n    const points = [];\n    const segments = line.segments;\n    const sourcePoints = line.points;\n    const linesBelow = getLinesBelow(scale, index);\n    linesBelow.push(_createBoundaryLine({\n        x: null,\n        y: scale.bottom\n    }, line));\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        for(let j = segment.start; j <= segment.end; j++){\n            addPointsBelow(points, sourcePoints[j], linesBelow);\n        }\n    }\n    return new LineElement({\n        points,\n        options: {}\n    });\n}\n function getLinesBelow(scale, index) {\n    const below = [];\n    const metas = scale.getMatchingVisibleMetas('line');\n    for(let i = 0; i < metas.length; i++){\n        const meta = metas[i];\n        if (meta.index === index) {\n            break;\n        }\n        if (!meta.hidden) {\n            below.unshift(meta.dataset);\n        }\n    }\n    return below;\n}\n function addPointsBelow(points, sourcePoint, linesBelow) {\n    const postponed = [];\n    for(let j = 0; j < linesBelow.length; j++){\n        const line = linesBelow[j];\n        const { first , last , point  } = findPoint(line, sourcePoint, 'x');\n        if (!point || first && last) {\n            continue;\n        }\n        if (first) {\n            postponed.unshift(point);\n        } else {\n            points.push(point);\n            if (!last) {\n                break;\n            }\n        }\n    }\n    points.push(...postponed);\n}\n function findPoint(line, sourcePoint, property) {\n    const point = line.interpolate(sourcePoint, property);\n    if (!point) {\n        return {};\n    }\n    const pointValue = point[property];\n    const segments = line.segments;\n    const linePoints = line.points;\n    let first = false;\n    let last = false;\n    for(let i = 0; i < segments.length; i++){\n        const segment = segments[i];\n        const firstValue = linePoints[segment.start][property];\n        const lastValue = linePoints[segment.end][property];\n        if (_isBetween(pointValue, firstValue, lastValue)) {\n            first = pointValue === firstValue;\n            last = pointValue === lastValue;\n            break;\n        }\n    }\n    return {\n        first,\n        last,\n        point\n    };\n}\n\nclass simpleArc {\n    constructor(opts){\n        this.x = opts.x;\n        this.y = opts.y;\n        this.radius = opts.radius;\n    }\n    pathSegment(ctx, bounds, opts) {\n        const { x , y , radius  } = this;\n        bounds = bounds || {\n            start: 0,\n            end: TAU\n        };\n        ctx.arc(x, y, radius, bounds.end, bounds.start, true);\n        return !opts.bounds;\n    }\n    interpolate(point) {\n        const { x , y , radius  } = this;\n        const angle = point.angle;\n        return {\n            x: x + Math.cos(angle) * radius,\n            y: y + Math.sin(angle) * radius,\n            angle\n        };\n    }\n}\n\nfunction _getTarget(source) {\n    const { chart , fill , line  } = source;\n    if (isNumberFinite(fill)) {\n        return getLineByIndex(chart, fill);\n    }\n    if (fill === 'stack') {\n        return _buildStackLine(source);\n    }\n    if (fill === 'shape') {\n        return true;\n    }\n    const boundary = computeBoundary(source);\n    if (boundary instanceof simpleArc) {\n        return boundary;\n    }\n    return _createBoundaryLine(boundary, line);\n}\n function getLineByIndex(chart, index) {\n    const meta = chart.getDatasetMeta(index);\n    const visible = meta && chart.isDatasetVisible(index);\n    return visible ? meta.dataset : null;\n}\nfunction computeBoundary(source) {\n    const scale = source.scale || {};\n    if (scale.getPointPositionForValue) {\n        return computeCircularBoundary(source);\n    }\n    return computeLinearBoundary(source);\n}\nfunction computeLinearBoundary(source) {\n    const { scale ={} , fill  } = source;\n    const pixel = _getTargetPixel(fill, scale);\n    if (isNumberFinite(pixel)) {\n        const horizontal = scale.isHorizontal();\n        return {\n            x: horizontal ? pixel : null,\n            y: horizontal ? null : pixel\n        };\n    }\n    return null;\n}\nfunction computeCircularBoundary(source) {\n    const { scale , fill  } = source;\n    const options = scale.options;\n    const length = scale.getLabels().length;\n    const start = options.reverse ? scale.max : scale.min;\n    const value = _getTargetValue(fill, scale, start);\n    const target = [];\n    if (options.grid.circular) {\n        const center = scale.getPointPositionForValue(0, start);\n        return new simpleArc({\n            x: center.x,\n            y: center.y,\n            radius: scale.getDistanceFromCenterForValue(value)\n        });\n    }\n    for(let i = 0; i < length; ++i){\n        target.push(scale.getPointPositionForValue(i, value));\n    }\n    return target;\n}\n\nfunction _drawfill(ctx, source, area) {\n    const target = _getTarget(source);\n    const { line , scale , axis  } = source;\n    const lineOpts = line.options;\n    const fillOption = lineOpts.fill;\n    const color = lineOpts.backgroundColor;\n    const { above =color , below =color  } = fillOption || {};\n    if (target && line.points.length) {\n        clipArea(ctx, area);\n        doFill(ctx, {\n            line,\n            target,\n            above,\n            below,\n            area,\n            scale,\n            axis\n        });\n        unclipArea(ctx);\n    }\n}\nfunction doFill(ctx, cfg) {\n    const { line , target , above , below , area , scale  } = cfg;\n    const property = line._loop ? 'angle' : cfg.axis;\n    ctx.save();\n    if (property === 'x' && below !== above) {\n        clipVertical(ctx, target, area.top);\n        fill(ctx, {\n            line,\n            target,\n            color: above,\n            scale,\n            property\n        });\n        ctx.restore();\n        ctx.save();\n        clipVertical(ctx, target, area.bottom);\n    }\n    fill(ctx, {\n        line,\n        target,\n        color: below,\n        scale,\n        property\n    });\n    ctx.restore();\n}\nfunction clipVertical(ctx, target, clipY) {\n    const { segments , points  } = target;\n    let first = true;\n    let lineLoop = false;\n    ctx.beginPath();\n    for (const segment of segments){\n        const { start , end  } = segment;\n        const firstPoint = points[start];\n        const lastPoint = points[_findSegmentEnd(start, end, points)];\n        if (first) {\n            ctx.moveTo(firstPoint.x, firstPoint.y);\n            first = false;\n        } else {\n            ctx.lineTo(firstPoint.x, clipY);\n            ctx.lineTo(firstPoint.x, firstPoint.y);\n        }\n        lineLoop = !!target.pathSegment(ctx, segment, {\n            move: lineLoop\n        });\n        if (lineLoop) {\n            ctx.closePath();\n        } else {\n            ctx.lineTo(lastPoint.x, clipY);\n        }\n    }\n    ctx.lineTo(target.first().x, clipY);\n    ctx.closePath();\n    ctx.clip();\n}\nfunction fill(ctx, cfg) {\n    const { line , target , property , color , scale  } = cfg;\n    const segments = _segments(line, target, property);\n    for (const { source: src , target: tgt , start , end  } of segments){\n        const { style: { backgroundColor =color  } = {}  } = src;\n        const notShape = target !== true;\n        ctx.save();\n        ctx.fillStyle = backgroundColor;\n        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));\n        ctx.beginPath();\n        const lineLoop = !!line.pathSegment(ctx, src);\n        let loop;\n        if (notShape) {\n            if (lineLoop) {\n                ctx.closePath();\n            } else {\n                interpolatedLineTo(ctx, target, end, property);\n            }\n            const targetLoop = !!target.pathSegment(ctx, tgt, {\n                move: lineLoop,\n                reverse: true\n            });\n            loop = lineLoop && targetLoop;\n            if (!loop) {\n                interpolatedLineTo(ctx, target, start, property);\n            }\n        }\n        ctx.closePath();\n        ctx.fill(loop ? 'evenodd' : 'nonzero');\n        ctx.restore();\n    }\n}\nfunction clipBounds(ctx, scale, bounds) {\n    const { top , bottom  } = scale.chart.chartArea;\n    const { property , start , end  } = bounds || {};\n    if (property === 'x') {\n        ctx.beginPath();\n        ctx.rect(start, top, end - start, bottom - top);\n        ctx.clip();\n    }\n}\nfunction interpolatedLineTo(ctx, target, point, property) {\n    const interpolatedPoint = target.interpolate(point, property);\n    if (interpolatedPoint) {\n        ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);\n    }\n}\n\nvar index = {\n    id: 'filler',\n    afterDatasetsUpdate (chart, _args, options) {\n        const count = (chart.data.datasets || []).length;\n        const sources = [];\n        let meta, i, line, source;\n        for(i = 0; i < count; ++i){\n            meta = chart.getDatasetMeta(i);\n            line = meta.dataset;\n            source = null;\n            if (line && line.options && line instanceof LineElement) {\n                source = {\n                    visible: chart.isDatasetVisible(i),\n                    index: i,\n                    fill: _decodeFill(line, i, count),\n                    chart,\n                    axis: meta.controller.options.indexAxis,\n                    scale: meta.vScale,\n                    line\n                };\n            }\n            meta.$filler = source;\n            sources.push(source);\n        }\n        for(i = 0; i < count; ++i){\n            source = sources[i];\n            if (!source || source.fill === false) {\n                continue;\n            }\n            source.fill = _resolveTarget(sources, i, options.propagate);\n        }\n    },\n    beforeDraw (chart, _args, options) {\n        const draw = options.drawTime === 'beforeDraw';\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        const area = chart.chartArea;\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (!source) {\n                continue;\n            }\n            source.line.updateControlPoints(area, source.axis);\n            if (draw && source.fill) {\n                _drawfill(chart.ctx, source, area);\n            }\n        }\n    },\n    beforeDatasetsDraw (chart, _args, options) {\n        if (options.drawTime !== 'beforeDatasetsDraw') {\n            return;\n        }\n        const metasets = chart.getSortedVisibleDatasetMetas();\n        for(let i = metasets.length - 1; i >= 0; --i){\n            const source = metasets[i].$filler;\n            if (_shouldApplyFill(source)) {\n                _drawfill(chart.ctx, source, chart.chartArea);\n            }\n        }\n    },\n    beforeDatasetDraw (chart, args, options) {\n        const source = args.meta.$filler;\n        if (!_shouldApplyFill(source) || options.drawTime !== 'beforeDatasetDraw') {\n            return;\n        }\n        _drawfill(chart.ctx, source, chart.chartArea);\n    },\n    defaults: {\n        propagate: true,\n        drawTime: 'beforeDatasetDraw'\n    }\n};\n\nconst getBoxSize = (labelOpts, fontSize)=>{\n    let { boxHeight =fontSize , boxWidth =fontSize  } = labelOpts;\n    if (labelOpts.usePointStyle) {\n        boxHeight = Math.min(boxHeight, fontSize);\n        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);\n    }\n    return {\n        boxWidth,\n        boxHeight,\n        itemHeight: Math.max(fontSize, boxHeight)\n    };\n};\nconst itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;\nclass Legend extends Element {\n constructor(config){\n        super();\n        this._added = false;\n        this.legendHitBoxes = [];\n this._hoveredItem = null;\n        this.doughnutMode = false;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this.legendItems = undefined;\n        this.columnSizes = undefined;\n        this.lineWidths = undefined;\n        this.maxHeight = undefined;\n        this.maxWidth = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this._margins = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight, margins) {\n        this.maxWidth = maxWidth;\n        this.maxHeight = maxHeight;\n        this._margins = margins;\n        this.setDimensions();\n        this.buildLabels();\n        this.fit();\n    }\n    setDimensions() {\n        if (this.isHorizontal()) {\n            this.width = this.maxWidth;\n            this.left = this._margins.left;\n            this.right = this.width;\n        } else {\n            this.height = this.maxHeight;\n            this.top = this._margins.top;\n            this.bottom = this.height;\n        }\n    }\n    buildLabels() {\n        const labelOpts = this.options.labels || {};\n        let legendItems = callback(labelOpts.generateLabels, [\n            this.chart\n        ], this) || [];\n        if (labelOpts.filter) {\n            legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));\n        }\n        if (labelOpts.sort) {\n            legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));\n        }\n        if (this.options.reverse) {\n            legendItems.reverse();\n        }\n        this.legendItems = legendItems;\n    }\n    fit() {\n        const { options , ctx  } = this;\n        if (!options.display) {\n            this.width = this.height = 0;\n            return;\n        }\n        const labelOpts = options.labels;\n        const labelFont = toFont(labelOpts.font);\n        const fontSize = labelFont.size;\n        const titleHeight = this._computeTitleHeight();\n        const { boxWidth , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        let width, height;\n        ctx.font = labelFont.string;\n        if (this.isHorizontal()) {\n            width = this.maxWidth;\n            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;\n        } else {\n            height = this.maxHeight;\n            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;\n        }\n        this.width = Math.min(width, options.maxWidth || this.maxWidth);\n        this.height = Math.min(height, options.maxHeight || this.maxHeight);\n    }\n _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {\n        const { ctx , maxWidth , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const lineWidths = this.lineWidths = [\n            0\n        ];\n        const lineHeight = itemHeight + padding;\n        let totalHeight = titleHeight;\n        ctx.textAlign = 'left';\n        ctx.textBaseline = 'middle';\n        let row = -1;\n        let top = -lineHeight;\n        this.legendItems.forEach((legendItem, i)=>{\n            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;\n            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {\n                totalHeight += lineHeight;\n                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;\n                top += lineHeight;\n                row++;\n            }\n            hitboxes[i] = {\n                left: 0,\n                top,\n                row,\n                width: itemWidth,\n                height: itemHeight\n            };\n            lineWidths[lineWidths.length - 1] += itemWidth + padding;\n        });\n        return totalHeight;\n    }\n    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {\n        const { ctx , maxHeight , options: { labels: { padding  }  }  } = this;\n        const hitboxes = this.legendHitBoxes = [];\n        const columnSizes = this.columnSizes = [];\n        const heightLimit = maxHeight - titleHeight;\n        let totalWidth = padding;\n        let currentColWidth = 0;\n        let currentColHeight = 0;\n        let left = 0;\n        let col = 0;\n        this.legendItems.forEach((legendItem, i)=>{\n            const { itemWidth , itemHeight  } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);\n            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {\n                totalWidth += currentColWidth + padding;\n                columnSizes.push({\n                    width: currentColWidth,\n                    height: currentColHeight\n                });\n                left += currentColWidth + padding;\n                col++;\n                currentColWidth = currentColHeight = 0;\n            }\n            hitboxes[i] = {\n                left,\n                top: currentColHeight,\n                col,\n                width: itemWidth,\n                height: itemHeight\n            };\n            currentColWidth = Math.max(currentColWidth, itemWidth);\n            currentColHeight += itemHeight + padding;\n        });\n        totalWidth += currentColWidth;\n        columnSizes.push({\n            width: currentColWidth,\n            height: currentColHeight\n        });\n        return totalWidth;\n    }\n    adjustHitBoxes() {\n        if (!this.options.display) {\n            return;\n        }\n        const titleHeight = this._computeTitleHeight();\n        const { legendHitBoxes: hitboxes , options: { align , labels: { padding  } , rtl  }  } = this;\n        const rtlHelper = getRtlAdapter(rtl, this.left, this.width);\n        if (this.isHorizontal()) {\n            let row = 0;\n            let left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n            for (const hitbox of hitboxes){\n                if (row !== hitbox.row) {\n                    row = hitbox.row;\n                    left = _alignStartEnd(align, this.left + padding, this.right - this.lineWidths[row]);\n                }\n                hitbox.top += this.top + titleHeight + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);\n                left += hitbox.width + padding;\n            }\n        } else {\n            let col = 0;\n            let top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n            for (const hitbox of hitboxes){\n                if (hitbox.col !== col) {\n                    col = hitbox.col;\n                    top = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);\n                }\n                hitbox.top = top;\n                hitbox.left += this.left + padding;\n                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);\n                top += hitbox.height + padding;\n            }\n        }\n    }\n    isHorizontal() {\n        return this.options.position === 'top' || this.options.position === 'bottom';\n    }\n    draw() {\n        if (this.options.display) {\n            const ctx = this.ctx;\n            clipArea(ctx, this);\n            this._draw();\n            unclipArea(ctx);\n        }\n    }\n _draw() {\n        const { options: opts , columnSizes , lineWidths , ctx  } = this;\n        const { align , labels: labelOpts  } = opts;\n        const defaultColor = defaults.color;\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const labelFont = toFont(labelOpts.font);\n        const { padding  } = labelOpts;\n        const fontSize = labelFont.size;\n        const halfFontSize = fontSize / 2;\n        let cursor;\n        this.drawTitle();\n        ctx.textAlign = rtlHelper.textAlign('left');\n        ctx.textBaseline = 'middle';\n        ctx.lineWidth = 0.5;\n        ctx.font = labelFont.string;\n        const { boxWidth , boxHeight , itemHeight  } = getBoxSize(labelOpts, fontSize);\n        const drawLegendBox = function(x, y, legendItem) {\n            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) {\n                return;\n            }\n            ctx.save();\n            const lineWidth = valueOrDefault(legendItem.lineWidth, 1);\n            ctx.fillStyle = valueOrDefault(legendItem.fillStyle, defaultColor);\n            ctx.lineCap = valueOrDefault(legendItem.lineCap, 'butt');\n            ctx.lineDashOffset = valueOrDefault(legendItem.lineDashOffset, 0);\n            ctx.lineJoin = valueOrDefault(legendItem.lineJoin, 'miter');\n            ctx.lineWidth = lineWidth;\n            ctx.strokeStyle = valueOrDefault(legendItem.strokeStyle, defaultColor);\n            ctx.setLineDash(valueOrDefault(legendItem.lineDash, []));\n            if (labelOpts.usePointStyle) {\n                const drawOptions = {\n                    radius: boxHeight * Math.SQRT2 / 2,\n                    pointStyle: legendItem.pointStyle,\n                    rotation: legendItem.rotation,\n                    borderWidth: lineWidth\n                };\n                const centerX = rtlHelper.xPlus(x, boxWidth / 2);\n                const centerY = y + halfFontSize;\n                drawPointLegend(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);\n            } else {\n                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);\n                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);\n                const borderRadius = toTRBLCorners(legendItem.borderRadius);\n                ctx.beginPath();\n                if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                    addRoundedRectPath(ctx, {\n                        x: xBoxLeft,\n                        y: yBoxTop,\n                        w: boxWidth,\n                        h: boxHeight,\n                        radius: borderRadius\n                    });\n                } else {\n                    ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);\n                }\n                ctx.fill();\n                if (lineWidth !== 0) {\n                    ctx.stroke();\n                }\n            }\n            ctx.restore();\n        };\n        const fillText = function(x, y, legendItem) {\n            renderText(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {\n                strikethrough: legendItem.hidden,\n                textAlign: rtlHelper.textAlign(legendItem.textAlign)\n            });\n        };\n        const isHorizontal = this.isHorizontal();\n        const titleHeight = this._computeTitleHeight();\n        if (isHorizontal) {\n            cursor = {\n                x: _alignStartEnd(align, this.left + padding, this.right - lineWidths[0]),\n                y: this.top + padding + titleHeight,\n                line: 0\n            };\n        } else {\n            cursor = {\n                x: this.left + padding,\n                y: _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),\n                line: 0\n            };\n        }\n        overrideTextDirection(this.ctx, opts.textDirection);\n        const lineHeight = itemHeight + padding;\n        this.legendItems.forEach((legendItem, i)=>{\n            ctx.strokeStyle = legendItem.fontColor;\n            ctx.fillStyle = legendItem.fontColor;\n            const textWidth = ctx.measureText(legendItem.text).width;\n            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));\n            const width = boxWidth + halfFontSize + textWidth;\n            let x = cursor.x;\n            let y = cursor.y;\n            rtlHelper.setWidth(this.width);\n            if (isHorizontal) {\n                if (i > 0 && x + width + padding > this.right) {\n                    y = cursor.y += lineHeight;\n                    cursor.line++;\n                    x = cursor.x = _alignStartEnd(align, this.left + padding, this.right - lineWidths[cursor.line]);\n                }\n            } else if (i > 0 && y + lineHeight > this.bottom) {\n                x = cursor.x = x + columnSizes[cursor.line].width + padding;\n                cursor.line++;\n                y = cursor.y = _alignStartEnd(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);\n            }\n            const realX = rtlHelper.x(x);\n            drawLegendBox(realX, y, legendItem);\n            x = _textX(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);\n            fillText(rtlHelper.x(x), y, legendItem);\n            if (isHorizontal) {\n                cursor.x += width + padding;\n            } else if (typeof legendItem.text !== 'string') {\n                const fontLineHeight = labelFont.lineHeight;\n                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;\n            } else {\n                cursor.y += lineHeight;\n            }\n        });\n        restoreTextDirection(this.ctx, opts.textDirection);\n    }\n drawTitle() {\n        const opts = this.options;\n        const titleOpts = opts.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        if (!titleOpts.display) {\n            return;\n        }\n        const rtlHelper = getRtlAdapter(opts.rtl, this.left, this.width);\n        const ctx = this.ctx;\n        const position = titleOpts.position;\n        const halfFontSize = titleFont.size / 2;\n        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;\n        let y;\n        let left = this.left;\n        let maxWidth = this.width;\n        if (this.isHorizontal()) {\n            maxWidth = Math.max(...this.lineWidths);\n            y = this.top + topPaddingPlusHalfFontSize;\n            left = _alignStartEnd(opts.align, left, this.right - maxWidth);\n        } else {\n            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);\n            y = topPaddingPlusHalfFontSize + _alignStartEnd(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());\n        }\n        const x = _alignStartEnd(position, left, left + maxWidth);\n        ctx.textAlign = rtlHelper.textAlign(_toLeftRightCenter(position));\n        ctx.textBaseline = 'middle';\n        ctx.strokeStyle = titleOpts.color;\n        ctx.fillStyle = titleOpts.color;\n        ctx.font = titleFont.string;\n        renderText(ctx, titleOpts.text, x, y, titleFont);\n    }\n _computeTitleHeight() {\n        const titleOpts = this.options.title;\n        const titleFont = toFont(titleOpts.font);\n        const titlePadding = toPadding(titleOpts.padding);\n        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;\n    }\n _getLegendItemAt(x, y) {\n        let i, hitBox, lh;\n        if (_isBetween(x, this.left, this.right) && _isBetween(y, this.top, this.bottom)) {\n            lh = this.legendHitBoxes;\n            for(i = 0; i < lh.length; ++i){\n                hitBox = lh[i];\n                if (_isBetween(x, hitBox.left, hitBox.left + hitBox.width) && _isBetween(y, hitBox.top, hitBox.top + hitBox.height)) {\n                    return this.legendItems[i];\n                }\n            }\n        }\n        return null;\n    }\n handleEvent(e) {\n        const opts = this.options;\n        if (!isListened(e.type, opts)) {\n            return;\n        }\n        const hoveredItem = this._getLegendItemAt(e.x, e.y);\n        if (e.type === 'mousemove' || e.type === 'mouseout') {\n            const previous = this._hoveredItem;\n            const sameItem = itemsEqual(previous, hoveredItem);\n            if (previous && !sameItem) {\n                callback(opts.onLeave, [\n                    e,\n                    previous,\n                    this\n                ], this);\n            }\n            this._hoveredItem = hoveredItem;\n            if (hoveredItem && !sameItem) {\n                callback(opts.onHover, [\n                    e,\n                    hoveredItem,\n                    this\n                ], this);\n            }\n        } else if (hoveredItem) {\n            callback(opts.onClick, [\n                e,\n                hoveredItem,\n                this\n            ], this);\n        }\n    }\n}\nfunction calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {\n    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);\n    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);\n    return {\n        itemWidth,\n        itemHeight\n    };\n}\nfunction calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {\n    let legendItemText = legendItem.text;\n    if (legendItemText && typeof legendItemText !== 'string') {\n        legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);\n    }\n    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;\n}\nfunction calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {\n    let itemHeight = _itemHeight;\n    if (typeof legendItem.text !== 'string') {\n        itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);\n    }\n    return itemHeight;\n}\nfunction calculateLegendItemHeight(legendItem, fontLineHeight) {\n    const labelHeight = legendItem.text ? legendItem.text.length : 0;\n    return fontLineHeight * labelHeight;\n}\nfunction isListened(type, opts) {\n    if ((type === 'mousemove' || type === 'mouseout') && (opts.onHover || opts.onLeave)) {\n        return true;\n    }\n    if (opts.onClick && (type === 'click' || type === 'mouseup')) {\n        return true;\n    }\n    return false;\n}\nvar plugin_legend = {\n    id: 'legend',\n _element: Legend,\n    start (chart, _args, options) {\n        const legend = chart.legend = new Legend({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, legend, options);\n        layouts.addBox(chart, legend);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, chart.legend);\n        delete chart.legend;\n    },\n    beforeUpdate (chart, _args, options) {\n        const legend = chart.legend;\n        layouts.configure(chart, legend, options);\n        legend.options = options;\n    },\n    afterUpdate (chart) {\n        const legend = chart.legend;\n        legend.buildLabels();\n        legend.adjustHitBoxes();\n    },\n    afterEvent (chart, args) {\n        if (!args.replay) {\n            chart.legend.handleEvent(args.event);\n        }\n    },\n    defaults: {\n        display: true,\n        position: 'top',\n        align: 'center',\n        fullSize: true,\n        reverse: false,\n        weight: 1000,\n        onClick (e, legendItem, legend) {\n            const index = legendItem.datasetIndex;\n            const ci = legend.chart;\n            if (ci.isDatasetVisible(index)) {\n                ci.hide(index);\n                legendItem.hidden = true;\n            } else {\n                ci.show(index);\n                legendItem.hidden = false;\n            }\n        },\n        onHover: null,\n        onLeave: null,\n        labels: {\n            color: (ctx)=>ctx.chart.options.color,\n            boxWidth: 40,\n            padding: 10,\n            generateLabels (chart) {\n                const datasets = chart.data.datasets;\n                const { labels: { usePointStyle , pointStyle , textAlign , color , useBorderRadius , borderRadius  }  } = chart.legend.options;\n                return chart._getSortedDatasetMetas().map((meta)=>{\n                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);\n                    const borderWidth = toPadding(style.borderWidth);\n                    return {\n                        text: datasets[meta.index].label,\n                        fillStyle: style.backgroundColor,\n                        fontColor: color,\n                        hidden: !meta.visible,\n                        lineCap: style.borderCapStyle,\n                        lineDash: style.borderDash,\n                        lineDashOffset: style.borderDashOffset,\n                        lineJoin: style.borderJoinStyle,\n                        lineWidth: (borderWidth.width + borderWidth.height) / 4,\n                        strokeStyle: style.borderColor,\n                        pointStyle: pointStyle || style.pointStyle,\n                        rotation: style.rotation,\n                        textAlign: textAlign || style.textAlign,\n                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),\n                        datasetIndex: meta.index\n                    };\n                }, this);\n            }\n        },\n        title: {\n            color: (ctx)=>ctx.chart.options.color,\n            display: false,\n            position: 'center',\n            text: ''\n        }\n    },\n    descriptors: {\n        _scriptable: (name)=>!name.startsWith('on'),\n        labels: {\n            _scriptable: (name)=>![\n                    'generateLabels',\n                    'filter',\n                    'sort'\n                ].includes(name)\n        }\n    }\n};\n\nclass Title extends Element {\n constructor(config){\n        super();\n        this.chart = config.chart;\n        this.options = config.options;\n        this.ctx = config.ctx;\n        this._padding = undefined;\n        this.top = undefined;\n        this.bottom = undefined;\n        this.left = undefined;\n        this.right = undefined;\n        this.width = undefined;\n        this.height = undefined;\n        this.position = undefined;\n        this.weight = undefined;\n        this.fullSize = undefined;\n    }\n    update(maxWidth, maxHeight) {\n        const opts = this.options;\n        this.left = 0;\n        this.top = 0;\n        if (!opts.display) {\n            this.width = this.height = this.right = this.bottom = 0;\n            return;\n        }\n        this.width = this.right = maxWidth;\n        this.height = this.bottom = maxHeight;\n        const lineCount = isArray(opts.text) ? opts.text.length : 1;\n        this._padding = toPadding(opts.padding);\n        const textSize = lineCount * toFont(opts.font).lineHeight + this._padding.height;\n        if (this.isHorizontal()) {\n            this.height = textSize;\n        } else {\n            this.width = textSize;\n        }\n    }\n    isHorizontal() {\n        const pos = this.options.position;\n        return pos === 'top' || pos === 'bottom';\n    }\n    _drawArgs(offset) {\n        const { top , left , bottom , right , options  } = this;\n        const align = options.align;\n        let rotation = 0;\n        let maxWidth, titleX, titleY;\n        if (this.isHorizontal()) {\n            titleX = _alignStartEnd(align, left, right);\n            titleY = top + offset;\n            maxWidth = right - left;\n        } else {\n            if (options.position === 'left') {\n                titleX = left + offset;\n                titleY = _alignStartEnd(align, bottom, top);\n                rotation = PI * -0.5;\n            } else {\n                titleX = right - offset;\n                titleY = _alignStartEnd(align, top, bottom);\n                rotation = PI * 0.5;\n            }\n            maxWidth = bottom - top;\n        }\n        return {\n            titleX,\n            titleY,\n            maxWidth,\n            rotation\n        };\n    }\n    draw() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        if (!opts.display) {\n            return;\n        }\n        const fontOpts = toFont(opts.font);\n        const lineHeight = fontOpts.lineHeight;\n        const offset = lineHeight / 2 + this._padding.top;\n        const { titleX , titleY , maxWidth , rotation  } = this._drawArgs(offset);\n        renderText(ctx, opts.text, 0, 0, fontOpts, {\n            color: opts.color,\n            maxWidth,\n            rotation,\n            textAlign: _toLeftRightCenter(opts.align),\n            textBaseline: 'middle',\n            translation: [\n                titleX,\n                titleY\n            ]\n        });\n    }\n}\nfunction createTitle(chart, titleOpts) {\n    const title = new Title({\n        ctx: chart.ctx,\n        options: titleOpts,\n        chart\n    });\n    layouts.configure(chart, title, titleOpts);\n    layouts.addBox(chart, title);\n    chart.titleBlock = title;\n}\nvar plugin_title = {\n    id: 'title',\n _element: Title,\n    start (chart, _args, options) {\n        createTitle(chart, options);\n    },\n    stop (chart) {\n        const titleBlock = chart.titleBlock;\n        layouts.removeBox(chart, titleBlock);\n        delete chart.titleBlock;\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = chart.titleBlock;\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'bold'\n        },\n        fullSize: true,\n        padding: 10,\n        position: 'top',\n        text: '',\n        weight: 2000\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst map = new WeakMap();\nvar plugin_subtitle = {\n    id: 'subtitle',\n    start (chart, _args, options) {\n        const title = new Title({\n            ctx: chart.ctx,\n            options,\n            chart\n        });\n        layouts.configure(chart, title, options);\n        layouts.addBox(chart, title);\n        map.set(chart, title);\n    },\n    stop (chart) {\n        layouts.removeBox(chart, map.get(chart));\n        map.delete(chart);\n    },\n    beforeUpdate (chart, _args, options) {\n        const title = map.get(chart);\n        layouts.configure(chart, title, options);\n        title.options = options;\n    },\n    defaults: {\n        align: 'center',\n        display: false,\n        font: {\n            weight: 'normal'\n        },\n        fullSize: true,\n        padding: 0,\n        position: 'top',\n        text: '',\n        weight: 1500\n    },\n    defaultRoutes: {\n        color: 'color'\n    },\n    descriptors: {\n        _scriptable: true,\n        _indexable: false\n    }\n};\n\nconst positioners = {\n average (items) {\n        if (!items.length) {\n            return false;\n        }\n        let i, len;\n        let xSet = new Set();\n        let y = 0;\n        let count = 0;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const pos = el.tooltipPosition();\n                xSet.add(pos.x);\n                y += pos.y;\n                ++count;\n            }\n        }\n        if (count === 0 || xSet.size === 0) {\n            return false;\n        }\n        const xAverage = [\n            ...xSet\n        ].reduce((a, b)=>a + b) / xSet.size;\n        return {\n            x: xAverage,\n            y: y / count\n        };\n    },\n nearest (items, eventPosition) {\n        if (!items.length) {\n            return false;\n        }\n        let x = eventPosition.x;\n        let y = eventPosition.y;\n        let minDistance = Number.POSITIVE_INFINITY;\n        let i, len, nearestElement;\n        for(i = 0, len = items.length; i < len; ++i){\n            const el = items[i].element;\n            if (el && el.hasValue()) {\n                const center = el.getCenterPoint();\n                const d = distanceBetweenPoints(eventPosition, center);\n                if (d < minDistance) {\n                    minDistance = d;\n                    nearestElement = el;\n                }\n            }\n        }\n        if (nearestElement) {\n            const tp = nearestElement.tooltipPosition();\n            x = tp.x;\n            y = tp.y;\n        }\n        return {\n            x,\n            y\n        };\n    }\n};\nfunction pushOrConcat(base, toPush) {\n    if (toPush) {\n        if (isArray(toPush)) {\n            Array.prototype.push.apply(base, toPush);\n        } else {\n            base.push(toPush);\n        }\n    }\n    return base;\n}\n function splitNewlines(str) {\n    if ((typeof str === 'string' || str instanceof String) && str.indexOf('\\n') > -1) {\n        return str.split('\\n');\n    }\n    return str;\n}\n function createTooltipItem(chart, item) {\n    const { element , datasetIndex , index  } = item;\n    const controller = chart.getDatasetMeta(datasetIndex).controller;\n    const { label , value  } = controller.getLabelAndValue(index);\n    return {\n        chart,\n        label,\n        parsed: controller.getParsed(index),\n        raw: chart.data.datasets[datasetIndex].data[index],\n        formattedValue: value,\n        dataset: controller.getDataset(),\n        dataIndex: index,\n        datasetIndex,\n        element\n    };\n}\n function getTooltipSize(tooltip, options) {\n    const ctx = tooltip.chart.ctx;\n    const { body , footer , title  } = tooltip;\n    const { boxWidth , boxHeight  } = options;\n    const bodyFont = toFont(options.bodyFont);\n    const titleFont = toFont(options.titleFont);\n    const footerFont = toFont(options.footerFont);\n    const titleLineCount = title.length;\n    const footerLineCount = footer.length;\n    const bodyLineItemCount = body.length;\n    const padding = toPadding(options.padding);\n    let height = padding.height;\n    let width = 0;\n    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);\n    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;\n    if (titleLineCount) {\n        height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;\n    }\n    if (combinedBodyLength) {\n        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;\n        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;\n    }\n    if (footerLineCount) {\n        height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;\n    }\n    let widthPadding = 0;\n    const maxLineWidth = function(line) {\n        width = Math.max(width, ctx.measureText(line).width + widthPadding);\n    };\n    ctx.save();\n    ctx.font = titleFont.string;\n    each(tooltip.title, maxLineWidth);\n    ctx.font = bodyFont.string;\n    each(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);\n    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;\n    each(body, (bodyItem)=>{\n        each(bodyItem.before, maxLineWidth);\n        each(bodyItem.lines, maxLineWidth);\n        each(bodyItem.after, maxLineWidth);\n    });\n    widthPadding = 0;\n    ctx.font = footerFont.string;\n    each(tooltip.footer, maxLineWidth);\n    ctx.restore();\n    width += padding.width;\n    return {\n        width,\n        height\n    };\n}\nfunction determineYAlign(chart, size) {\n    const { y , height  } = size;\n    if (y < height / 2) {\n        return 'top';\n    } else if (y > chart.height - height / 2) {\n        return 'bottom';\n    }\n    return 'center';\n}\nfunction doesNotFitWithAlign(xAlign, chart, options, size) {\n    const { x , width  } = size;\n    const caret = options.caretSize + options.caretPadding;\n    if (xAlign === 'left' && x + width + caret > chart.width) {\n        return true;\n    }\n    if (xAlign === 'right' && x - width - caret < 0) {\n        return true;\n    }\n}\nfunction determineXAlign(chart, options, size, yAlign) {\n    const { x , width  } = size;\n    const { width: chartWidth , chartArea: { left , right  }  } = chart;\n    let xAlign = 'center';\n    if (yAlign === 'center') {\n        xAlign = x <= (left + right) / 2 ? 'left' : 'right';\n    } else if (x <= width / 2) {\n        xAlign = 'left';\n    } else if (x >= chartWidth - width / 2) {\n        xAlign = 'right';\n    }\n    if (doesNotFitWithAlign(xAlign, chart, options, size)) {\n        xAlign = 'center';\n    }\n    return xAlign;\n}\n function determineAlignment(chart, options, size) {\n    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);\n    return {\n        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),\n        yAlign\n    };\n}\nfunction alignX(size, xAlign) {\n    let { x , width  } = size;\n    if (xAlign === 'right') {\n        x -= width;\n    } else if (xAlign === 'center') {\n        x -= width / 2;\n    }\n    return x;\n}\nfunction alignY(size, yAlign, paddingAndSize) {\n    let { y , height  } = size;\n    if (yAlign === 'top') {\n        y += paddingAndSize;\n    } else if (yAlign === 'bottom') {\n        y -= height + paddingAndSize;\n    } else {\n        y -= height / 2;\n    }\n    return y;\n}\n function getBackgroundPoint(options, size, alignment, chart) {\n    const { caretSize , caretPadding , cornerRadius  } = options;\n    const { xAlign , yAlign  } = alignment;\n    const paddingAndSize = caretSize + caretPadding;\n    const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n    let x = alignX(size, xAlign);\n    const y = alignY(size, yAlign, paddingAndSize);\n    if (yAlign === 'center') {\n        if (xAlign === 'left') {\n            x += paddingAndSize;\n        } else if (xAlign === 'right') {\n            x -= paddingAndSize;\n        }\n    } else if (xAlign === 'left') {\n        x -= Math.max(topLeft, bottomLeft) + caretSize;\n    } else if (xAlign === 'right') {\n        x += Math.max(topRight, bottomRight) + caretSize;\n    }\n    return {\n        x: _limitValue(x, 0, chart.width - size.width),\n        y: _limitValue(y, 0, chart.height - size.height)\n    };\n}\nfunction getAlignedX(tooltip, align, options) {\n    const padding = toPadding(options.padding);\n    return align === 'center' ? tooltip.x + tooltip.width / 2 : align === 'right' ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;\n}\n function getBeforeAfterBodyLines(callback) {\n    return pushOrConcat([], splitNewlines(callback));\n}\nfunction createTooltipContext(parent, tooltip, tooltipItems) {\n    return createContext(parent, {\n        tooltip,\n        tooltipItems,\n        type: 'tooltip'\n    });\n}\nfunction overrideCallbacks(callbacks, context) {\n    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;\n    return override ? callbacks.override(override) : callbacks;\n}\nconst defaultCallbacks = {\n    beforeTitle: noop,\n    title (tooltipItems) {\n        if (tooltipItems.length > 0) {\n            const item = tooltipItems[0];\n            const labels = item.chart.data.labels;\n            const labelCount = labels ? labels.length : 0;\n            if (this && this.options && this.options.mode === 'dataset') {\n                return item.dataset.label || '';\n            } else if (item.label) {\n                return item.label;\n            } else if (labelCount > 0 && item.dataIndex < labelCount) {\n                return labels[item.dataIndex];\n            }\n        }\n        return '';\n    },\n    afterTitle: noop,\n    beforeBody: noop,\n    beforeLabel: noop,\n    label (tooltipItem) {\n        if (this && this.options && this.options.mode === 'dataset') {\n            return tooltipItem.label + ': ' + tooltipItem.formattedValue || tooltipItem.formattedValue;\n        }\n        let label = tooltipItem.dataset.label || '';\n        if (label) {\n            label += ': ';\n        }\n        const value = tooltipItem.formattedValue;\n        if (!isNullOrUndef(value)) {\n            label += value;\n        }\n        return label;\n    },\n    labelColor (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            borderColor: options.borderColor,\n            backgroundColor: options.backgroundColor,\n            borderWidth: options.borderWidth,\n            borderDash: options.borderDash,\n            borderDashOffset: options.borderDashOffset,\n            borderRadius: 0\n        };\n    },\n    labelTextColor () {\n        return this.options.bodyColor;\n    },\n    labelPointStyle (tooltipItem) {\n        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);\n        const options = meta.controller.getStyle(tooltipItem.dataIndex);\n        return {\n            pointStyle: options.pointStyle,\n            rotation: options.rotation\n        };\n    },\n    afterLabel: noop,\n    afterBody: noop,\n    beforeFooter: noop,\n    footer: noop,\n    afterFooter: noop\n};\n function invokeCallbackWithFallback(callbacks, name, ctx, arg) {\n    const result = callbacks[name].call(ctx, arg);\n    if (typeof result === 'undefined') {\n        return defaultCallbacks[name].call(ctx, arg);\n    }\n    return result;\n}\nclass Tooltip extends Element {\n static positioners = positioners;\n    constructor(config){\n        super();\n        this.opacity = 0;\n        this._active = [];\n        this._eventPosition = undefined;\n        this._size = undefined;\n        this._cachedAnimations = undefined;\n        this._tooltipItems = [];\n        this.$animations = undefined;\n        this.$context = undefined;\n        this.chart = config.chart;\n        this.options = config.options;\n        this.dataPoints = undefined;\n        this.title = undefined;\n        this.beforeBody = undefined;\n        this.body = undefined;\n        this.afterBody = undefined;\n        this.footer = undefined;\n        this.xAlign = undefined;\n        this.yAlign = undefined;\n        this.x = undefined;\n        this.y = undefined;\n        this.height = undefined;\n        this.width = undefined;\n        this.caretX = undefined;\n        this.caretY = undefined;\n        this.labelColors = undefined;\n        this.labelPointStyles = undefined;\n        this.labelTextColors = undefined;\n    }\n    initialize(options) {\n        this.options = options;\n        this._cachedAnimations = undefined;\n        this.$context = undefined;\n    }\n _resolveAnimations() {\n        const cached = this._cachedAnimations;\n        if (cached) {\n            return cached;\n        }\n        const chart = this.chart;\n        const options = this.options.setContext(this.getContext());\n        const opts = options.enabled && chart.options.animation && options.animations;\n        const animations = new Animations(this.chart, opts);\n        if (opts._cacheable) {\n            this._cachedAnimations = Object.freeze(animations);\n        }\n        return animations;\n    }\n getContext() {\n        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));\n    }\n    getTitle(context, options) {\n        const { callbacks  } = options;\n        const beforeTitle = invokeCallbackWithFallback(callbacks, 'beforeTitle', this, context);\n        const title = invokeCallbackWithFallback(callbacks, 'title', this, context);\n        const afterTitle = invokeCallbackWithFallback(callbacks, 'afterTitle', this, context);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeTitle));\n        lines = pushOrConcat(lines, splitNewlines(title));\n        lines = pushOrConcat(lines, splitNewlines(afterTitle));\n        return lines;\n    }\n    getBeforeBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'beforeBody', this, tooltipItems));\n    }\n    getBody(tooltipItems, options) {\n        const { callbacks  } = options;\n        const bodyItems = [];\n        each(tooltipItems, (context)=>{\n            const bodyItem = {\n                before: [],\n                lines: [],\n                after: []\n            };\n            const scoped = overrideCallbacks(callbacks, context);\n            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, 'beforeLabel', this, context)));\n            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, 'label', this, context));\n            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, 'afterLabel', this, context)));\n            bodyItems.push(bodyItem);\n        });\n        return bodyItems;\n    }\n    getAfterBody(tooltipItems, options) {\n        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, 'afterBody', this, tooltipItems));\n    }\n    getFooter(tooltipItems, options) {\n        const { callbacks  } = options;\n        const beforeFooter = invokeCallbackWithFallback(callbacks, 'beforeFooter', this, tooltipItems);\n        const footer = invokeCallbackWithFallback(callbacks, 'footer', this, tooltipItems);\n        const afterFooter = invokeCallbackWithFallback(callbacks, 'afterFooter', this, tooltipItems);\n        let lines = [];\n        lines = pushOrConcat(lines, splitNewlines(beforeFooter));\n        lines = pushOrConcat(lines, splitNewlines(footer));\n        lines = pushOrConcat(lines, splitNewlines(afterFooter));\n        return lines;\n    }\n _createItems(options) {\n        const active = this._active;\n        const data = this.chart.data;\n        const labelColors = [];\n        const labelPointStyles = [];\n        const labelTextColors = [];\n        let tooltipItems = [];\n        let i, len;\n        for(i = 0, len = active.length; i < len; ++i){\n            tooltipItems.push(createTooltipItem(this.chart, active[i]));\n        }\n        if (options.filter) {\n            tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));\n        }\n        if (options.itemSort) {\n            tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));\n        }\n        each(tooltipItems, (context)=>{\n            const scoped = overrideCallbacks(options.callbacks, context);\n            labelColors.push(invokeCallbackWithFallback(scoped, 'labelColor', this, context));\n            labelPointStyles.push(invokeCallbackWithFallback(scoped, 'labelPointStyle', this, context));\n            labelTextColors.push(invokeCallbackWithFallback(scoped, 'labelTextColor', this, context));\n        });\n        this.labelColors = labelColors;\n        this.labelPointStyles = labelPointStyles;\n        this.labelTextColors = labelTextColors;\n        this.dataPoints = tooltipItems;\n        return tooltipItems;\n    }\n    update(changed, replay) {\n        const options = this.options.setContext(this.getContext());\n        const active = this._active;\n        let properties;\n        let tooltipItems = [];\n        if (!active.length) {\n            if (this.opacity !== 0) {\n                properties = {\n                    opacity: 0\n                };\n            }\n        } else {\n            const position = positioners[options.position].call(this, active, this._eventPosition);\n            tooltipItems = this._createItems(options);\n            this.title = this.getTitle(tooltipItems, options);\n            this.beforeBody = this.getBeforeBody(tooltipItems, options);\n            this.body = this.getBody(tooltipItems, options);\n            this.afterBody = this.getAfterBody(tooltipItems, options);\n            this.footer = this.getFooter(tooltipItems, options);\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, size);\n            const alignment = determineAlignment(this.chart, options, positionAndSize);\n            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);\n            this.xAlign = alignment.xAlign;\n            this.yAlign = alignment.yAlign;\n            properties = {\n                opacity: 1,\n                x: backgroundPoint.x,\n                y: backgroundPoint.y,\n                width: size.width,\n                height: size.height,\n                caretX: position.x,\n                caretY: position.y\n            };\n        }\n        this._tooltipItems = tooltipItems;\n        this.$context = undefined;\n        if (properties) {\n            this._resolveAnimations().update(this, properties);\n        }\n        if (changed && options.external) {\n            options.external.call(this, {\n                chart: this.chart,\n                tooltip: this,\n                replay\n            });\n        }\n    }\n    drawCaret(tooltipPoint, ctx, size, options) {\n        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);\n        ctx.lineTo(caretPosition.x1, caretPosition.y1);\n        ctx.lineTo(caretPosition.x2, caretPosition.y2);\n        ctx.lineTo(caretPosition.x3, caretPosition.y3);\n    }\n    getCaretPosition(tooltipPoint, size, options) {\n        const { xAlign , yAlign  } = this;\n        const { caretSize , cornerRadius  } = options;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(cornerRadius);\n        const { x: ptX , y: ptY  } = tooltipPoint;\n        const { width , height  } = size;\n        let x1, x2, x3, y1, y2, y3;\n        if (yAlign === 'center') {\n            y2 = ptY + height / 2;\n            if (xAlign === 'left') {\n                x1 = ptX;\n                x2 = x1 - caretSize;\n                y1 = y2 + caretSize;\n                y3 = y2 - caretSize;\n            } else {\n                x1 = ptX + width;\n                x2 = x1 + caretSize;\n                y1 = y2 - caretSize;\n                y3 = y2 + caretSize;\n            }\n            x3 = x1;\n        } else {\n            if (xAlign === 'left') {\n                x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;\n            } else if (xAlign === 'right') {\n                x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;\n            } else {\n                x2 = this.caretX;\n            }\n            if (yAlign === 'top') {\n                y1 = ptY;\n                y2 = y1 - caretSize;\n                x1 = x2 - caretSize;\n                x3 = x2 + caretSize;\n            } else {\n                y1 = ptY + height;\n                y2 = y1 + caretSize;\n                x1 = x2 + caretSize;\n                x3 = x2 - caretSize;\n            }\n            y3 = y1;\n        }\n        return {\n            x1,\n            x2,\n            x3,\n            y1,\n            y2,\n            y3\n        };\n    }\n    drawTitle(pt, ctx, options) {\n        const title = this.title;\n        const length = title.length;\n        let titleFont, titleSpacing, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.titleAlign, options);\n            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);\n            ctx.textBaseline = 'middle';\n            titleFont = toFont(options.titleFont);\n            titleSpacing = options.titleSpacing;\n            ctx.fillStyle = options.titleColor;\n            ctx.font = titleFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);\n                pt.y += titleFont.lineHeight + titleSpacing;\n                if (i + 1 === length) {\n                    pt.y += options.titleMarginBottom - titleSpacing;\n                }\n            }\n        }\n    }\n _drawColorBox(ctx, pt, i, rtlHelper, options) {\n        const labelColor = this.labelColors[i];\n        const labelPointStyle = this.labelPointStyles[i];\n        const { boxHeight , boxWidth  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        const colorX = getAlignedX(this, 'left', options);\n        const rtlColorX = rtlHelper.x(colorX);\n        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;\n        const colorY = pt.y + yOffSet;\n        if (options.usePointStyle) {\n            const drawOptions = {\n                radius: Math.min(boxWidth, boxHeight) / 2,\n                pointStyle: labelPointStyle.pointStyle,\n                rotation: labelPointStyle.rotation,\n                borderWidth: 1\n            };\n            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;\n            const centerY = colorY + boxHeight / 2;\n            ctx.strokeStyle = options.multiKeyBackground;\n            ctx.fillStyle = options.multiKeyBackground;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.fillStyle = labelColor.backgroundColor;\n            drawPoint(ctx, drawOptions, centerX, centerY);\n        } else {\n            ctx.lineWidth = isObject(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;\n            ctx.strokeStyle = labelColor.borderColor;\n            ctx.setLineDash(labelColor.borderDash || []);\n            ctx.lineDashOffset = labelColor.borderDashOffset || 0;\n            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);\n            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);\n            const borderRadius = toTRBLCorners(labelColor.borderRadius);\n            if (Object.values(borderRadius).some((v)=>v !== 0)) {\n                ctx.beginPath();\n                ctx.fillStyle = options.multiKeyBackground;\n                addRoundedRectPath(ctx, {\n                    x: outerX,\n                    y: colorY,\n                    w: boxWidth,\n                    h: boxHeight,\n                    radius: borderRadius\n                });\n                ctx.fill();\n                ctx.stroke();\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.beginPath();\n                addRoundedRectPath(ctx, {\n                    x: innerX,\n                    y: colorY + 1,\n                    w: boxWidth - 2,\n                    h: boxHeight - 2,\n                    radius: borderRadius\n                });\n                ctx.fill();\n            } else {\n                ctx.fillStyle = options.multiKeyBackground;\n                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);\n                ctx.fillStyle = labelColor.backgroundColor;\n                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);\n            }\n        }\n        ctx.fillStyle = this.labelTextColors[i];\n    }\n    drawBody(pt, ctx, options) {\n        const { body  } = this;\n        const { bodySpacing , bodyAlign , displayColors , boxHeight , boxWidth , boxPadding  } = options;\n        const bodyFont = toFont(options.bodyFont);\n        let bodyLineHeight = bodyFont.lineHeight;\n        let xLinePadding = 0;\n        const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n        const fillLineOfText = function(line) {\n            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);\n            pt.y += bodyLineHeight + bodySpacing;\n        };\n        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);\n        let bodyItem, textColor, lines, i, j, ilen, jlen;\n        ctx.textAlign = bodyAlign;\n        ctx.textBaseline = 'middle';\n        ctx.font = bodyFont.string;\n        pt.x = getAlignedX(this, bodyAlignForCalculation, options);\n        ctx.fillStyle = options.bodyColor;\n        each(this.beforeBody, fillLineOfText);\n        xLinePadding = displayColors && bodyAlignForCalculation !== 'right' ? bodyAlign === 'center' ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;\n        for(i = 0, ilen = body.length; i < ilen; ++i){\n            bodyItem = body[i];\n            textColor = this.labelTextColors[i];\n            ctx.fillStyle = textColor;\n            each(bodyItem.before, fillLineOfText);\n            lines = bodyItem.lines;\n            if (displayColors && lines.length) {\n                this._drawColorBox(ctx, pt, i, rtlHelper, options);\n                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);\n            }\n            for(j = 0, jlen = lines.length; j < jlen; ++j){\n                fillLineOfText(lines[j]);\n                bodyLineHeight = bodyFont.lineHeight;\n            }\n            each(bodyItem.after, fillLineOfText);\n        }\n        xLinePadding = 0;\n        bodyLineHeight = bodyFont.lineHeight;\n        each(this.afterBody, fillLineOfText);\n        pt.y -= bodySpacing;\n    }\n    drawFooter(pt, ctx, options) {\n        const footer = this.footer;\n        const length = footer.length;\n        let footerFont, i;\n        if (length) {\n            const rtlHelper = getRtlAdapter(options.rtl, this.x, this.width);\n            pt.x = getAlignedX(this, options.footerAlign, options);\n            pt.y += options.footerMarginTop;\n            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);\n            ctx.textBaseline = 'middle';\n            footerFont = toFont(options.footerFont);\n            ctx.fillStyle = options.footerColor;\n            ctx.font = footerFont.string;\n            for(i = 0; i < length; ++i){\n                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);\n                pt.y += footerFont.lineHeight + options.footerSpacing;\n            }\n        }\n    }\n    drawBackground(pt, ctx, tooltipSize, options) {\n        const { xAlign , yAlign  } = this;\n        const { x , y  } = pt;\n        const { width , height  } = tooltipSize;\n        const { topLeft , topRight , bottomLeft , bottomRight  } = toTRBLCorners(options.cornerRadius);\n        ctx.fillStyle = options.backgroundColor;\n        ctx.strokeStyle = options.borderColor;\n        ctx.lineWidth = options.borderWidth;\n        ctx.beginPath();\n        ctx.moveTo(x + topLeft, y);\n        if (yAlign === 'top') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width - topRight, y);\n        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);\n        if (yAlign === 'center' && xAlign === 'right') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + width, y + height - bottomRight);\n        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);\n        if (yAlign === 'bottom') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x + bottomLeft, y + height);\n        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);\n        if (yAlign === 'center' && xAlign === 'left') {\n            this.drawCaret(pt, ctx, tooltipSize, options);\n        }\n        ctx.lineTo(x, y + topLeft);\n        ctx.quadraticCurveTo(x, y, x + topLeft, y);\n        ctx.closePath();\n        ctx.fill();\n        if (options.borderWidth > 0) {\n            ctx.stroke();\n        }\n    }\n _updateAnimationTarget(options) {\n        const chart = this.chart;\n        const anims = this.$animations;\n        const animX = anims && anims.x;\n        const animY = anims && anims.y;\n        if (animX || animY) {\n            const position = positioners[options.position].call(this, this._active, this._eventPosition);\n            if (!position) {\n                return;\n            }\n            const size = this._size = getTooltipSize(this, options);\n            const positionAndSize = Object.assign({}, position, this._size);\n            const alignment = determineAlignment(chart, options, positionAndSize);\n            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);\n            if (animX._to !== point.x || animY._to !== point.y) {\n                this.xAlign = alignment.xAlign;\n                this.yAlign = alignment.yAlign;\n                this.width = size.width;\n                this.height = size.height;\n                this.caretX = position.x;\n                this.caretY = position.y;\n                this._resolveAnimations().update(this, point);\n            }\n        }\n    }\n _willRender() {\n        return !!this.opacity;\n    }\n    draw(ctx) {\n        const options = this.options.setContext(this.getContext());\n        let opacity = this.opacity;\n        if (!opacity) {\n            return;\n        }\n        this._updateAnimationTarget(options);\n        const tooltipSize = {\n            width: this.width,\n            height: this.height\n        };\n        const pt = {\n            x: this.x,\n            y: this.y\n        };\n        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;\n        const padding = toPadding(options.padding);\n        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;\n        if (options.enabled && hasTooltipContent) {\n            ctx.save();\n            ctx.globalAlpha = opacity;\n            this.drawBackground(pt, ctx, tooltipSize, options);\n            overrideTextDirection(ctx, options.textDirection);\n            pt.y += padding.top;\n            this.drawTitle(pt, ctx, options);\n            this.drawBody(pt, ctx, options);\n            this.drawFooter(pt, ctx, options);\n            restoreTextDirection(ctx, options.textDirection);\n            ctx.restore();\n        }\n    }\n getActiveElements() {\n        return this._active || [];\n    }\n setActiveElements(activeElements, eventPosition) {\n        const lastActive = this._active;\n        const active = activeElements.map(({ datasetIndex , index  })=>{\n            const meta = this.chart.getDatasetMeta(datasetIndex);\n            if (!meta) {\n                throw new Error('Cannot find a dataset at index ' + datasetIndex);\n            }\n            return {\n                datasetIndex,\n                element: meta.data[index],\n                index\n            };\n        });\n        const changed = !_elementsEqual(lastActive, active);\n        const positionChanged = this._positionChanged(active, eventPosition);\n        if (changed || positionChanged) {\n            this._active = active;\n            this._eventPosition = eventPosition;\n            this._ignoreReplayEvents = true;\n            this.update(true);\n        }\n    }\n handleEvent(e, replay, inChartArea = true) {\n        if (replay && this._ignoreReplayEvents) {\n            return false;\n        }\n        this._ignoreReplayEvents = false;\n        const options = this.options;\n        const lastActive = this._active || [];\n        const active = this._getActiveElements(e, lastActive, replay, inChartArea);\n        const positionChanged = this._positionChanged(active, e);\n        const changed = replay || !_elementsEqual(active, lastActive) || positionChanged;\n        if (changed) {\n            this._active = active;\n            if (options.enabled || options.external) {\n                this._eventPosition = {\n                    x: e.x,\n                    y: e.y\n                };\n                this.update(true, replay);\n            }\n        }\n        return changed;\n    }\n _getActiveElements(e, lastActive, replay, inChartArea) {\n        const options = this.options;\n        if (e.type === 'mouseout') {\n            return [];\n        }\n        if (!inChartArea) {\n            return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);\n        }\n        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);\n        if (options.reverse) {\n            active.reverse();\n        }\n        return active;\n    }\n _positionChanged(active, e) {\n        const { caretX , caretY , options  } = this;\n        const position = positioners[options.position].call(this, active, e);\n        return position !== false && (caretX !== position.x || caretY !== position.y);\n    }\n}\nvar plugin_tooltip = {\n    id: 'tooltip',\n    _element: Tooltip,\n    positioners,\n    afterInit (chart, _args, options) {\n        if (options) {\n            chart.tooltip = new Tooltip({\n                chart,\n                options\n            });\n        }\n    },\n    beforeUpdate (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    reset (chart, _args, options) {\n        if (chart.tooltip) {\n            chart.tooltip.initialize(options);\n        }\n    },\n    afterDraw (chart) {\n        const tooltip = chart.tooltip;\n        if (tooltip && tooltip._willRender()) {\n            const args = {\n                tooltip\n            };\n            if (chart.notifyPlugins('beforeTooltipDraw', {\n                ...args,\n                cancelable: true\n            }) === false) {\n                return;\n            }\n            tooltip.draw(chart.ctx);\n            chart.notifyPlugins('afterTooltipDraw', args);\n        }\n    },\n    afterEvent (chart, args) {\n        if (chart.tooltip) {\n            const useFinalPosition = args.replay;\n            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) {\n                args.changed = true;\n            }\n        }\n    },\n    defaults: {\n        enabled: true,\n        external: null,\n        position: 'average',\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        titleFont: {\n            weight: 'bold'\n        },\n        titleSpacing: 2,\n        titleMarginBottom: 6,\n        titleAlign: 'left',\n        bodyColor: '#fff',\n        bodySpacing: 2,\n        bodyFont: {},\n        bodyAlign: 'left',\n        footerColor: '#fff',\n        footerSpacing: 2,\n        footerMarginTop: 6,\n        footerFont: {\n            weight: 'bold'\n        },\n        footerAlign: 'left',\n        padding: 6,\n        caretPadding: 2,\n        caretSize: 5,\n        cornerRadius: 6,\n        boxHeight: (ctx, opts)=>opts.bodyFont.size,\n        boxWidth: (ctx, opts)=>opts.bodyFont.size,\n        multiKeyBackground: '#fff',\n        displayColors: true,\n        boxPadding: 0,\n        borderColor: 'rgba(0,0,0,0)',\n        borderWidth: 0,\n        animation: {\n            duration: 400,\n            easing: 'easeOutQuart'\n        },\n        animations: {\n            numbers: {\n                type: 'number',\n                properties: [\n                    'x',\n                    'y',\n                    'width',\n                    'height',\n                    'caretX',\n                    'caretY'\n                ]\n            },\n            opacity: {\n                easing: 'linear',\n                duration: 200\n            }\n        },\n        callbacks: defaultCallbacks\n    },\n    defaultRoutes: {\n        bodyFont: 'font',\n        footerFont: 'font',\n        titleFont: 'font'\n    },\n    descriptors: {\n        _scriptable: (name)=>name !== 'filter' && name !== 'itemSort' && name !== 'external',\n        _indexable: false,\n        callbacks: {\n            _scriptable: false,\n            _indexable: false\n        },\n        animation: {\n            _fallback: false\n        },\n        animations: {\n            _fallback: 'animation'\n        }\n    },\n    additionalOptionScopes: [\n        'interaction'\n    ]\n};\n\nvar plugins = /*#__PURE__*/Object.freeze({\n__proto__: null,\nColors: plugin_colors,\nDecimation: plugin_decimation,\nFiller: index,\nLegend: plugin_legend,\nSubTitle: plugin_subtitle,\nTitle: plugin_title,\nTooltip: plugin_tooltip\n});\n\nconst addIfString = (labels, raw, index, addedLabels)=>{\n    if (typeof raw === 'string') {\n        index = labels.push(raw) - 1;\n        addedLabels.unshift({\n            index,\n            label: raw\n        });\n    } else if (isNaN(raw)) {\n        index = null;\n    }\n    return index;\n};\nfunction findOrAddLabel(labels, raw, index, addedLabels) {\n    const first = labels.indexOf(raw);\n    if (first === -1) {\n        return addIfString(labels, raw, index, addedLabels);\n    }\n    const last = labels.lastIndexOf(raw);\n    return first !== last ? index : first;\n}\nconst validIndex = (index, max)=>index === null ? null : _limitValue(Math.round(index), 0, max);\nfunction _getLabelForValue(value) {\n    const labels = this.getLabels();\n    if (value >= 0 && value < labels.length) {\n        return labels[value];\n    }\n    return value;\n}\nclass CategoryScale extends Scale {\n    static id = 'category';\n static defaults = {\n        ticks: {\n            callback: _getLabelForValue\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this._startValue = undefined;\n        this._valueRange = 0;\n        this._addedLabels = [];\n    }\n    init(scaleOptions) {\n        const added = this._addedLabels;\n        if (added.length) {\n            const labels = this.getLabels();\n            for (const { index , label  } of added){\n                if (labels[index] === label) {\n                    labels.splice(index, 1);\n                }\n            }\n            this._addedLabels = [];\n        }\n        super.init(scaleOptions);\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        const labels = this.getLabels();\n        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, valueOrDefault(index, raw), this._addedLabels);\n        return validIndex(index, labels.length - 1);\n    }\n    determineDataLimits() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this.getMinMax(true);\n        if (this.options.bounds === 'ticks') {\n            if (!minDefined) {\n                min = 0;\n            }\n            if (!maxDefined) {\n                max = this.getLabels().length - 1;\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const min = this.min;\n        const max = this.max;\n        const offset = this.options.offset;\n        const ticks = [];\n        let labels = this.getLabels();\n        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);\n        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);\n        this._startValue = this.min - (offset ? 0.5 : 0);\n        for(let value = min; value <= max; value++){\n            ticks.push({\n                value\n            });\n        }\n        return ticks;\n    }\n    getLabelForValue(value) {\n        return _getLabelForValue.call(this, value);\n    }\n configure() {\n        super.configure();\n        if (!this.isHorizontal()) {\n            this._reversePixels = !this._reversePixels;\n        }\n    }\n    getPixelForValue(value) {\n        if (typeof value !== 'number') {\n            value = this.parse(value);\n        }\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getPixelForTick(index) {\n        const ticks = this.ticks;\n        if (index < 0 || index > ticks.length - 1) {\n            return null;\n        }\n        return this.getPixelForValue(ticks[index].value);\n    }\n    getValueForPixel(pixel) {\n        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);\n    }\n    getBasePixel() {\n        return this.bottom;\n    }\n}\n\nfunction generateTicks$1(generationOptions, dataRange) {\n    const ticks = [];\n    const MIN_SPACING = 1e-14;\n    const { bounds , step , min , max , precision , count , maxTicks , maxDigits , includeBounds  } = generationOptions;\n    const unit = step || 1;\n    const maxSpaces = maxTicks - 1;\n    const { min: rmin , max: rmax  } = dataRange;\n    const minDefined = !isNullOrUndef(min);\n    const maxDefined = !isNullOrUndef(max);\n    const countDefined = !isNullOrUndef(count);\n    const minSpacing = (rmax - rmin) / (maxDigits + 1);\n    let spacing = niceNum((rmax - rmin) / maxSpaces / unit) * unit;\n    let factor, niceMin, niceMax, numSpaces;\n    if (spacing < MIN_SPACING && !minDefined && !maxDefined) {\n        return [\n            {\n                value: rmin\n            },\n            {\n                value: rmax\n            }\n        ];\n    }\n    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);\n    if (numSpaces > maxSpaces) {\n        spacing = niceNum(numSpaces * spacing / maxSpaces / unit) * unit;\n    }\n    if (!isNullOrUndef(precision)) {\n        factor = Math.pow(10, precision);\n        spacing = Math.ceil(spacing * factor) / factor;\n    }\n    if (bounds === 'ticks') {\n        niceMin = Math.floor(rmin / spacing) * spacing;\n        niceMax = Math.ceil(rmax / spacing) * spacing;\n    } else {\n        niceMin = rmin;\n        niceMax = rmax;\n    }\n    if (minDefined && maxDefined && step && almostWhole((max - min) / step, spacing / 1000)) {\n        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));\n        spacing = (max - min) / numSpaces;\n        niceMin = min;\n        niceMax = max;\n    } else if (countDefined) {\n        niceMin = minDefined ? min : niceMin;\n        niceMax = maxDefined ? max : niceMax;\n        numSpaces = count - 1;\n        spacing = (niceMax - niceMin) / numSpaces;\n    } else {\n        numSpaces = (niceMax - niceMin) / spacing;\n        if (almostEquals(numSpaces, Math.round(numSpaces), spacing / 1000)) {\n            numSpaces = Math.round(numSpaces);\n        } else {\n            numSpaces = Math.ceil(numSpaces);\n        }\n    }\n    const decimalPlaces = Math.max(_decimalPlaces(spacing), _decimalPlaces(niceMin));\n    factor = Math.pow(10, isNullOrUndef(precision) ? decimalPlaces : precision);\n    niceMin = Math.round(niceMin * factor) / factor;\n    niceMax = Math.round(niceMax * factor) / factor;\n    let j = 0;\n    if (minDefined) {\n        if (includeBounds && niceMin !== min) {\n            ticks.push({\n                value: min\n            });\n            if (niceMin < min) {\n                j++;\n            }\n            if (almostEquals(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) {\n                j++;\n            }\n        } else if (niceMin < min) {\n            j++;\n        }\n    }\n    for(; j < numSpaces; ++j){\n        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;\n        if (maxDefined && tickValue > max) {\n            break;\n        }\n        ticks.push({\n            value: tickValue\n        });\n    }\n    if (maxDefined && includeBounds && niceMax !== max) {\n        if (ticks.length && almostEquals(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) {\n            ticks[ticks.length - 1].value = max;\n        } else {\n            ticks.push({\n                value: max\n            });\n        }\n    } else if (!maxDefined || niceMax === max) {\n        ticks.push({\n            value: niceMax\n        });\n    }\n    return ticks;\n}\nfunction relativeLabelSize(value, minSpacing, { horizontal , minRotation  }) {\n    const rad = toRadians(minRotation);\n    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;\n    const length = 0.75 * minSpacing * ('' + value).length;\n    return Math.min(minSpacing / ratio, length);\n}\nclass LinearScaleBase extends Scale {\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n         this._endValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        if (isNullOrUndef(raw)) {\n            return null;\n        }\n        if ((typeof raw === 'number' || raw instanceof Number) && !isFinite(+raw)) {\n            return null;\n        }\n        return +raw;\n    }\n    handleTickRangeOptions() {\n        const { beginAtZero  } = this.options;\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let { min , max  } = this;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (beginAtZero) {\n            const minSign = sign(min);\n            const maxSign = sign(max);\n            if (minSign < 0 && maxSign < 0) {\n                setMax(0);\n            } else if (minSign > 0 && maxSign > 0) {\n                setMin(0);\n            }\n        }\n        if (min === max) {\n            let offset = max === 0 ? 1 : Math.abs(max * 0.05);\n            setMax(max + offset);\n            if (!beginAtZero) {\n                setMin(min - offset);\n            }\n        }\n        this.min = min;\n        this.max = max;\n    }\n    getTickLimit() {\n        const tickOpts = this.options.ticks;\n        let { maxTicksLimit , stepSize  } = tickOpts;\n        let maxTicks;\n        if (stepSize) {\n            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;\n            if (maxTicks > 1000) {\n                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);\n                maxTicks = 1000;\n            }\n        } else {\n            maxTicks = this.computeTickLimit();\n            maxTicksLimit = maxTicksLimit || 11;\n        }\n        if (maxTicksLimit) {\n            maxTicks = Math.min(maxTicksLimit, maxTicks);\n        }\n        return maxTicks;\n    }\n computeTickLimit() {\n        return Number.POSITIVE_INFINITY;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        let maxTicks = this.getTickLimit();\n        maxTicks = Math.max(2, maxTicks);\n        const numericGeneratorOptions = {\n            maxTicks,\n            bounds: opts.bounds,\n            min: opts.min,\n            max: opts.max,\n            precision: tickOpts.precision,\n            step: tickOpts.stepSize,\n            count: tickOpts.count,\n            maxDigits: this._maxDigits(),\n            horizontal: this.isHorizontal(),\n            minRotation: tickOpts.minRotation || 0,\n            includeBounds: tickOpts.includeBounds !== false\n        };\n        const dataRange = this._range || this;\n        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n configure() {\n        const ticks = this.ticks;\n        let start = this.min;\n        let end = this.max;\n        super.configure();\n        if (this.options.offset && ticks.length) {\n            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;\n            start -= offset;\n            end += offset;\n        }\n        this._startValue = start;\n        this._endValue = end;\n        this._valueRange = end - start;\n    }\n    getLabelForValue(value) {\n        return formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n}\n\nclass LinearScale extends LinearScaleBase {\n    static id = 'linear';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.numeric\n        }\n    };\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? min : 0;\n        this.max = isNumberFinite(max) ? max : 1;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        const horizontal = this.isHorizontal();\n        const length = horizontal ? this.width : this.height;\n        const minRotation = toRadians(this.options.ticks.minRotation);\n        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;\n        const tickFont = this._resolveTickFontOptions(0);\n        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));\n    }\n    getPixelForValue(value) {\n        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;\n    }\n}\n\nconst log10Floor = (v)=>Math.floor(log10(v));\nconst changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);\nfunction isMajor(tickVal) {\n    const remain = tickVal / Math.pow(10, log10Floor(tickVal));\n    return remain === 1;\n}\nfunction steps(min, max, rangeExp) {\n    const rangeStep = Math.pow(10, rangeExp);\n    const start = Math.floor(min / rangeStep);\n    const end = Math.ceil(max / rangeStep);\n    return end - start;\n}\nfunction startExp(min, max) {\n    const range = max - min;\n    let rangeExp = log10Floor(range);\n    while(steps(min, max, rangeExp) > 10){\n        rangeExp++;\n    }\n    while(steps(min, max, rangeExp) < 10){\n        rangeExp--;\n    }\n    return Math.min(rangeExp, log10Floor(min));\n}\n function generateTicks(generationOptions, { min , max  }) {\n    min = finiteOrDefault(generationOptions.min, min);\n    const ticks = [];\n    const minExp = log10Floor(min);\n    let exp = startExp(min, max);\n    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;\n    const stepSize = Math.pow(10, exp);\n    const base = minExp > exp ? Math.pow(10, minExp) : 0;\n    const start = Math.round((min - base) * precision) / precision;\n    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;\n    let significand = Math.floor((start - offset) / Math.pow(10, exp));\n    let value = finiteOrDefault(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);\n    while(value < max){\n        ticks.push({\n            value,\n            major: isMajor(value),\n            significand\n        });\n        if (significand >= 10) {\n            significand = significand < 15 ? 15 : 20;\n        } else {\n            significand++;\n        }\n        if (significand >= 20) {\n            exp++;\n            significand = 2;\n            precision = exp >= 0 ? 1 : precision;\n        }\n        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;\n    }\n    const lastTick = finiteOrDefault(generationOptions.max, value);\n    ticks.push({\n        value: lastTick,\n        major: isMajor(lastTick),\n        significand\n    });\n    return ticks;\n}\nclass LogarithmicScale extends Scale {\n    static id = 'logarithmic';\n static defaults = {\n        ticks: {\n            callback: Ticks.formatters.logarithmic,\n            major: {\n                enabled: true\n            }\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.start = undefined;\n         this.end = undefined;\n         this._startValue = undefined;\n        this._valueRange = 0;\n    }\n    parse(raw, index) {\n        const value = LinearScaleBase.prototype.parse.apply(this, [\n            raw,\n            index\n        ]);\n        if (value === 0) {\n            this._zero = true;\n            return undefined;\n        }\n        return isNumberFinite(value) && value > 0 ? value : null;\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(true);\n        this.min = isNumberFinite(min) ? Math.max(0, min) : null;\n        this.max = isNumberFinite(max) ? Math.max(0, max) : null;\n        if (this.options.beginAtZero) {\n            this._zero = true;\n        }\n        if (this._zero && this.min !== this._suggestedMin && !isNumberFinite(this._userMin)) {\n            this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);\n        }\n        this.handleTickRangeOptions();\n    }\n    handleTickRangeOptions() {\n        const { minDefined , maxDefined  } = this.getUserBounds();\n        let min = this.min;\n        let max = this.max;\n        const setMin = (v)=>min = minDefined ? min : v;\n        const setMax = (v)=>max = maxDefined ? max : v;\n        if (min === max) {\n            if (min <= 0) {\n                setMin(1);\n                setMax(10);\n            } else {\n                setMin(changeExponent(min, -1));\n                setMax(changeExponent(max, +1));\n            }\n        }\n        if (min <= 0) {\n            setMin(changeExponent(max, -1));\n        }\n        if (max <= 0) {\n            setMax(changeExponent(min, +1));\n        }\n        this.min = min;\n        this.max = max;\n    }\n    buildTicks() {\n        const opts = this.options;\n        const generationOptions = {\n            min: this._userMin,\n            max: this._userMax\n        };\n        const ticks = generateTicks(generationOptions, this);\n        if (opts.bounds === 'ticks') {\n            _setMinAndMaxByKey(ticks, this, 'value');\n        }\n        if (opts.reverse) {\n            ticks.reverse();\n            this.start = this.max;\n            this.end = this.min;\n        } else {\n            this.start = this.min;\n            this.end = this.max;\n        }\n        return ticks;\n    }\n getLabelForValue(value) {\n        return value === undefined ? '0' : formatNumber(value, this.chart.options.locale, this.options.ticks.format);\n    }\n configure() {\n        const start = this.min;\n        super.configure();\n        this._startValue = log10(start);\n        this._valueRange = log10(this.max) - log10(start);\n    }\n    getPixelForValue(value) {\n        if (value === undefined || value === 0) {\n            value = this.min;\n        }\n        if (value === null || isNaN(value)) {\n            return NaN;\n        }\n        return this.getPixelForDecimal(value === this.min ? 0 : (log10(value) - this._startValue) / this._valueRange);\n    }\n    getValueForPixel(pixel) {\n        const decimal = this.getDecimalForPixel(pixel);\n        return Math.pow(10, this._startValue + decimal * this._valueRange);\n    }\n}\n\nfunction getTickBackdropHeight(opts) {\n    const tickOpts = opts.ticks;\n    if (tickOpts.display && opts.display) {\n        const padding = toPadding(tickOpts.backdropPadding);\n        return valueOrDefault(tickOpts.font && tickOpts.font.size, defaults.font.size) + padding.height;\n    }\n    return 0;\n}\nfunction measureLabelSize(ctx, font, label) {\n    label = isArray(label) ? label : [\n        label\n    ];\n    return {\n        w: _longestText(ctx, font.string, label),\n        h: label.length * font.lineHeight\n    };\n}\nfunction determineLimits(angle, pos, size, min, max) {\n    if (angle === min || angle === max) {\n        return {\n            start: pos - size / 2,\n            end: pos + size / 2\n        };\n    } else if (angle < min || angle > max) {\n        return {\n            start: pos - size,\n            end: pos\n        };\n    }\n    return {\n        start: pos,\n        end: pos + size\n    };\n}\n function fitWithPointLabels(scale) {\n    const orig = {\n        l: scale.left + scale._padding.left,\n        r: scale.right - scale._padding.right,\n        t: scale.top + scale._padding.top,\n        b: scale.bottom - scale._padding.bottom\n    };\n    const limits = Object.assign({}, orig);\n    const labelSizes = [];\n    const padding = [];\n    const valueCount = scale._pointLabels.length;\n    const pointLabelOpts = scale.options.pointLabels;\n    const additionalAngle = pointLabelOpts.centerPointLabels ? PI / valueCount : 0;\n    for(let i = 0; i < valueCount; i++){\n        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));\n        padding[i] = opts.padding;\n        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);\n        const plFont = toFont(opts.font);\n        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);\n        labelSizes[i] = textSize;\n        const angleRadians = _normalizeAngle(scale.getIndexAngle(i) + additionalAngle);\n        const angle = Math.round(toDegrees(angleRadians));\n        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);\n        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);\n        updateLimits(limits, orig, angleRadians, hLimits, vLimits);\n    }\n    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);\n    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);\n}\nfunction updateLimits(limits, orig, angle, hLimits, vLimits) {\n    const sin = Math.abs(Math.sin(angle));\n    const cos = Math.abs(Math.cos(angle));\n    let x = 0;\n    let y = 0;\n    if (hLimits.start < orig.l) {\n        x = (orig.l - hLimits.start) / sin;\n        limits.l = Math.min(limits.l, orig.l - x);\n    } else if (hLimits.end > orig.r) {\n        x = (hLimits.end - orig.r) / sin;\n        limits.r = Math.max(limits.r, orig.r + x);\n    }\n    if (vLimits.start < orig.t) {\n        y = (orig.t - vLimits.start) / cos;\n        limits.t = Math.min(limits.t, orig.t - y);\n    } else if (vLimits.end > orig.b) {\n        y = (vLimits.end - orig.b) / cos;\n        limits.b = Math.max(limits.b, orig.b + y);\n    }\n}\nfunction createPointLabelItem(scale, index, itemOpts) {\n    const outerDistance = scale.drawingArea;\n    const { extra , additionalAngle , padding , size  } = itemOpts;\n    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);\n    const angle = Math.round(toDegrees(_normalizeAngle(pointLabelPosition.angle + HALF_PI)));\n    const y = yForAngle(pointLabelPosition.y, size.h, angle);\n    const textAlign = getTextAlignForAngle(angle);\n    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);\n    return {\n        visible: true,\n        x: pointLabelPosition.x,\n        y,\n        textAlign,\n        left,\n        top: y,\n        right: left + size.w,\n        bottom: y + size.h\n    };\n}\nfunction isNotOverlapped(item, area) {\n    if (!area) {\n        return true;\n    }\n    const { left , top , right , bottom  } = item;\n    const apexesInArea = _isPointInArea({\n        x: left,\n        y: top\n    }, area) || _isPointInArea({\n        x: left,\n        y: bottom\n    }, area) || _isPointInArea({\n        x: right,\n        y: top\n    }, area) || _isPointInArea({\n        x: right,\n        y: bottom\n    }, area);\n    return !apexesInArea;\n}\nfunction buildPointLabelItems(scale, labelSizes, padding) {\n    const items = [];\n    const valueCount = scale._pointLabels.length;\n    const opts = scale.options;\n    const { centerPointLabels , display  } = opts.pointLabels;\n    const itemOpts = {\n        extra: getTickBackdropHeight(opts) / 2,\n        additionalAngle: centerPointLabels ? PI / valueCount : 0\n    };\n    let area;\n    for(let i = 0; i < valueCount; i++){\n        itemOpts.padding = padding[i];\n        itemOpts.size = labelSizes[i];\n        const item = createPointLabelItem(scale, i, itemOpts);\n        items.push(item);\n        if (display === 'auto') {\n            item.visible = isNotOverlapped(item, area);\n            if (item.visible) {\n                area = item;\n            }\n        }\n    }\n    return items;\n}\nfunction getTextAlignForAngle(angle) {\n    if (angle === 0 || angle === 180) {\n        return 'center';\n    } else if (angle < 180) {\n        return 'left';\n    }\n    return 'right';\n}\nfunction leftForTextAlign(x, w, align) {\n    if (align === 'right') {\n        x -= w;\n    } else if (align === 'center') {\n        x -= w / 2;\n    }\n    return x;\n}\nfunction yForAngle(y, h, angle) {\n    if (angle === 90 || angle === 270) {\n        y -= h / 2;\n    } else if (angle > 270 || angle < 90) {\n        y -= h;\n    }\n    return y;\n}\nfunction drawPointLabelBox(ctx, opts, item) {\n    const { left , top , right , bottom  } = item;\n    const { backdropColor  } = opts;\n    if (!isNullOrUndef(backdropColor)) {\n        const borderRadius = toTRBLCorners(opts.borderRadius);\n        const padding = toPadding(opts.backdropPadding);\n        ctx.fillStyle = backdropColor;\n        const backdropLeft = left - padding.left;\n        const backdropTop = top - padding.top;\n        const backdropWidth = right - left + padding.width;\n        const backdropHeight = bottom - top + padding.height;\n        if (Object.values(borderRadius).some((v)=>v !== 0)) {\n            ctx.beginPath();\n            addRoundedRectPath(ctx, {\n                x: backdropLeft,\n                y: backdropTop,\n                w: backdropWidth,\n                h: backdropHeight,\n                radius: borderRadius\n            });\n            ctx.fill();\n        } else {\n            ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);\n        }\n    }\n}\nfunction drawPointLabels(scale, labelCount) {\n    const { ctx , options: { pointLabels  }  } = scale;\n    for(let i = labelCount - 1; i >= 0; i--){\n        const item = scale._pointLabelItems[i];\n        if (!item.visible) {\n            continue;\n        }\n        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));\n        drawPointLabelBox(ctx, optsAtIndex, item);\n        const plFont = toFont(optsAtIndex.font);\n        const { x , y , textAlign  } = item;\n        renderText(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {\n            color: optsAtIndex.color,\n            textAlign: textAlign,\n            textBaseline: 'middle'\n        });\n    }\n}\nfunction pathRadiusLine(scale, radius, circular, labelCount) {\n    const { ctx  } = scale;\n    if (circular) {\n        ctx.arc(scale.xCenter, scale.yCenter, radius, 0, TAU);\n    } else {\n        let pointPosition = scale.getPointPosition(0, radius);\n        ctx.moveTo(pointPosition.x, pointPosition.y);\n        for(let i = 1; i < labelCount; i++){\n            pointPosition = scale.getPointPosition(i, radius);\n            ctx.lineTo(pointPosition.x, pointPosition.y);\n        }\n    }\n}\nfunction drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {\n    const ctx = scale.ctx;\n    const circular = gridLineOpts.circular;\n    const { color , lineWidth  } = gridLineOpts;\n    if (!circular && !labelCount || !color || !lineWidth || radius < 0) {\n        return;\n    }\n    ctx.save();\n    ctx.strokeStyle = color;\n    ctx.lineWidth = lineWidth;\n    ctx.setLineDash(borderOpts.dash || []);\n    ctx.lineDashOffset = borderOpts.dashOffset;\n    ctx.beginPath();\n    pathRadiusLine(scale, radius, circular, labelCount);\n    ctx.closePath();\n    ctx.stroke();\n    ctx.restore();\n}\nfunction createPointLabelContext(parent, index, label) {\n    return createContext(parent, {\n        label,\n        index,\n        type: 'pointLabel'\n    });\n}\nclass RadialLinearScale extends LinearScaleBase {\n    static id = 'radialLinear';\n static defaults = {\n        display: true,\n        animate: true,\n        position: 'chartArea',\n        angleLines: {\n            display: true,\n            lineWidth: 1,\n            borderDash: [],\n            borderDashOffset: 0.0\n        },\n        grid: {\n            circular: false\n        },\n        startAngle: 0,\n        ticks: {\n            showLabelBackdrop: true,\n            callback: Ticks.formatters.numeric\n        },\n        pointLabels: {\n            backdropColor: undefined,\n            backdropPadding: 2,\n            display: true,\n            font: {\n                size: 10\n            },\n            callback (label) {\n                return label;\n            },\n            padding: 5,\n            centerPointLabels: false\n        }\n    };\n    static defaultRoutes = {\n        'angleLines.color': 'borderColor',\n        'pointLabels.color': 'color',\n        'ticks.color': 'color'\n    };\n    static descriptors = {\n        angleLines: {\n            _fallback: 'grid'\n        }\n    };\n    constructor(cfg){\n        super(cfg);\n         this.xCenter = undefined;\n         this.yCenter = undefined;\n         this.drawingArea = undefined;\n         this._pointLabels = [];\n        this._pointLabelItems = [];\n    }\n    setDimensions() {\n        const padding = this._padding = toPadding(getTickBackdropHeight(this.options) / 2);\n        const w = this.width = this.maxWidth - padding.width;\n        const h = this.height = this.maxHeight - padding.height;\n        this.xCenter = Math.floor(this.left + w / 2 + padding.left);\n        this.yCenter = Math.floor(this.top + h / 2 + padding.top);\n        this.drawingArea = Math.floor(Math.min(w, h) / 2);\n    }\n    determineDataLimits() {\n        const { min , max  } = this.getMinMax(false);\n        this.min = isNumberFinite(min) && !isNaN(min) ? min : 0;\n        this.max = isNumberFinite(max) && !isNaN(max) ? max : 0;\n        this.handleTickRangeOptions();\n    }\n computeTickLimit() {\n        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));\n    }\n    generateTickLabels(ticks) {\n        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);\n        this._pointLabels = this.getLabels().map((value, index)=>{\n            const label = callback(this.options.pointLabels.callback, [\n                value,\n                index\n            ], this);\n            return label || label === 0 ? label : '';\n        }).filter((v, i)=>this.chart.getDataVisibility(i));\n    }\n    fit() {\n        const opts = this.options;\n        if (opts.display && opts.pointLabels.display) {\n            fitWithPointLabels(this);\n        } else {\n            this.setCenterPoint(0, 0, 0, 0);\n        }\n    }\n    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {\n        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);\n        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);\n        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));\n    }\n    getIndexAngle(index) {\n        const angleMultiplier = TAU / (this._pointLabels.length || 1);\n        const startAngle = this.options.startAngle || 0;\n        return _normalizeAngle(index * angleMultiplier + toRadians(startAngle));\n    }\n    getDistanceFromCenterForValue(value) {\n        if (isNullOrUndef(value)) {\n            return NaN;\n        }\n        const scalingFactor = this.drawingArea / (this.max - this.min);\n        if (this.options.reverse) {\n            return (this.max - value) * scalingFactor;\n        }\n        return (value - this.min) * scalingFactor;\n    }\n    getValueForDistanceFromCenter(distance) {\n        if (isNullOrUndef(distance)) {\n            return NaN;\n        }\n        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));\n        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;\n    }\n    getPointLabelContext(index) {\n        const pointLabels = this._pointLabels || [];\n        if (index >= 0 && index < pointLabels.length) {\n            const pointLabel = pointLabels[index];\n            return createPointLabelContext(this.getContext(), index, pointLabel);\n        }\n    }\n    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {\n        const angle = this.getIndexAngle(index) - HALF_PI + additionalAngle;\n        return {\n            x: Math.cos(angle) * distanceFromCenter + this.xCenter,\n            y: Math.sin(angle) * distanceFromCenter + this.yCenter,\n            angle\n        };\n    }\n    getPointPositionForValue(index, value) {\n        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));\n    }\n    getBasePosition(index) {\n        return this.getPointPositionForValue(index || 0, this.getBaseValue());\n    }\n    getPointLabelPosition(index) {\n        const { left , top , right , bottom  } = this._pointLabelItems[index];\n        return {\n            left,\n            top,\n            right,\n            bottom\n        };\n    }\n drawBackground() {\n        const { backgroundColor , grid: { circular  }  } = this.options;\n        if (backgroundColor) {\n            const ctx = this.ctx;\n            ctx.save();\n            ctx.beginPath();\n            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);\n            ctx.closePath();\n            ctx.fillStyle = backgroundColor;\n            ctx.fill();\n            ctx.restore();\n        }\n    }\n drawGrid() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const { angleLines , grid , border  } = opts;\n        const labelCount = this._pointLabels.length;\n        let i, offset, position;\n        if (opts.pointLabels.display) {\n            drawPointLabels(this, labelCount);\n        }\n        if (grid.display) {\n            this.ticks.forEach((tick, index)=>{\n                if (index !== 0 || index === 0 && this.min < 0) {\n                    offset = this.getDistanceFromCenterForValue(tick.value);\n                    const context = this.getContext(index);\n                    const optsAtIndex = grid.setContext(context);\n                    const optsAtIndexBorder = border.setContext(context);\n                    drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);\n                }\n            });\n        }\n        if (angleLines.display) {\n            ctx.save();\n            for(i = labelCount - 1; i >= 0; i--){\n                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));\n                const { color , lineWidth  } = optsAtIndex;\n                if (!lineWidth || !color) {\n                    continue;\n                }\n                ctx.lineWidth = lineWidth;\n                ctx.strokeStyle = color;\n                ctx.setLineDash(optsAtIndex.borderDash);\n                ctx.lineDashOffset = optsAtIndex.borderDashOffset;\n                offset = this.getDistanceFromCenterForValue(opts.reverse ? this.min : this.max);\n                position = this.getPointPosition(i, offset);\n                ctx.beginPath();\n                ctx.moveTo(this.xCenter, this.yCenter);\n                ctx.lineTo(position.x, position.y);\n                ctx.stroke();\n            }\n            ctx.restore();\n        }\n    }\n drawBorder() {}\n drawLabels() {\n        const ctx = this.ctx;\n        const opts = this.options;\n        const tickOpts = opts.ticks;\n        if (!tickOpts.display) {\n            return;\n        }\n        const startAngle = this.getIndexAngle(0);\n        let offset, width;\n        ctx.save();\n        ctx.translate(this.xCenter, this.yCenter);\n        ctx.rotate(startAngle);\n        ctx.textAlign = 'center';\n        ctx.textBaseline = 'middle';\n        this.ticks.forEach((tick, index)=>{\n            if (index === 0 && this.min >= 0 && !opts.reverse) {\n                return;\n            }\n            const optsAtIndex = tickOpts.setContext(this.getContext(index));\n            const tickFont = toFont(optsAtIndex.font);\n            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);\n            if (optsAtIndex.showLabelBackdrop) {\n                ctx.font = tickFont.string;\n                width = ctx.measureText(tick.label).width;\n                ctx.fillStyle = optsAtIndex.backdropColor;\n                const padding = toPadding(optsAtIndex.backdropPadding);\n                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);\n            }\n            renderText(ctx, tick.label, 0, -offset, tickFont, {\n                color: optsAtIndex.color,\n                strokeColor: optsAtIndex.textStrokeColor,\n                strokeWidth: optsAtIndex.textStrokeWidth\n            });\n        });\n        ctx.restore();\n    }\n drawTitle() {}\n}\n\nconst INTERVALS = {\n    millisecond: {\n        common: true,\n        size: 1,\n        steps: 1000\n    },\n    second: {\n        common: true,\n        size: 1000,\n        steps: 60\n    },\n    minute: {\n        common: true,\n        size: 60000,\n        steps: 60\n    },\n    hour: {\n        common: true,\n        size: 3600000,\n        steps: 24\n    },\n    day: {\n        common: true,\n        size: 86400000,\n        steps: 30\n    },\n    week: {\n        common: false,\n        size: 604800000,\n        steps: 4\n    },\n    month: {\n        common: true,\n        size: 2.628e9,\n        steps: 12\n    },\n    quarter: {\n        common: false,\n        size: 7.884e9,\n        steps: 4\n    },\n    year: {\n        common: true,\n        size: 3.154e10\n    }\n};\n const UNITS =  /* #__PURE__ */ Object.keys(INTERVALS);\n function sorter(a, b) {\n    return a - b;\n}\n function parse(scale, input) {\n    if (isNullOrUndef(input)) {\n        return null;\n    }\n    const adapter = scale._adapter;\n    const { parser , round , isoWeekday  } = scale._parseOpts;\n    let value = input;\n    if (typeof parser === 'function') {\n        value = parser(value);\n    }\n    if (!isNumberFinite(value)) {\n        value = typeof parser === 'string' ? adapter.parse(value, parser) : adapter.parse(value);\n    }\n    if (value === null) {\n        return null;\n    }\n    if (round) {\n        value = round === 'week' && (isNumber(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, 'isoWeek', isoWeekday) : adapter.startOf(value, round);\n    }\n    return +value;\n}\n function determineUnitForAutoTicks(minUnit, min, max, capacity) {\n    const ilen = UNITS.length;\n    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){\n        const interval = INTERVALS[UNITS[i]];\n        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;\n        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) {\n            return UNITS[i];\n        }\n    }\n    return UNITS[ilen - 1];\n}\n function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {\n    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){\n        const unit = UNITS[i];\n        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) {\n            return unit;\n        }\n    }\n    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];\n}\n function determineMajorUnit(unit) {\n    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){\n        if (INTERVALS[UNITS[i]].common) {\n            return UNITS[i];\n        }\n    }\n}\n function addTick(ticks, time, timestamps) {\n    if (!timestamps) {\n        ticks[time] = true;\n    } else if (timestamps.length) {\n        const { lo , hi  } = _lookup(timestamps, time);\n        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];\n        ticks[timestamp] = true;\n    }\n}\n function setMajorTicks(scale, ticks, map, majorUnit) {\n    const adapter = scale._adapter;\n    const first = +adapter.startOf(ticks[0].value, majorUnit);\n    const last = ticks[ticks.length - 1].value;\n    let major, index;\n    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){\n        index = map[major];\n        if (index >= 0) {\n            ticks[index].major = true;\n        }\n    }\n    return ticks;\n}\n function ticksFromTimestamps(scale, values, majorUnit) {\n    const ticks = [];\n     const map = {};\n    const ilen = values.length;\n    let i, value;\n    for(i = 0; i < ilen; ++i){\n        value = values[i];\n        map[value] = i;\n        ticks.push({\n            value,\n            major: false\n        });\n    }\n    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);\n}\nclass TimeScale extends Scale {\n    static id = 'time';\n static defaults = {\n bounds: 'data',\n        adapters: {},\n        time: {\n            parser: false,\n            unit: false,\n            round: false,\n            isoWeekday: false,\n            minUnit: 'millisecond',\n            displayFormats: {}\n        },\n        ticks: {\n source: 'auto',\n            callback: false,\n            major: {\n                enabled: false\n            }\n        }\n    };\n constructor(props){\n        super(props);\n         this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n         this._unit = 'day';\n         this._majorUnit = undefined;\n        this._offsets = {};\n        this._normalized = false;\n        this._parseOpts = undefined;\n    }\n    init(scaleOpts, opts = {}) {\n        const time = scaleOpts.time || (scaleOpts.time = {});\n         const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);\n        adapter.init(opts);\n        mergeIf(time.displayFormats, adapter.formats());\n        this._parseOpts = {\n            parser: time.parser,\n            round: time.round,\n            isoWeekday: time.isoWeekday\n        };\n        super.init(scaleOpts);\n        this._normalized = opts.normalized;\n    }\n parse(raw, index) {\n        if (raw === undefined) {\n            return null;\n        }\n        return parse(this, raw);\n    }\n    beforeLayout() {\n        super.beforeLayout();\n        this._cache = {\n            data: [],\n            labels: [],\n            all: []\n        };\n    }\n    determineDataLimits() {\n        const options = this.options;\n        const adapter = this._adapter;\n        const unit = options.time.unit || 'day';\n        let { min , max , minDefined , maxDefined  } = this.getUserBounds();\n function _applyBounds(bounds) {\n            if (!minDefined && !isNaN(bounds.min)) {\n                min = Math.min(min, bounds.min);\n            }\n            if (!maxDefined && !isNaN(bounds.max)) {\n                max = Math.max(max, bounds.max);\n            }\n        }\n        if (!minDefined || !maxDefined) {\n            _applyBounds(this._getLabelBounds());\n            if (options.bounds !== 'ticks' || options.ticks.source !== 'labels') {\n                _applyBounds(this.getMinMax(false));\n            }\n        }\n        min = isNumberFinite(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);\n        max = isNumberFinite(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;\n        this.min = Math.min(min, max - 1);\n        this.max = Math.max(min + 1, max);\n    }\n _getLabelBounds() {\n        const arr = this.getLabelTimestamps();\n        let min = Number.POSITIVE_INFINITY;\n        let max = Number.NEGATIVE_INFINITY;\n        if (arr.length) {\n            min = arr[0];\n            max = arr[arr.length - 1];\n        }\n        return {\n            min,\n            max\n        };\n    }\n buildTicks() {\n        const options = this.options;\n        const timeOpts = options.time;\n        const tickOpts = options.ticks;\n        const timestamps = tickOpts.source === 'labels' ? this.getLabelTimestamps() : this._generate();\n        if (options.bounds === 'ticks' && timestamps.length) {\n            this.min = this._userMin || timestamps[0];\n            this.max = this._userMax || timestamps[timestamps.length - 1];\n        }\n        const min = this.min;\n        const max = this.max;\n        const ticks = _filterBetween(timestamps, min, max);\n        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));\n        this._majorUnit = !tickOpts.major.enabled || this._unit === 'year' ? undefined : determineMajorUnit(this._unit);\n        this.initOffsets(timestamps);\n        if (options.reverse) {\n            ticks.reverse();\n        }\n        return ticksFromTimestamps(this, ticks, this._majorUnit);\n    }\n    afterAutoSkip() {\n        if (this.options.offsetAfterAutoskip) {\n            this.initOffsets(this.ticks.map((tick)=>+tick.value));\n        }\n    }\n initOffsets(timestamps = []) {\n        let start = 0;\n        let end = 0;\n        let first, last;\n        if (this.options.offset && timestamps.length) {\n            first = this.getDecimalForValue(timestamps[0]);\n            if (timestamps.length === 1) {\n                start = 1 - first;\n            } else {\n                start = (this.getDecimalForValue(timestamps[1]) - first) / 2;\n            }\n            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);\n            if (timestamps.length === 1) {\n                end = last;\n            } else {\n                end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;\n            }\n        }\n        const limit = timestamps.length < 3 ? 0.5 : 0.25;\n        start = _limitValue(start, 0, limit);\n        end = _limitValue(end, 0, limit);\n        this._offsets = {\n            start,\n            end,\n            factor: 1 / (start + 1 + end)\n        };\n    }\n _generate() {\n        const adapter = this._adapter;\n        const min = this.min;\n        const max = this.max;\n        const options = this.options;\n        const timeOpts = options.time;\n        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));\n        const stepSize = valueOrDefault(options.ticks.stepSize, 1);\n        const weekday = minor === 'week' ? timeOpts.isoWeekday : false;\n        const hasWeekday = isNumber(weekday) || weekday === true;\n        const ticks = {};\n        let first = min;\n        let time, count;\n        if (hasWeekday) {\n            first = +adapter.startOf(first, 'isoWeek', weekday);\n        }\n        first = +adapter.startOf(first, hasWeekday ? 'day' : minor);\n        if (adapter.diff(max, min, minor) > 100000 * stepSize) {\n            throw new Error(min + ' and ' + max + ' are too far apart with stepSize of ' + stepSize + ' ' + minor);\n        }\n        const timestamps = options.ticks.source === 'data' && this.getDataTimestamps();\n        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++){\n            addTick(ticks, time, timestamps);\n        }\n        if (time === max || options.bounds === 'ticks' || count === 1) {\n            addTick(ticks, time, timestamps);\n        }\n        return Object.keys(ticks).sort(sorter).map((x)=>+x);\n    }\n getLabelForValue(value) {\n        const adapter = this._adapter;\n        const timeOpts = this.options.time;\n        if (timeOpts.tooltipFormat) {\n            return adapter.format(value, timeOpts.tooltipFormat);\n        }\n        return adapter.format(value, timeOpts.displayFormats.datetime);\n    }\n format(value, format) {\n        const options = this.options;\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const fmt = format || formats[unit];\n        return this._adapter.format(value, fmt);\n    }\n _tickFormatFunction(time, index, ticks, format) {\n        const options = this.options;\n        const formatter = options.ticks.callback;\n        if (formatter) {\n            return callback(formatter, [\n                time,\n                index,\n                ticks\n            ], this);\n        }\n        const formats = options.time.displayFormats;\n        const unit = this._unit;\n        const majorUnit = this._majorUnit;\n        const minorFormat = unit && formats[unit];\n        const majorFormat = majorUnit && formats[majorUnit];\n        const tick = ticks[index];\n        const major = majorUnit && majorFormat && tick && tick.major;\n        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));\n    }\n generateTickLabels(ticks) {\n        let i, ilen, tick;\n        for(i = 0, ilen = ticks.length; i < ilen; ++i){\n            tick = ticks[i];\n            tick.label = this._tickFormatFunction(tick.value, i, ticks);\n        }\n    }\n getDecimalForValue(value) {\n        return value === null ? NaN : (value - this.min) / (this.max - this.min);\n    }\n getPixelForValue(value) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForValue(value);\n        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return this.min + pos * (this.max - this.min);\n    }\n _getLabelSize(label) {\n        const ticksOpts = this.options.ticks;\n        const tickLabelWidth = this.ctx.measureText(label).width;\n        const angle = toRadians(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);\n        const cosRotation = Math.cos(angle);\n        const sinRotation = Math.sin(angle);\n        const tickFontSize = this._resolveTickFontOptions(0).size;\n        return {\n            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,\n            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation\n        };\n    }\n _getLabelCapacity(exampleTime) {\n        const timeOpts = this.options.time;\n        const displayFormats = timeOpts.displayFormats;\n        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;\n        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [\n            exampleTime\n        ], this._majorUnit), format);\n        const size = this._getLabelSize(exampleLabel);\n        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;\n        return capacity > 0 ? capacity : 1;\n    }\n getDataTimestamps() {\n        let timestamps = this._cache.data || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const metas = this.getMatchingVisibleMetas();\n        if (this._normalized && metas.length) {\n            return this._cache.data = metas[0].controller.getAllParsedValues(this);\n        }\n        for(i = 0, ilen = metas.length; i < ilen; ++i){\n            timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));\n        }\n        return this._cache.data = this.normalize(timestamps);\n    }\n getLabelTimestamps() {\n        const timestamps = this._cache.labels || [];\n        let i, ilen;\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const labels = this.getLabels();\n        for(i = 0, ilen = labels.length; i < ilen; ++i){\n            timestamps.push(parse(this, labels[i]));\n        }\n        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);\n    }\n normalize(values) {\n        return _arrayUnique(values.sort(sorter));\n    }\n}\n\nfunction interpolate(table, val, reverse) {\n    let lo = 0;\n    let hi = table.length - 1;\n    let prevSource, nextSource, prevTarget, nextTarget;\n    if (reverse) {\n        if (val >= table[lo].pos && val <= table[hi].pos) {\n            ({ lo , hi  } = _lookupByKey(table, 'pos', val));\n        }\n        ({ pos: prevSource , time: prevTarget  } = table[lo]);\n        ({ pos: nextSource , time: nextTarget  } = table[hi]);\n    } else {\n        if (val >= table[lo].time && val <= table[hi].time) {\n            ({ lo , hi  } = _lookupByKey(table, 'time', val));\n        }\n        ({ time: prevSource , pos: prevTarget  } = table[lo]);\n        ({ time: nextSource , pos: nextTarget  } = table[hi]);\n    }\n    const span = nextSource - prevSource;\n    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;\n}\nclass TimeSeriesScale extends TimeScale {\n    static id = 'timeseries';\n static defaults = TimeScale.defaults;\n constructor(props){\n        super(props);\n         this._table = [];\n         this._minPos = undefined;\n         this._tableRange = undefined;\n    }\n initOffsets() {\n        const timestamps = this._getTimestampsForTable();\n        const table = this._table = this.buildLookupTable(timestamps);\n        this._minPos = interpolate(table, this.min);\n        this._tableRange = interpolate(table, this.max) - this._minPos;\n        super.initOffsets(timestamps);\n    }\n buildLookupTable(timestamps) {\n        const { min , max  } = this;\n        const items = [];\n        const table = [];\n        let i, ilen, prev, curr, next;\n        for(i = 0, ilen = timestamps.length; i < ilen; ++i){\n            curr = timestamps[i];\n            if (curr >= min && curr <= max) {\n                items.push(curr);\n            }\n        }\n        if (items.length < 2) {\n            return [\n                {\n                    time: min,\n                    pos: 0\n                },\n                {\n                    time: max,\n                    pos: 1\n                }\n            ];\n        }\n        for(i = 0, ilen = items.length; i < ilen; ++i){\n            next = items[i + 1];\n            prev = items[i - 1];\n            curr = items[i];\n            if (Math.round((next + prev) / 2) !== curr) {\n                table.push({\n                    time: curr,\n                    pos: i / (ilen - 1)\n                });\n            }\n        }\n        return table;\n    }\n _generate() {\n        const min = this.min;\n        const max = this.max;\n        let timestamps = super.getDataTimestamps();\n        if (!timestamps.includes(min) || !timestamps.length) {\n            timestamps.splice(0, 0, min);\n        }\n        if (!timestamps.includes(max) || timestamps.length === 1) {\n            timestamps.push(max);\n        }\n        return timestamps.sort((a, b)=>a - b);\n    }\n _getTimestampsForTable() {\n        let timestamps = this._cache.all || [];\n        if (timestamps.length) {\n            return timestamps;\n        }\n        const data = this.getDataTimestamps();\n        const label = this.getLabelTimestamps();\n        if (data.length && label.length) {\n            timestamps = this.normalize(data.concat(label));\n        } else {\n            timestamps = data.length ? data : label;\n        }\n        timestamps = this._cache.all = timestamps;\n        return timestamps;\n    }\n getDecimalForValue(value) {\n        return (interpolate(this._table, value) - this._minPos) / this._tableRange;\n    }\n getValueForPixel(pixel) {\n        const offsets = this._offsets;\n        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;\n        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);\n    }\n}\n\nvar scales = /*#__PURE__*/Object.freeze({\n__proto__: null,\nCategoryScale: CategoryScale,\nLinearScale: LinearScale,\nLogarithmicScale: LogarithmicScale,\nRadialLinearScale: RadialLinearScale,\nTimeScale: TimeScale,\nTimeSeriesScale: TimeSeriesScale\n});\n\nconst registerables = [\n    controllers,\n    elements,\n    plugins,\n    scales\n];\n\nexport { Animation, Animations, ArcElement, BarController, BarElement, BasePlatform, BasicPlatform, BubbleController, CategoryScale, Chart, plugin_colors as Colors, DatasetController, plugin_decimation as Decimation, DomPlatform, DoughnutController, Element, index as Filler, Interaction, plugin_legend as Legend, LineController, LineElement, LinearScale, LogarithmicScale, PieController, PointElement, PolarAreaController, RadarController, RadialLinearScale, Scale, ScatterController, plugin_subtitle as SubTitle, Ticks, TimeScale, TimeSeriesScale, plugin_title as Title, plugin_tooltip as Tooltip, adapters as _adapters, _detectPlatform, animator, controllers, defaults, elements, layouts, plugins, registerables, registry, scales };\n//# sourceMappingURL=chart.js.map\n","import React, { forwardRef, useRef, useEffect } from 'react';\nimport { Chart as Chart$1, LineController, BarController, RadarController, DoughnutController, PolarAreaController, BubbleController, PieController, ScatterController } from 'chart.js';\n\nconst defaultDatasetIdKey = 'label';\nfunction reforwardRef(ref, value) {\n    if (typeof ref === 'function') {\n        ref(value);\n    } else if (ref) {\n        ref.current = value;\n    }\n}\nfunction setOptions(chart, nextOptions) {\n    const options = chart.options;\n    if (options && nextOptions) {\n        Object.assign(options, nextOptions);\n    }\n}\nfunction setLabels(currentData, nextLabels) {\n    currentData.labels = nextLabels;\n}\nfunction setDatasets(currentData, nextDatasets) {\n    let datasetIdKey = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : defaultDatasetIdKey;\n    const addedDatasets = [];\n    currentData.datasets = nextDatasets.map((nextDataset)=>{\n        // given the new set, find it's current match\n        const currentDataset = currentData.datasets.find((dataset)=>dataset[datasetIdKey] === nextDataset[datasetIdKey]);\n        // There is no original to update, so simply add new one\n        if (!currentDataset || !nextDataset.data || addedDatasets.includes(currentDataset)) {\n            return {\n                ...nextDataset\n            };\n        }\n        addedDatasets.push(currentDataset);\n        Object.assign(currentDataset, nextDataset);\n        return currentDataset;\n    });\n}\nfunction cloneData(data) {\n    let datasetIdKey = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : defaultDatasetIdKey;\n    const nextData = {\n        labels: [],\n        datasets: []\n    };\n    setLabels(nextData, data.labels);\n    setDatasets(nextData, data.datasets, datasetIdKey);\n    return nextData;\n}\n/**\n * Get dataset from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getDatasetAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event.nativeEvent, 'dataset', {\n        intersect: true\n    }, false);\n}\n/**\n * Get single dataset element from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getElementAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event.nativeEvent, 'nearest', {\n        intersect: true\n    }, false);\n}\n/**\n * Get all dataset elements from mouse click event\n * @param chart - Chart.js instance\n * @param event - Mouse click event\n * @returns Dataset\n */ function getElementsAtEvent(chart, event) {\n    return chart.getElementsAtEventForMode(event.nativeEvent, 'index', {\n        intersect: true\n    }, false);\n}\n\nfunction ChartComponent(props, ref) {\n    const { height = 150, width = 300, redraw = false, datasetIdKey, type, data, options, plugins = [], fallbackContent, updateMode, ...canvasProps } = props;\n    const canvasRef = useRef(null);\n    const chartRef = useRef(null);\n    const renderChart = ()=>{\n        if (!canvasRef.current) return;\n        chartRef.current = new Chart$1(canvasRef.current, {\n            type,\n            data: cloneData(data, datasetIdKey),\n            options: options && {\n                ...options\n            },\n            plugins\n        });\n        reforwardRef(ref, chartRef.current);\n    };\n    const destroyChart = ()=>{\n        reforwardRef(ref, null);\n        if (chartRef.current) {\n            chartRef.current.destroy();\n            chartRef.current = null;\n        }\n    };\n    useEffect(()=>{\n        if (!redraw && chartRef.current && options) {\n            setOptions(chartRef.current, options);\n        }\n    }, [\n        redraw,\n        options\n    ]);\n    useEffect(()=>{\n        if (!redraw && chartRef.current) {\n            setLabels(chartRef.current.config.data, data.labels);\n        }\n    }, [\n        redraw,\n        data.labels\n    ]);\n    useEffect(()=>{\n        if (!redraw && chartRef.current && data.datasets) {\n            setDatasets(chartRef.current.config.data, data.datasets, datasetIdKey);\n        }\n    }, [\n        redraw,\n        data.datasets\n    ]);\n    useEffect(()=>{\n        if (!chartRef.current) return;\n        if (redraw) {\n            destroyChart();\n            setTimeout(renderChart);\n        } else {\n            chartRef.current.update(updateMode);\n        }\n    }, [\n        redraw,\n        options,\n        data.labels,\n        data.datasets,\n        updateMode\n    ]);\n    useEffect(()=>{\n        if (!chartRef.current) return;\n        destroyChart();\n        setTimeout(renderChart);\n    }, [\n        type\n    ]);\n    useEffect(()=>{\n        renderChart();\n        return ()=>destroyChart();\n    }, []);\n    return /*#__PURE__*/ React.createElement(\"canvas\", {\n        ref: canvasRef,\n        role: \"img\",\n        height: height,\n        width: width,\n        ...canvasProps\n    }, fallbackContent);\n}\nconst Chart = /*#__PURE__*/ forwardRef(ChartComponent);\n\nfunction createTypedChart(type, registerables) {\n    Chart$1.register(registerables);\n    return /*#__PURE__*/ forwardRef((props, ref)=>/*#__PURE__*/ React.createElement(Chart, {\n            ...props,\n            ref: ref,\n            type: type\n        }));\n}\nconst Line = /* #__PURE__ */ createTypedChart('line', LineController);\nconst Bar = /* #__PURE__ */ createTypedChart('bar', BarController);\nconst Radar = /* #__PURE__ */ createTypedChart('radar', RadarController);\nconst Doughnut = /* #__PURE__ */ createTypedChart('doughnut', DoughnutController);\nconst PolarArea = /* #__PURE__ */ createTypedChart('polarArea', PolarAreaController);\nconst Bubble = /* #__PURE__ */ createTypedChart('bubble', BubbleController);\nconst Pie = /* #__PURE__ */ createTypedChart('pie', PieController);\nconst Scatter = /* #__PURE__ */ createTypedChart('scatter', ScatterController);\n\nexport { Bar, Bubble, Chart, Doughnut, Line, Pie, PolarArea, Radar, Scatter, getDatasetAtEvent, getElementAtEvent, getElementsAtEvent };\n//# sourceMappingURL=index.js.map\n"],"names":["round","v","lim","l","h","Math","max","min","p2b","n2b","b2n","n2p","map$1","A","B","C","D","E","F","a","b","c","d","e","f","hex","h1","h2","eq","hexString","r","g","isShort","alpha","undefined","HUE_RE","hsl2rgbn","s","n","k","hsv2rgbn","hwb2rgbn","w","rgb","i","rgb2hsl","hueValue","calln","Array","isArray","map","hsl2rgb","hue","hueParse","str","m","exec","p1","p2","hwb2rgb","hsv2rgb","x","Z","Y","X","W","V","U","T","S","R","Q","P","O","N","M","L","K","G","H","I","J","names$1","OiceXe","antiquewEte","aqua","aquamarRe","azuY","beige","bisque","black","blanKedOmond","Xe","XeviTet","bPwn","burlywood","caMtXe","KartYuse","KocTate","cSO","cSnflowerXe","cSnsilk","crimson","cyan","xXe","xcyan","xgTMnPd","xWay","xgYF","xgYy","xkhaki","xmagFta","xTivegYF","xSange","xScEd","xYd","xsOmon","xsHgYF","xUXe","xUWay","xUgYy","xQe","xviTet","dAppRk","dApskyXe","dimWay","dimgYy","dodgerXe","fiYbrick","flSOwEte","foYstWAn","fuKsia","gaRsbSo","ghostwEte","gTd","gTMnPd","Way","gYF","gYFLw","gYy","honeyMw","hotpRk","RdianYd","Rdigo","ivSy","khaki","lavFMr","lavFMrXsh","lawngYF","NmoncEffon","ZXe","ZcSO","Zcyan","ZgTMnPdLw","ZWay","ZgYF","ZgYy","ZpRk","ZsOmon","ZsHgYF","ZskyXe","ZUWay","ZUgYy","ZstAlXe","ZLw","lime","limegYF","lRF","magFta","maPon","VaquamarRe","VXe","VScEd","VpurpN","VsHgYF","VUXe","VsprRggYF","VQe","VviTetYd","midnightXe","mRtcYam","mistyPse","moccasR","navajowEte","navy","Tdlace","Tive","TivedBb","Sange","SangeYd","ScEd","pOegTMnPd","pOegYF","pOeQe","pOeviTetYd","papayawEp","pHKpuff","peru","pRk","plum","powMrXe","purpN","YbeccapurpN","Yd","Psybrown","PyOXe","saddNbPwn","sOmon","sandybPwn","sHgYF","sHshell","siFna","silver","skyXe","UXe","UWay","UgYy","snow","sprRggYF","stAlXe","tan","teO","tEstN","tomato","Qe","viTet","JHt","wEte","wEtesmoke","Lw","LwgYF","names","nameParse","unpacked","keys","Object","tkeys","j","ok","nk","length","replace","parseInt","unpack","transparent","toLowerCase","RGB_RE","to","pow","from","modHSL","ratio","tmp","clone","proto","assign","fromObject","input","functionParse","charAt","rgbParse","Color","constructor","type","ret","len","this","_rgb","_valid","valid","obj","rgbString","hslString","mix","color","weight","c1","c2","w2","p","w1","interpolate","t","rgb1","rgb2","clearer","greyscale","val","opaquer","negate","lighten","darken","saturate","desaturate","rotate","deg","noop","uid","id","isNullOrUndef","value","prototype","toString","call","slice","isObject","isNumberFinite","Number","isFinite","finiteOrDefault","defaultValue","valueOrDefault","toDimension","dimension","endsWith","parseFloat","callback","fn","args","thisArg","apply","each","loopable","reverse","_elementsEqual","a0","a1","ilen","v0","v1","datasetIndex","index","source","target","create","klen","isValidKey","key","indexOf","_merger","options","tval","sval","merge","sources","merger","current","mergeIf","_mergerIf","hasOwnProperty","keyResolvers","o","y","resolveObjectKey","resolver","parts","split","part","push","_splitKey","_getKeyResolver","_capitalize","toUpperCase","defined","isFunction","setsEqual","size","item","has","PI","TAU","INFINITY","POSITIVE_INFINITY","RAD_PER_DEG","HALF_PI","QUARTER_PI","TWO_THIRDS_PI","sign","isNumber","Symbol","toPrimitive","isNonPrimitive","isNaN","toRadians","degrees","getAngleFromPoint","centrePoint","anglePoint","distanceFromXCenter","distanceFromYCenter","radialDistanceFromCenter","sqrt","angle","atan2","distance","_normalizeAngle","_angleBetween","start","end","sameAngleIsFullCircle","angleToStart","angleToEnd","startToAngle","endToAngle","_limitValue","_isBetween","epsilon","_lookup","table","cmp","mid","hi","lo","_lookupByKey","last","ti","_rlookupByKey","arrayEvents","unlistenArrayEvents","array","listener","stub","_chartjs","listeners","splice","forEach","requestAnimFrame","window","requestAnimationFrame","throttled","argsToUse","ticking","_toLeftRightCenter","align","_alignStartEnd","atEdge","elasticIn","sin","elasticOut","effects","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInSine","cos","easeOutSine","easeInOutSine","easeInExpo","easeOutExpo","easeInOutExpo","easeInCirc","easeOutCirc","easeInOutCirc","easeInElastic","easeOutElastic","easeInOutElastic","easeInBack","easeOutBack","easeInOutBack","easeInBounce","easeOutBounce","easeInOutBounce","isPatternOrGradient","getHoverColor","numbers","colors","intlCache","Map","formatNumber","num","locale","cacheKey","JSON","stringify","formatter","get","Intl","NumberFormat","set","getNumberFormat","format","Ticks","formatters","values","overrides","descriptors","getScope$1","node","root","scope","Defaults","_descriptors","_appliers","animation","backgroundColor","borderColor","datasets","devicePixelRatio","context","chart","platform","getDevicePixelRatio","elements","events","font","family","style","lineHeight","hover","hoverBackgroundColor","ctx","hoverBorderColor","hoverColor","indexAxis","interaction","mode","intersect","includeInvisible","maintainAspectRatio","onHover","onClick","parsing","plugins","responsive","scale","scales","showLine","drawActiveElementsOnTop","describe","override","route","name","targetScope","targetName","scopeObject","targetScopeObject","privateName","defineProperties","writable","enumerable","local","appliers","defaults","_scriptable","startsWith","_indexable","_fallback","delay","duration","easing","loop","properties","active","resize","show","animations","visible","hide","autoPadding","padding","top","right","bottom","left","display","offset","beginAtZero","bounds","clip","grace","grid","lineWidth","drawOnChartArea","drawTicks","tickLength","tickWidth","_ctx","tickColor","border","dash","dashOffset","width","title","text","ticks","minRotation","maxRotation","mirror","textStrokeWidth","textStrokeColor","autoSkip","autoSkipPadding","labelOffset","minor","major","crossAlign","showLabelBackdrop","backdropColor","backdropPadding","_measureText","data","gc","longest","string","textWidth","measureText","_alignPixel","pixel","currentDevicePixelRatio","halfWidth","clearCanvas","canvas","getContext","save","resetTransform","clearRect","height","restore","drawPoint","drawPointLegend","xOffset","yOffset","cornerRadius","xOffsetW","yOffsetW","pointStyle","rotation","radius","rad","translate","drawImage","beginPath","ellipse","arc","closePath","moveTo","lineTo","SQRT1_2","rect","fill","borderWidth","stroke","_isPointInArea","point","area","margin","clipArea","unclipArea","decorateText","line","opts","strikethrough","underline","metrics","actualBoundingBoxLeft","actualBoundingBoxRight","actualBoundingBoxAscent","actualBoundingBoxDescent","yDecoration","strokeStyle","fillStyle","decorationWidth","drawBackdrop","oldColor","fillRect","renderText","lines","strokeWidth","strokeColor","translation","textAlign","textBaseline","setRenderOpts","backdrop","strokeText","maxWidth","fillText","addRoundedRectPath","topLeft","bottomLeft","bottomRight","topRight","LINE_HEIGHT","FONT_STYLE","toLineHeight","matches","match","_readValueToProps","props","objProps","read","prop","toTRBLCorners","toPadding","toTRBL","toFont","fallback","console","warn","toFontString","resolve","inputs","info","createContext","parentContext","_createResolver","scopes","prefixes","rootScopes","getTarget","finalRootScopes","_resolve","cache","toStringTag","_cacheable","_scopes","_rootScopes","_getTarget","Proxy","deleteProperty","_keys","_cached","proxy","prefix","readKey","needsSubResolver","createSubResolver","_resolveWithPrefixes","getOwnPropertyDescriptor","Reflect","getPrototypeOf","getKeysFromAllScopes","includes","ownKeys","storage","_storage","_attachContext","subProxy","descriptorDefaults","_proxy","_context","_subProxy","_stack","Set","setContext","receiver","isScriptable","getValue","Error","join","add","delete","_resolveScriptable","isIndexable","arr","filter","_resolveArray","_resolveWithContext","allKeys","configurable","scriptable","indexable","_allKeys","resolveFallback","getScope","parent","addScopes","parentScopes","parentFallback","allScopes","addScopesFromKey","subGetTarget","resolveKeysFromAllScopes","_isDomSupported","document","_getParentNode","domNode","parentNode","host","parseMaxStyle","styleValue","parentProperty","valueInPixels","getComputedStyle","element","ownerDocument","defaultView","positions","getPositionedStyle","styles","suffix","result","pos","getRelativePosition","event","borderBox","boxSizing","paddings","borders","box","touches","offsetX","offsetY","shadowRoot","useOffsetPos","getBoundingClientRect","clientX","clientY","getCanvasPosition","round1","getMaximumSize","bbWidth","bbHeight","aspectRatio","margins","maxHeight","containerSize","container","containerStyle","containerBorder","containerPadding","clientWidth","clientHeight","getContainerSize","floor","retinaScale","forceRatio","forceStyle","pixelRatio","deviceHeight","deviceWidth","setTransform","supportsEventListenerOptions","passiveSupported","passive","addEventListener","removeEventListener","readUsedSize","property","el","getPropertyValue","getStyle","getRtlAdapter","rtl","rectX","setWidth","xPlus","leftForLtr","itemWidth","getRightToLeftAdapter","_itemWidth","overrideTextDirection","direction","original","getPropertyPriority","setProperty","prevTextDirection","restoreTextDirection","Animator","_request","_charts","_running","_lastDate","_notify","anims","date","callbacks","numSteps","initial","currentStep","_refresh","_update","Date","now","remaining","running","items","draw","_active","_total","tick","pop","_getAnims","charts","complete","progress","listen","cb","reduce","acc","cur","_duration","stop","cancel","remove","animator","interpolators","boolean","factor","c0","number","Animation","cfg","currentValue","_fn","_easing","_start","_loop","_target","_prop","_from","_to","_promises","update","elapsed","remain","wait","promises","Promise","res","rej","resolved","method","Animations","config","_chart","_properties","configure","animationOptions","animatedProps","getOwnPropertyNames","option","_animateOptions","newOptions","$shared","$animations","resolveTargetOptions","_createAnimations","anim","all","awaitAll","then","scaleClip","allowedOverflow","getSortedDatasetIndices","filterVisible","metasets","_getSortedDatasetMetas","applyStack","stack","dsIndex","singleMode","otherValue","found","isStacked","meta","stacked","getOrCreateStack","stacks","stackKey","indexValue","subStack","getLastIndexInStack","vScale","positive","getMatchingVisibleMetas","updateStacks","controller","parsed","_cachedMeta","_stacks","iScale","iAxis","axis","vAxis","indexScale","valueScale","getStackKey","_top","_bottom","_visualValues","getFirstScaleId","shift","clearStacks","_parsed","isDirectUpdateMode","cloneIfNotShared","cached","shared","DatasetController","static","_cachedDataOpts","getMeta","_type","_parsing","_data","_objectData","_sharedOptions","_drawStart","_drawCount","enableOptionSharing","supportsDecimation","$context","_syncList","datasetElementType","dataElementType","initialize","linkScales","_stacked","addElements","isPluginEnabled","updateIndex","dataset","getDataset","chooseId","xid","xAxisID","yid","yAxisID","rid","rAxisID","iid","iAxisID","vid","vAxisID","xScale","getScaleForId","yScale","rScale","getDatasetMeta","scaleID","_getOtherScale","reset","_destroy","_dataCheck","iAxisKey","vAxisKey","adata","convertObjectDataToArray","isExtensible","defineProperty","base","object","buildOrUpdateElements","resetNewElements","stackChanged","oldStacked","_resyncElements","scopeKeys","datasetScopeKeys","getOptionScopes","createResolver","parse","count","sorted","_sorted","prev","parseArrayData","parseObjectData","parsePrimitiveData","isNotInOrderComparedToPrev","labels","getLabels","singleScale","xAxisKey","yAxisKey","getParsed","getDataElement","updateRangeFromParsed","range","parsedValue","NaN","getMinMax","canStack","otherScale","hidden","createStack","NEGATIVE_INFINITY","otherMin","otherMax","minDefined","maxDefined","getUserBounds","_skip","getAllParsedValues","getMaxOverflow","getLabelAndValue","label","getLabelForValue","_clip","disabled","toClip","defaultClip","chartArea","resolveDatasetElementOptions","resolveDataElementOptions","dataIndex","raw","createDataContext","createDatasetContext","_resolveElementOptions","elementType","sharing","datasetElementScopeKeys","resolveNamedOptions","freeze","_resolveAnimations","transition","datasetAnimationScopeKeys","getSharedOptions","includeOptions","sharedOptions","_animationsDisabled","_getSharedOptions","firstOpts","previouslySharedOptions","updateSharedOptions","updateElement","_setStyle","removeHoverStyle","setHoverStyle","_removeDatasetHoverStyle","_setDatasetHoverStyle","arg1","arg2","numMeta","numData","_insertElements","_removeElements","move","updateElements","removed","_sync","_dataChanges","_onDataPush","arguments","_onDataPop","_onDataShift","_onDataSplice","newCount","_onDataUnshift","DoughnutController","animateRotate","animateScale","cutout","circumference","spacing","legend","generateLabels","fontColor","getDataVisibility","legendItem","toggleDataVisibility","super","innerRadius","outerRadius","getter","_getRotation","_getCircumference","_getRotationExtents","isDatasetVisible","arcs","getMaxBorderWidth","getMaxOffset","maxSize","chartWeight","_getRingWeight","ratioX","ratioY","startAngle","endAngle","startX","startY","endX","endY","calcMax","calcMin","maxX","maxY","minX","minY","getRatioAndOffset","maxRadius","radiusLength","_getVisibleDatasetWeightTotal","total","calculateTotal","_getRingWeightOffset","_circumference","calculateCircumference","animationOpts","centerX","centerY","metaData","abs","borderAlign","hoverBorderWidth","hoverOffset","ringWeightOffset","binarySearch","metaset","spanGaps","lookupMethod","_reversePixels","distanceToDefinedLo","findIndex","distanceToDefinedHi","getRange","evaluateInteractionItems","position","handler","getSortedVisibleDatasetMetas","skip","getIntersectItems","useFinalPosition","isPointInArea","inRange","getNearestCartesianItems","distanceMetric","useX","useY","pt1","pt2","deltaX","deltaY","getDistanceMetricForAxis","minDistance","center","getCenterPoint","getNearestItems","getProps","getNearestRadialItems","getAxisItems","rangeMethod","intersectsItem","Interaction","modes","nearest","STATIC_POSITIONS","filterByPosition","filterDynamicPositionByAxis","sortByWeight","sort","setLayoutDims","layouts","params","wrap","stackWeight","placed","buildStacks","vBoxMaxWidth","hBoxMaxHeight","layout","fullSize","horizontal","availableWidth","availableHeight","getCombinedMax","maxPadding","updateMaxPadding","boxPadding","updateDims","getPadding","newWidth","outerWidth","newHeight","outerHeight","widthChanged","heightChanged","same","other","getMargins","marginForPositions","fitBoxes","boxes","refitBoxes","refit","changed","setBoxDims","placeBoxes","userPadding","addBox","_layers","z","removeBox","layoutItem","minPadding","layoutBoxes","isHorizontal","wrapBoxes","centerHorizontal","centerVertical","leftAndTop","concat","rightAndBottom","vertical","buildLayoutBoxes","verticalBoxes","horizontalBoxes","beforeLayout","visibleVerticalBoxCount","updatePos","change","handleMaxPadding","BasePlatform","acquireContext","releaseContext","isAttached","updateConfig","BasicPlatform","EXPANDO_KEY","EVENT_TYPES","touchstart","touchmove","touchend","pointerenter","pointerdown","pointermove","pointerup","pointerleave","pointerout","isNullOrEmpty","eventListenerOptions","removeListener","nodeListContains","nodeList","contains","createAttachObserver","observer","MutationObserver","entries","trigger","entry","addedNodes","removedNodes","observe","childList","subtree","createDetachObserver","drpListeningCharts","oldDevicePixelRatio","onWindowResize","dpr","createResizeObserver","ResizeObserver","contentRect","listenDevicePixelRatioChanges","releaseObserver","disconnect","unlistenDevicePixelRatioChanges","createProxyAndListen","native","fromNativeEvent","addListener","DomPlatform","renderHeight","getAttribute","renderWidth","displayWidth","displayHeight","initCanvas","removeAttribute","setAttribute","proxies","$proxies","attach","detach","isConnected","Element","tooltipPosition","hasValue","final","tickOpts","determinedMaxTicks","_tickSize","maxScale","_length","maxChart","_maxLength","determineMaxTicks","ticksLimit","maxTicksLimit","majorIndices","enabled","getMajorIndices","numMajorIndices","first","newTicks","next","ceil","skipMajors","evenMajorSpacing","diff","getEvenSpacing","factors","_factorize","calculateSpacing","avgMajorSpacing","majorStart","majorEnd","offsetFromEdge","edge","getTicksLimit","ticksLength","sample","numItems","increment","getPixelForGridLine","offsetGridLines","validIndex","_startPixel","_endPixel","lineValue","getPixelForTick","getTickMarkLength","getTitleHeight","titleAlign","reverseAlign","Scale","_margins","paddingTop","paddingBottom","paddingLeft","paddingRight","labelRotation","_range","_gridLineItems","_labelItems","_labelSizes","_longestTextCache","_userMax","_userMin","_suggestedMax","_suggestedMin","_ticksLength","_borderValue","_cache","_dataLimitsCached","init","suggestedMin","suggestedMax","metas","getTicks","xLabels","yLabels","getLabelItems","_computeLabelItems","beforeUpdate","sampleSize","beforeSetDimensions","setDimensions","afterSetDimensions","beforeDataLimits","determineDataLimits","afterDataLimits","minmax","keepZero","_addGrace","beforeBuildTicks","buildTicks","afterBuildTicks","samplingEnabled","_convertTicksToLabels","beforeCalculateLabelRotation","calculateLabelRotation","afterCalculateLabelRotation","afterAutoSkip","beforeFit","fit","afterFit","afterUpdate","startPixel","endPixel","reversePixels","_alignToPixels","alignToPixels","_callHooks","notifyPlugins","beforeTickToLabelConversion","generateTickLabels","afterTickToLabelConversion","numTicks","maxLabelDiagonal","_isVisible","labelSizes","_getLabelSizes","maxLabelWidth","widest","maxLabelHeight","highest","asin","minSize","titleOpts","gridOpts","titleHeight","tickPadding","angleRadians","labelHeight","labelWidth","_calculatePadding","_handleMargins","isRotated","labelsBelowTicks","offsetLeft","offsetRight","isFullSize","_computeLabelSizes","caches","widths","heights","jlen","tickFont","fontString","nestedLabel","widestLabelSize","highestLabelSize","_resolveTickFontOptions","gcLen","garbageCollect","valueAt","idx","getPixelForValue","getValueForPixel","getPixelForDecimal","decimal","getDecimalForPixel","getBasePixel","getBaseValue","createTickContext","optionTicks","rot","_computeGridLineItems","tl","borderOpts","axisWidth","axisHalfWidth","alignBorderValue","borderValue","alignedLineValue","tx1","ty1","tx2","ty2","x1","y1","x2","y2","positionAxisID","limit","step","optsAtIndex","optsAtIndexBorder","lineColor","borderDash","borderDashOffset","tickBorderDash","tickBorderDashOffset","tickAndPadding","hTickAndPadding","lineCount","textOffset","_getXAxisLabelAlignment","_getYAxisLabelAlignment","halfCount","tickTextAlign","labelPadding","_computeLabelArea","drawBackground","getLineWidthForValue","drawGrid","drawLine","setLineDash","lineDashOffset","drawBorder","lastLineWidth","drawLabels","renderTextOptions","drawTitle","titleX","titleY","titleArgs","tz","gz","bz","axisID","_maxDigits","fontSize","TypedRegistry","isForType","isPrototypeOf","register","parentScope","isIChartComponent","itemDefaults","defaultRoutes","routes","propertyParts","sourceName","sourceScope","routeDefaults","registerDefaults","unregister","Registry","controllers","_typedRegistries","_each","addControllers","addPlugins","addScales","getController","_get","getElement","getPlugin","getScale","removeControllers","removeElements","removePlugins","removeScales","typedRegistry","arg","reg","_getRegistryForType","_exec","itemReg","registry","component","camelMethod","PluginService","_init","notify","hook","_createDescriptors","descriptor","plugin","cancelable","invalidate","_oldCache","_notifyStateChanges","localIds","allPlugins","getOpts","pluginOpts","createDescriptors","previousDescriptors","some","pluginScopeKeys","getIndexAxis","datasetDefaults","idMatchesAxis","determineAxis","scaleOptions","getAxisFromDataset","mergeScaleConfig","chartDefaults","configScales","chartIndexAxis","scaleConf","error","boundDs","retrieveAxisFromDatasets","defaultId","getDefaultScaleIDFromAxis","defaultScaleOptions","defaultID","getAxisFromDefaultScaleID","initOptions","initData","keyCache","keysCached","cachedKeys","generate","addIfFound","Config","_config","initConfig","_scopeCache","_resolverCache","clearCache","clear","datasetType","additionalOptionScopes","_cachedScopes","mainScope","resetCache","keyLists","chartOptionScopes","subPrefixes","getResolver","hasFunction","needContext","resolverCache","KNOWN_POSITIONS","positionIsHorizontal","compare2Level","l1","l2","onAnimationsComplete","onComplete","onAnimationProgress","onProgress","getCanvas","getElementById","instances","getChart","moveNumericKeys","intKey","getSizeForArea","field","Chart$1","invalidatePlugins","userConfig","initialCanvas","existingChart","OffscreenCanvas","_detectPlatform","_options","_aspectRatio","_metasets","_lastEvent","_listeners","_responsiveListeners","_sortedMetasets","_plugins","_hiddenIndices","attached","_doResize","timeout","clearTimeout","setTimeout","debounce","resizeDelay","_initialize","bindEvents","_resizeBeforeDraw","_resize","newSize","newRatio","onResize","render","ensureScalesHaveIDs","axisOptions","buildOrUpdateScales","scaleOpts","updated","isRadial","dposition","dtype","scaleType","hasUpdated","_updateMetasets","_destroyDatasetMeta","_removeUnreferencedMetasets","_dataset","buildOrUpdateControllers","newControllers","order","ControllerClass","_resetElements","animsDisabled","_updateScales","_checkEventBindings","_updateHiddenIndices","_minPadding","_updateLayout","_updateDatasets","_eventHandler","_updateHoverStyles","existingEvents","newEvents","unbindEvents","changes","_getUniformDataChanges","datasetCount","makeSet","changeSet","noArea","_idx","_updateDataset","layers","_drawDatasets","_drawDataset","useClip","getDatasetArea","getElementsAtEventForMode","getVisibleDatasetCount","setDatasetVisibility","_updateVisibility","_stop","destroy","toBase64Image","toDataURL","bindUserEvents","bindResponsiveEvents","_add","_remove","detached","updateHoverStyle","getActiveElements","setActiveElements","activeElements","lastActive","pluginId","replay","hoverOptions","deactivated","activated","inChartArea","eventFilter","_handleEvent","_getActiveElements","isClick","_isClickEvent","lastEvent","determineLastEvent","Chart","parseBorderRadius$1","angleDelta","borderRadius","halfThickness","innerLimit","computeOuterLimit","outerArcLimit","outerStart","outerEnd","innerStart","innerEnd","rThetaToXY","theta","pathArc","circular","pixelMargin","innerR","spacingOffset","avNogSpacingRadius","angleOffset","outerStartAdjustedRadius","outerEndAdjustedRadius","outerStartAdjustedAngle","outerEndAdjustedAngle","innerStartAdjustedRadius","innerEndAdjustedRadius","innerStartAdjustedAngle","innerEndAdjustedAngle","outerMidAdjustedAngle","pCenter","p4","innerMidAdjustedAngle","p8","outerStartX","outerStartY","outerEndX","outerEndY","fullCircles","borderJoinStyle","inner","lineJoin","angleMargin","clipArc","ArcElement","chartX","chartY","rAdjust","nonZeroBetween","betweenAngles","withinRadius","halfAngle","halfRadius","radiusOffset","drawArc","getBoxSize","labelOpts","boxHeight","boxWidth","usePointStyle","pointStyleWidth","itemHeight","Legend","_added","legendHitBoxes","_hoveredItem","doughnutMode","legendItems","columnSizes","lineWidths","buildLabels","labelFont","_computeTitleHeight","_fitRows","_fitCols","hitboxes","totalHeight","row","_itemHeight","heightLimit","totalWidth","currentColWidth","currentColHeight","col","legendItemText","calculateItemWidth","fontLineHeight","calculateLegendItemHeight","calculateItemHeight","calculateItemSize","adjustHitBoxes","rtlHelper","hitbox","_draw","defaultColor","halfFontSize","cursor","textDirection","lineCap","lineDash","drawOptions","SQRT2","yBoxTop","xBoxLeft","drawLegendBox","_textX","titleFont","titlePadding","topPaddingPlusHalfFontSize","_getLegendItemAt","hitBox","lh","handleEvent","onLeave","isListened","hoveredItem","previous","sameItem","plugin_legend","_element","_args","afterEvent","ci","useBorderRadius","borderCapStyle","positioners","average","xSet","eventPosition","nearestElement","tp","pushOrConcat","toPush","splitNewlines","String","createTooltipItem","formattedValue","getTooltipSize","tooltip","body","footer","bodyFont","footerFont","titleLineCount","footerLineCount","bodyLineItemCount","combinedBodyLength","bodyItem","before","after","beforeBody","afterBody","titleSpacing","titleMarginBottom","displayColors","bodySpacing","footerMarginTop","footerSpacing","widthPadding","maxLineWidth","determineXAlign","yAlign","chartWidth","xAlign","caret","caretSize","caretPadding","doesNotFitWithAlign","determineAlignment","determineYAlign","getBackgroundPoint","alignment","paddingAndSize","alignX","alignY","getAlignedX","getBeforeAfterBodyLines","overrideCallbacks","defaultCallbacks","beforeTitle","tooltipItems","labelCount","afterTitle","beforeLabel","tooltipItem","labelColor","labelTextColor","bodyColor","labelPointStyle","afterLabel","beforeFooter","afterFooter","invokeCallbackWithFallback","Tooltip","opacity","_eventPosition","_size","_cachedAnimations","_tooltipItems","dataPoints","caretX","caretY","labelColors","labelPointStyles","labelTextColors","getTitle","getBeforeBody","getBody","bodyItems","scoped","getAfterBody","getFooter","_createItems","itemSort","positionAndSize","backgroundPoint","external","drawCaret","tooltipPoint","caretPosition","getCaretPosition","x3","y3","ptX","ptY","pt","titleColor","_drawColorBox","colorX","rtlColorX","yOffSet","colorY","multiKeyBackground","outerX","innerX","strokeRect","drawBody","bodyAlign","bodyLineHeight","xLinePadding","fillLineOfText","bodyAlignForCalculation","textColor","drawFooter","footerAlign","footerColor","tooltipSize","quadraticCurveTo","_updateAnimationTarget","animX","animY","_willRender","hasTooltipContent","globalAlpha","positionChanged","_positionChanged","_ignoreReplayEvents","plugin_tooltip","afterInit","afterDraw","defaultDatasetIdKey","reforwardRef","ref","setLabels","currentData","nextLabels","setDatasets","nextDatasets","datasetIdKey","addedDatasets","nextDataset","currentDataset","find","cloneData","nextData","ChartComponent","redraw","fallbackContent","updateMode","canvasProps","canvasRef","useRef","chartRef","renderChart","destroyChart","useEffect","nextOptions","setOptions","React","createElement","role","forwardRef","createTypedChart","registerables","Doughnut"],"mappings":"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","x_google_ignoreList":[0,1,2,3]}